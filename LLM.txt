========================
CODE SNIPPETS
========================
TITLE: Setting Up Logging with discord.utils.setup_logging()
DESCRIPTION: Provides examples of using the `discord.utils.setup_logging()` function to configure logging without directly using `Client.run()`. This allows for more flexible setup, including specifying the log level and whether to affect the root logger.

SOURCE: https://discordpy.readthedocs.io/en/stable/logging

LANGUAGE: python
CODE:
```
import discord

discord.utils.setup_logging()

# or, for example
discord.utils.setup_logging(level=logging.INFO, root=False)
```

----------------------------------------

TITLE: Install discord.py
DESCRIPTION: Installs the discord.py library using pip. Includes commands for standard Python installations and Windows.

SOURCE: https://discordpy.readthedocs.io/en/stable/intro

LANGUAGE: bash
CODE:
```
python3 -m pip install -U discord.py
```

LANGUAGE: bash
CODE:
```
py -3 -m pip install -U discord.py
```

----------------------------------------

TITLE: Minimal Discord Bot Example
DESCRIPTION: This Python code demonstrates how to create a simple Discord bot that responds to a '$hello' command. It requires the 'message_content' intent to be enabled and uses event handlers for bot readiness and message processing. The bot ignores messages from itself and sends 'Hello!' when it detects the '$hello' command.

SOURCE: https://discordpy.readthedocs.io/en/stable/quickstart

LANGUAGE: python
CODE:
```
# This example requires the 'message_content' intent.

import discord

intents = discord.Intents.default()
intents.message_content = True

client = discord.Client(intents=intents)

@client.event
async def on_ready():
    print(f'We have logged in as {client.user}')

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if message.content.startswith('$hello'):
        await message.channel.send('Hello!')

client.run('your token here')

```

----------------------------------------

TITLE: Client and Bot Start Methods
DESCRIPTION: Documentation for the methods used to start the discord.py client or a commands.Bot instance, including the `tasks.Loop` start method.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Client.start(token: str, *, bot: bool = True)
  Connects to Discord and starts the client.
  token: The token to connect with.
  bot: Whether the token is for a bot.

commands.Bot.start(token: str, *, reconnect: bool = True)
  Connects to Discord and starts the bot.
  token: The token to connect with.
  reconnect: Whether to attempt to reconnect on disconnect.

tasks.Loop.start()
  Starts the loop.
```

----------------------------------------

TITLE: Extension Setup and Teardown
DESCRIPTION: This Python code snippet shows the 'setup' and 'teardown' functions for a Discord bot extension. 'setup' is called when the extension is loaded, and 'teardown' is called when it is unloaded. Exceptions in 'teardown' are ignored.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/extensions

LANGUAGE: python
CODE:
```
async def setup(bot):
    print('I am being loaded!')

async def teardown(bot):
    print('I am being unloaded!')
```

----------------------------------------

TITLE: discord.ext.commands.Bot.start() Method
DESCRIPTION: Starts the bot, handling event loop control and logging setup. It's a blocking function and should be called last. It can be configured with token, reconnection behavior, and logging options.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.Bot.start(_token_, reconnect=True, log_handler=None, log_formatter=None, log_level=None, root_logger=False)

  Starts the bot.

  Parameters:
    * **token** (`str`): The authentication token for Discord. Do not prefix.
    * **reconnect** (`bool`): Whether to attempt reconnecting on disconnect. Defaults to True.
    * **log_handler** (Optional[`logging.Handler`]): Custom log handler. If None, the library sets up a default StreamHandler. New in version 2.0.
    * **log_formatter** (`logging.Formatter`): Formatter for the log handler. Defaults to a color-based formatter if available. New in version 2.0.
    * **log_level** (`int`): Default log level for the library logger. Applied only if log_handler is not None. Defaults to logging.INFO. New in version 2.0.
    * **root_logger** (`bool`): Whether to set up the root logger in addition to the library logger. Defaults to False. New in version 2.0.

  Warning:
    This function is blocking and must be called last. It sets up logging for beginners but can be disabled.

  See Also:
    [`start()`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Bot.start)
    [`connect()`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Bot.connect)
    [`login()`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Bot.login)
```

----------------------------------------

TITLE: Install discord.py with Voice Support
DESCRIPTION: Installs discord.py with additional support for voice functionality, requiring specific dependencies on Linux.

SOURCE: https://discordpy.readthedocs.io/en/stable/intro

LANGUAGE: bash
CODE:
```
python3 -m pip install -U discord.py[voice]
```

----------------------------------------

TITLE: Command Tree and Client Setup
DESCRIPTION: API for setting up translators for command trees and client setup hooks. These are crucial for internationalization and custom client initialization.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.CommandTree.set_translator(translator)
  Sets a translator for the command tree to handle localization.
  Parameters:
    translator: The translator object to use.

discord.Client.setup_hook()
  An asynchronous event that is called when the client first connects.
  This is a good place to setup listeners or other asynchronous tasks.

commands.Bot.setup_hook()
  An asynchronous event that is called when the bot first connects.
  Similar to discord.Client.setup_hook, used for bot-specific setup.
```

----------------------------------------

TITLE: discord.ext.tasks API Reference
DESCRIPTION: This reference covers the discord.ext.tasks API, focusing on the @tasks.loop decorator for creating recurring tasks and @tasks.loop.before_loop for setup logic before a task starts.

SOURCE: https://discordpy.readthedocs.io/en/stable/index

LANGUAGE: APIDOC
CODE:
```
tasks.loop(*, seconds=0, minutes=0, hours=0, count=None, time=None, loop=None, reconnect=True, name=None, skip_if_running=True):
  Decorator to create a background task that runs periodically.
  Parameters:
    seconds, minutes, hours: Time interval for the loop.
    count: Number of times the loop should run.
    time: Specific time of day to run the loop.
    skip_if_running: If True, skips the iteration if the previous one is still running.
  Example:
    @tasks.loop(minutes=5)
    async def my_task():
        print("Running background task...")

  tasks.loop.before_loop(before):
    Decorator to specify a coroutine to run before the loop starts.
    This is often used to wait until the bot is ready.
    Example:
      @my_task.before_loop
      async def before_my_task():
          await bot.wait_until_ready()
          print("Bot is ready, starting task.")
```

----------------------------------------

TITLE: Asyncio Event Loop with asyncio.run()
DESCRIPTION: Demonstrates how to use asyncio.run() to manage the event loop, allowing for custom asynchronous setup before starting the discord.py client. This approach replaces the older Client.run() method for more flexible event loop control.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
import discord
import asyncio

client = discord.Client()

async def main():
    # do other async things
    await my_async_function() # Assuming my_async_function is defined elsewhere

    # start the client
    async with client:
        await client.start(TOKEN) # TOKEN should be defined

asyncio.run(main())
```

----------------------------------------

TITLE: Asynchronous Extension Setup Function
DESCRIPTION: Demonstrates the change in discord.py extensions where the `setup` function must now be a coroutine. This change accommodates the asynchronous loading of extensions and cogs.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
# before
def setup(bot):
    bot.add_cog(MyCog(bot))

# after
async def setup(bot):
    await bot.add_cog(MyCog(bot))
```

----------------------------------------

TITLE: discord.py Cog Example
DESCRIPTION: A basic example of a discord.py Cog that includes a command to greet a member and a listener for member join events. It demonstrates how to use decorators for commands and listeners, and how to maintain state within a Cog.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/cogs

LANGUAGE: python
CODE:
```
class Greetings(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self._last_member = None

    @commands.Cog.listener()
    async def on_member_join(self, member):
        channel = member.guild.system_channel
        if channel is not None:
            await channel.send(f'Welcome {member.mention}.')

    @commands.command()
    async def hello(self, ctx, *, member: discord.Member = None):
        """Says hello"""
        member = member or ctx.author
        if self._last_member is None or self._last_member.id != member.id:
            await ctx.send(f'Hello {member.name}~')
        else:
            await ctx.send(f'Hello {member.name}... This feels familiar.')
        self._last_member = member
```

----------------------------------------

TITLE: Discord Tasks Loop Before Loop Hook
DESCRIPTION: Documents the `before_loop` hook for the `tasks.Loop` decorator in discord.py, which allows for setup logic to be executed before the loop starts.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
tasks.Loop.before_loop():
  A coroutine that is called before the loop starts. Useful for setup operations.
```

----------------------------------------

TITLE: ContextMenu Class Initialization Example
DESCRIPTION: Illustrates how to initialize a ContextMenu object, specifying its name, callback, and other optional parameters.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
import discord
from discord import app_commands

async def my_context_menu_callback(interaction: discord.Interaction):
    await interaction.response.send_message("This is a context menu!")

# Example of creating a ContextMenu object (though typically done via decorators)
context_menu_command = app_commands.ContextMenu(
    name="MyContextMenu",
    callback=my_context_menu_callback,
    type=app_commands.AppCommandType.user,
    nsfw=False,
    auto_locale_strings=True
)
```

----------------------------------------

TITLE: Discord Application Commands User Install
DESCRIPTION: This function is used to install an application for a specific user.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.user_install():
  Installs the application for the current user.
  Returns:
      An awaitable that resolves when the installation is complete.
```

----------------------------------------

TITLE: Advanced Logging Setup with RotatingFileHandler
DESCRIPTION: Demonstrates an advanced logging configuration using Python's `logging.handlers.RotatingFileHandler`. This setup logs detailed information (DEBUG level) for the 'discord' logger, but only INFO level for 'discord.http', and rotates log files to manage disk space.

SOURCE: https://discordpy.readthedocs.io/en/stable/logging

LANGUAGE: python
CODE:
```
import discord
import logging
import logging.handlers

logger = logging.getLogger('discord')
logger.setLevel(logging.DEBUG)
logging.getLogger('discord.http').setLevel(logging.INFO)

handler = logging.handlers.RotatingFileHandler(
    filename='discord.log',
    encoding='utf-8',
    maxBytes=32 * 1024 * 1024,  # 32 MiB
    backupCount=5,  # Rotate through 5 files
)
dt_fmt = '%Y-%m-%d %H:%M:%S'
formatter = logging.Formatter('[{asctime}] [{levelname:<8}] {name}: {message}', dt_fmt, style='{')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Assume client refers to a discord.Client subclass...

```

----------------------------------------

TITLE: Example: on_ready Event Listener
DESCRIPTION: An example demonstrating how to use the @event decorator to listen for the 'on_ready' event in discord.py. This event is triggered when the bot has successfully connected to Discord.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
@client.event
async def on_ready():
    print('Ready!')
```

----------------------------------------

TITLE: Basic Command Example
DESCRIPTION: A simple command demonstrating the use of the Context object to send a message. This showcases the basic interaction pattern with the bot.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

bot = commands.Bot(command_prefix='!')

@bot.command()
async def foo(ctx):
    await ctx.send('Hello')
```

----------------------------------------

TITLE: Creating a Simple Discord Bot Extension
DESCRIPTION: This Python code defines a basic Discord bot command 'hello' and an asynchronous 'setup' function to add this command to the bot when the extension is loaded. It requires the discord.ext.commands library.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/extensions

LANGUAGE: python
CODE:
```
from discord.ext import commands

@commands.command()
async def hello(ctx):
    await ctx.send(f'Hello {ctx.author.display_name}.')

async def setup(bot):
    bot.add_command(hello)
```

----------------------------------------

TITLE: MinimalHelpCommand Usage Example
DESCRIPTION: Demonstrates how to use the MinimalHelpCommand class to create a custom help command in a Discord bot.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands


class MyBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix='!', help_command=commands.MinimalHelpCommand())


intents = discord.Intents.default()
intents.message_content = True

bot = MyBot()

@bot.command()
async def hello(ctx):
    await ctx.send('Hello!')


bot.run('YOUR_BOT_TOKEN')
```

----------------------------------------

TITLE: DynamicItem Initialization Example
DESCRIPTION: Illustrates how to initialize a DynamicItem in Python, specifying the item to wrap and a regular expression template for parsing custom IDs. This example demonstrates the basic usage of the DynamicItem class.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
import discord
import re

# Assuming 'my_button' is an instance of a discord.ui.Item subclass
# For example: my_button = discord.ui.Button(label="Click Me")

# Define a template for parsing custom IDs
custom_id_template = re.compile(r"my_prefix_(\\d+)")

# Create a DynamicItem instance
dynamic_item = discord.ui.DynamicItem(
    item=my_button, 
    template=custom_id_template, 
    row=0
)
```

----------------------------------------

TITLE: Task Waiting for Bot Ready
DESCRIPTION: This example shows a task that waits until the bot is ready before it starts its execution. This is useful for tasks that depend on the bot's connection and state.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/tasks/index

LANGUAGE: python
CODE:
```
from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.index = 0
        self.bot = bot
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=5.0)
    async def printer(self):
        print(self.index)
        self.index += 1

    @printer.before_loop
    async def before_printer(self):
        print('waiting...')
        await self.bot.wait_until_ready()

```

----------------------------------------

TITLE: Approximate User Install Count
DESCRIPTION: Provides the approximate number of users who have installed the application.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: python
CODE:
```
discord.AppInfo.approximate_user_install_count
```

----------------------------------------

TITLE: Global Command Hooks
DESCRIPTION: Demonstrates how to set up global hooks that are executed before and after any command is invoked on the bot. These are useful for general setup or cleanup tasks.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
@bot.before_invoke
async defbefore_any_command(ctx):
    # do something before a command is called
    pass

@bot.after_invoke
async defafter_any_command(ctx):
    # do something after a command is called
    pass
```

----------------------------------------

TITLE: Discord Application Information
DESCRIPTION: Provides access to installation parameters for Discord applications.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: python
CODE:
```
discord.AppInfo.install_params
```

----------------------------------------

TITLE: Task with Limited Loops and After Hook
DESCRIPTION: Illustrates a task that runs a specific number of times (5 in this case) and executes a function after it completes. The task starts automatically when the client setup is done.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/tasks/index

LANGUAGE: python
CODE:
```
from discord.ext import tasks
import discord

@tasks.loop(seconds=5.0, count=5)
async def slow_count():
    print(slow_count.current_loop)

@slow_count.after_loop
async def after_slow_count():
    print('done!')

class MyClient(discord.Client):
    async def setup_hook(self):
        slow_count.start()

```

----------------------------------------

TITLE: Example Usage of GroupCog
DESCRIPTION: An example demonstrating how to use the GroupCog class to create a cog that functions as a group for application commands.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
from discord import app_commands
from discord.ext import commands

@app_commands.guild_only()
class MyCog(commands.GroupCog, group_name='my-cog'):
    pass

```

----------------------------------------

TITLE: Basic Discord Bot Event Handling
DESCRIPTION: A simple Python example demonstrating how to create a Discord bot client that responds to the 'on_ready' and 'on_message' events. Requires the 'message_content' intent.

SOURCE: https://discordpy.readthedocs.io/en/stable/intro

LANGUAGE: python
CODE:
```
# This example requires the 'message_content' intent.

import discord

class MyClient(discord.Client):
    async def on_ready(self):
        print(f'Logged on as {self.user}!')

    async def on_message(self, message):
        print(f'Message from {message.author}: {message.content}')

intents = discord.Intents.default()
intents.message_content = True

client = MyClient(intents=intents)
client.run('my token goes here')
```

----------------------------------------

TITLE: Example Context Menu Commands
DESCRIPTION: Demonstrates how to use the `context_menu` decorator to create two different context menu commands: one for sending a message response and another for simulating a ban action.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
@app_commands.context_menu()
async def react(interaction: discord.Interaction, message: discord.Message):
    await interaction.response.send_message('Very cool message!', ephemeral=True)

@app_commands.context_menu()
async def ban(interaction: discord.Interaction, user: discord.Member):
    await interaction.response.send_message(f'Should I actually ban {user}...', ephemeral=True)
```

----------------------------------------

TITLE: Discord Bot Setup and Basic Operations
DESCRIPTION: This snippet demonstrates how to set up a basic Discord bot using discord.py, including handling messages, sending messages to specific channels, and sending direct messages (DMs). It also shows how to retrieve the ID of a sent message and upload an image.

SOURCE: https://discordpy.readthedocs.io/en/stable/faq

LANGUAGE: python
CODE:
```
import discord

client = discord.Client()

@client.event
async def on_ready():
    print(f'Logged in as {client.user}')

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    # Sending a message to a specific channel
    if message.content.startswith('$send_to_channel'):
        channel_id = 123456789012345678  # Replace with your channel ID
        channel = client.get_channel(channel_id)
        if channel:
            await channel.send('This is a message to a specific channel!')
        else:
            await message.channel.send('Could not find the specified channel.')

    # Sending a DM
    if message.content.startswith('$dm'):
        user_id = 987654321098765432  # Replace with the user's ID
        user = await client.fetch_user(user_id)
        if user:
            await user.send('This is a direct message!')
            await message.channel.send(f'DM sent to {user.name}.')
        else:
            await message.channel.send('Could not find the specified user.')

    # Getting the ID of a sent message
    if message.content.startswith('$send_and_get_id'):
        sent_message = await message.channel.send('This message will have its ID printed.')
        await message.channel.send(f'The ID of the sent message is: {sent_message.id}')

    # Uploading an image
    if message.content.startswith('$upload_image'):
        with open('path/to/your/image.png', 'rb') as f:
            picture = discord.File(f, filename='image.png')
            await message.channel.send(file=picture)

# Replace 'YOUR_BOT_TOKEN' with your actual bot token
# client.run('YOUR_BOT_TOKEN')

```

----------------------------------------

TITLE: Logging to a File with Client.run()
DESCRIPTION: Configures the discord.py client to log messages to a specified file using a FileHandler. This example demonstrates how to set up a custom log handler and pass it to the Client.run() method.

SOURCE: https://discordpy.readthedocs.io/en/stable/logging

LANGUAGE: python
CODE:
```
import logging

handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')

# Assume client refers to a discord.Client subclass...
client.run(token, log_handler=handler)
```

----------------------------------------

TITLE: AppInstallationType API
DESCRIPTION: Details the AppInstallationType class, representing the installation location of an application command. It specifies whether the integration is a guild or user install.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
class discord.app_commands.AppInstallationType(_*_, _guild=None_, _user=None_)
  Attributes:
    guild: Whether the integration is a guild install.
    user: Whether the integration is a user install.
  Parameters:
    guild (Optional[bool]): Whether the integration is a guild install.
    user (Optional[bool]): Whether the integration is a user install.
  New in version 2.4.
```

----------------------------------------

TITLE: discord.py User Install Command
DESCRIPTION: The @app_commands.user_install() decorator indicates that a command is intended for user installation. This is a server-side verification by Discord and has no effect on subcommands.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
import discord
from discord import app_commands

@app_commands.command()
@app_commands.user_install()
async def my_user_install_command(interaction: discord.Interaction) -> None:
    await interaction.response.send_message('I am installed in users by default!')
```

----------------------------------------

TITLE: discord.ext.commands.Bot.setup_hook() Coroutine
DESCRIPTION: A coroutine for asynchronous setup after login but before websocket connection. It's called once during login and before any events are dispatched. Avoid using functions that wait for the websocket.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
_await discord.ext.commands.Bot.setup_hook()

  Coroutine to set up the bot.

  This coroutine is called once after the bot is logged in but before it connects to the Websocket. It's a suitable place for asynchronous setup tasks.

  Warning:
    Do not use functions that wait for the websocket connection, such as `wait_for()` or `wait_until_ready()`, as this can lead to deadlocks.

  New in version 2.0.

  See Also:
    [`login()`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Bot.login "discord.ext.commands.Bot.login")
    [`on_ready()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.on_ready "discord.on_ready")
```

----------------------------------------

TITLE: Discord API - Application Information
DESCRIPTION: Reference to the custom_install_url attribute for application information, used for custom installation links.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.AppInfo.custom_install_url
```

----------------------------------------

TITLE: Example: on_message Event Listener
DESCRIPTION: An example demonstrating the use of the @listen decorator to register an external event listener for the 'on_message' event. This allows for custom handling of incoming messages.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
@bot.listen()
async def on_message(message):
    print('one')
```

----------------------------------------

TITLE: Discord Session Start Limits
DESCRIPTION: Details on the maximum concurrency for session starts.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.SessionStartLimits.max_concurrency
  - The maximum number of concurrent session start requests allowed.
```

----------------------------------------

TITLE: User-Installable App Support
DESCRIPTION: This section covers the new features for supporting user-installable applications in discord.py. It includes decorators and attributes to control application installation types and methods to check integration types.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
from discord.app_commands import Command, AppCommand, ContextMenu, allowed_installs, guild_install, user_install, AppInstallationType

# Example usage of decorators
@allowed_installs(AppInstallationType.user_install)
def my_user_installable_command(...):
    pass

@guild_install()
def my_guild_installable_command(...):
    pass

@user_install()
def my_user_installable_command_alt(...):
    pass

# Accessing allowed_installs attribute
my_command_instance: Command
print(my_command_instance.allowed_installs)

# Checking interaction integration type
from discord import Interaction

interaction: Interaction
print(interaction.is_guild_integration())
print(interaction.is_user_integration())
```

----------------------------------------

TITLE: Fetch Session Start Limits
DESCRIPTION: Fetches the current session start limits for the application. This is relevant for bot scaling and connection management.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.AutoShardedClient.fetch_session_start_limits()
  Fetches the current session start limits.
  Returns:
    A SessionStartLimit object.
```

----------------------------------------

TITLE: Bot Extension Loading
DESCRIPTION: Loads a Python extension module that contains commands, cogs, or listeners. The extension must define a global `setup` function as its entry point, accepting the bot instance as an argument. This method is a coroutine and was changed to be a coroutine in version 2.0.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
_await _load_extension(_name_ , _*_ , _package =None_)[¶]
    This function is a [_coroutine_].
    Loads an extension.
    An extension is a python module that contains commands, cogs, or listeners.
    An extension must have a global function, `setup` defined as the entry point on what to do when the extension is loaded. This entry point must have a single argument, the `bot`.
    Changed in version 2.0: This method is now a [coroutine]. 

    Parameters
        
      * **name** ([`str`]) – The extension name to load. It must be dot separated like regular Python imports if accessing a sub-module. e.g. `foo.test` if you want to import `foo/test.py`.
      * **package** (Optional[[`str`]]) – 
```

----------------------------------------

TITLE: Discord Session Start Limits
DESCRIPTION: Represents the limits for starting a session, likely related to connection or gateway management.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.SessionStartLimits:
  - Represents the limits for starting a session.
  - Attributes:
    - remaining: The number of remaining session starts.
    - reset_after: The time in seconds until the limit resets.
    - total: The total number of allowed session starts.
```

----------------------------------------

TITLE: Command Copy Example
DESCRIPTION: Demonstrates how to create a copy of an existing Discord command using the `copy()` method. This is useful for creating variations or backups of commands.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
import discord
from discord.ext import commands

# Assuming 'bot' is an instance of commands.Bot and 'my_command' is a defined command
# bot = commands.Bot(command_prefix='!')
# @bot.command()
# async def my_command(ctx):
#     await ctx.send('This is my command.')

# Example usage (assuming my_command is accessible):
# copied_command = my_command.copy()
# print(f"Original command name: {my_command.name}")
# print(f"Copied command name: {copied_command.name}")

```

----------------------------------------

TITLE: Greedy Converter Example: Slapping Members
DESCRIPTION: Demonstrates the use of the Greedy converter to accept an arbitrary number of discord.Member arguments for a command. It showcases how to join the names of the slapped members and include a reason.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

# Assuming 'bot' is an instance of commands.Bot
# @bot.command()
# async def slap(ctx, members: commands.Greedy[discord.Member], *, reason='no reason'):
#     slapped = ", ".join(x.name for x in members)
#     await ctx.send(f'{slapped} just got slapped for {reason}')
```

----------------------------------------

TITLE: discord.py Session Start Limits
DESCRIPTION: Manages limits related to session starts, including reset intervals. This is important for controlling connection rates and API usage.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.SessionStartLimits.reset_after
  - The time in seconds after which session start limits are reset.
```

----------------------------------------

TITLE: Python CogMeta Example
DESCRIPTION: Demonstrates the creation of a custom metaclass by combining discord.py's CogMeta with Python's abc.ABCMeta for abstract cogs.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands
import abc

class CogABCMeta(commands.CogMeta, abc.ABCMeta):
    pass

class SomeMixin(metaclass=abc.ABCMeta):
    pass

class SomeCogMixin(SomeMixin, commands.Cog, metaclass=CogABCMeta):
    pass

```

----------------------------------------

TITLE: Applying Command Attributes Example
DESCRIPTION: Shows how to use the `command_attrs` argument in CogMeta to apply default attributes to all commands within a cog, with examples of overriding these attributes at the command level.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
class MyCogWithAttrs(commands.Cog, command_attrs=dict(hidden=True)):
    @commands.command()
    async def foo(self, ctx):
        pass # hidden -> True

    @commands.command(hidden=False)
    async def bar(self, ctx):
        pass # hidden -> False

```

----------------------------------------

TITLE: Using setup_hook() for Bot Initialization
DESCRIPTION: Illustrates the use of the new setup_hook() method in discord.py. This asynchronous method is called after login but before connecting to the gateway, ideal for setting up bot features. It is defined by subclassing discord.Client.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
import discord

class MyClient(discord.Client):
    async def setup_hook(self):
        print('This is asynchronous!')

client = MyClient()
client.run(TOKEN) # TOKEN should be defined
```

----------------------------------------

TITLE: discord.py Guild Install Command
DESCRIPTION: The @app_commands.guild_install() decorator signifies that a command should be installed within guilds. Discord handles this verification server-side, and it does not impact subcommands.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
import discord
from discord import app_commands

@app_commands.command()
@app_commands.guild_install()
async def my_guild_install_command(interaction: discord.Interaction) -> None:
    await interaction.response.send_message('I am installed in guilds by default!')
```

----------------------------------------

TITLE: Basic FlagConverter Example
DESCRIPTION: Demonstrates a simple FlagConverter with a text and a boolean flag. Positional arguments are handled directly, while flags require a value.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
class Greeting(commands.FlagConverter):
    text: str = commands.flag(positional=True)
    bold: bool = False
```

----------------------------------------

TITLE: Discord.py Privileged Intents Checklist
DESCRIPTION: A guide to help developers determine if they need specific privileged intents for their discord.py bots. It lists the functionalities associated with each intent.

SOURCE: https://discordpy.readthedocs.io/en/stable/intents

LANGUAGE: text
CODE:
```
Presence Intent:
- Tracks Member.status
- Tracks Member.activity or Member.activities

Member Intent:
- Tracks member joins/leaves (on_member_join, on_member_remove)
- Tracks member updates (nickname, role changes)
- Tracks user updates (usernames, avatars, discriminators)
- Requests guild member list (Guild.chunk, Guild.fetch_members)
- High accuracy member cache (Guild.members)

Message Content Intent:
- Checks Message.content
- Checks Message.attachments
- Checks Message.embeds
- Checks Message.components
- Checks Message.poll
- Uses commands extension with non-mentioning prefix
```

----------------------------------------

TITLE: Thread Starter Message
DESCRIPTION: Refers to the initial message that starts a thread.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Thread.starter_message
  The message that started the thread.
```

----------------------------------------

TITLE: Inter-Cog Communication Example
DESCRIPTION: Illustrates how cogs can communicate with each other by retrieving instances of other cogs. This example shows an 'Economy' cog being used by a 'Gambling' cog.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/cogs

LANGUAGE: python
CODE:
```
classEconomy(commands.Cog):
    ...

    async defwithdraw_money(self, member, money):
        # implementation here
        ...

    async defdeposit_money(self, member, money):
        # implementation here
        ...

classGambling(commands.Cog):
    def__init__(self, bot):
        self.bot = bot

    defcoinflip(self):
        return random.randint(0, 1)

    @commands.command()
    async defgamble(self, ctx, money: int):
        """Gambles some money."""
        economy = self.bot.get_cog('Economy')
        if economy is not None:
            await economy.withdraw_money(ctx.author, money)
            if self.coinflip() == 1:
                await economy.deposit_money(ctx.author, money * 1.5)
```

----------------------------------------

TITLE: Discord.py Command and Cog Get Methods
DESCRIPTION: Retrieves commands from CommandTree, Cog, and Bot instances. Also includes methods for getting command context, cooldown retry information, parameter defaults, and help command destinations.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.CommandTree.get_commands()
  - Returns a list of all registered application commands.

commands.Cog.get_commands()
  - Returns a list of commands associated with the cog.

commands.Bot.get_context(message, *, cls=commands.Context)
  - Finds the context for a given message.
  - Parameters:
    - message: The message to get the context for.
    - cls: The context class to use (defaults to commands.Context).

commands.Command.get_cooldown_retry_after(now=None)
commands.Group.get_cooldown_retry_after(now=None)
commands.HybridGroup.get_cooldown_retry_after(now=None)
  - Returns the time in seconds until the command can be used again.
  - Parameters:
    - now: The current time (defaults to the current time).

commands.Parameter.get_default()
  - Returns the default value of the parameter, if any.

commands.DefaultHelpCommand.get_destination()
commands.HelpCommand.get_destination()
commands.MinimalHelpCommand.get_destination()
  - Returns the destination where the help message should be sent.

commands.DefaultHelpCommand.get_ending_note()
commands.MinimalHelpCommand.get_ending_note()
  - Returns the ending note for the help message.

commands.FlagConverter.get_flags()
  - Returns a dictionary of flags parsed from the input.

commands.Cog.get_listeners()
  - Returns a list of listeners associated with the cog.

commands.HelpCommand.get_max_size()
  - Returns the maximum size of the help message.

commands.MinimalHelpCommand.get_opening_note()
  - Returns the opening note for the help message.

discord.app_commands.Command.get_parameter(name)
  - Returns the parameter with the given name.
  - Parameters:
    - name: The name of the parameter to retrieve.
```

----------------------------------------

TITLE: Logging and Sharding Configuration
DESCRIPTION: Utilities for setting up logging and accessing shard-related information. Includes functions for logging setup and attributes for shard identification and counts.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.utils.setup_logging(level=None, *, handler=None, formatter=None, root_logger=False)
  Sets up the logging for the discord.py library.
  Parameters:
    level: The logging level to set.
    handler: A custom logging handler.
    formatter: A custom logging formatter.
    root_logger: Whether to configure the root logger.

discord.AutoShardedClient.shard_connect_timeout
  The timeout in seconds for establishing a shard connection.

discord.ShardInfo.shard_count
  The total number of shards in the client.

discord.ConnectionClosed.shard_id
  The shard ID that was disconnected.

discord.Guild.shard_id
  The shard ID that the guild belongs to.

discord.PrivilegedIntentsRequired.shard_id
  The shard ID that requires privileged intents.

discord.AutoShardedClient.shard_ids
  A list of shard IDs the client is managing.

discord.ShardInfo
  Represents information about a specific shard.

discord.AutoShardedClient.shards
  A dictionary mapping shard IDs to ShardInfo objects.
```

----------------------------------------

TITLE: Range Example Usage
DESCRIPTION: This example demonstrates how to use the Range type annotation for an integer parameter in a Discord command, restricting the input value to be between 10 and 12 (inclusive).

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: Python
CODE:
```
@app_commands.command()
async def range(interaction: discord.Interaction, value: app_commands.Range[int, 10, 12]):
    await interaction.response.send_message(f'Your value is {value}', ephemeral=True)
```

----------------------------------------

TITLE: Discord API Integration Configuration
DESCRIPTION: Details the configuration options for OAuth2 installations within Discord integrations.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.IntegrationTypeConfig.oauth2_install_params:
  Represents the parameters for an OAuth2 install.
```

----------------------------------------

TITLE: Example Usage of has_any_role
DESCRIPTION: Demonstrates how to use the @commands.has_any_role decorator in a discord.py command to restrict access based on user roles.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
content_copy
@bot.command()
@commands.has_any_role('Library Devs', 'Moderators', 492212595072434186)
async def cool(ctx):
    await ctx.send('You are cool indeed')

```

----------------------------------------

TITLE: discord.py Session Limits
DESCRIPTION: Provides information about remaining session start limits.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.SessionStartLimits.remaining
  - The number of remaining session start attempts.
```

----------------------------------------

TITLE: Activate Virtual Environment
DESCRIPTION: Commands to activate a Python virtual environment. Includes instructions for both Unix-like systems and Windows.

SOURCE: https://discordpy.readthedocs.io/en/stable/intro

LANGUAGE: bash
CODE:
```
cd
source
```

LANGUAGE: bash
CODE:
```
\Scripts\activate.bat
```

----------------------------------------

TITLE: Hybrid Command with Flag Converter Example
DESCRIPTION: Demonstrates how to use a FlagConverter with a hybrid command in discord.py. This flattens parameters for application commands and allows inline descriptions and renames.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
class BanFlags(commands.FlagConverter):
    member: discord.Member
    reason: str
    days: int = 1


@commands.hybrid_command()
async def ban(ctx, *, flags: BanFlags):
    ...
```

LANGUAGE: python
CODE:
```
@commands.hybrid_command()
async def ban(ctx, member: discord.Member, reason: str, days: int = 1):
    ...
```

LANGUAGE: python
CODE:
```
class BanFlags(commands.FlagConverter):
    member: discord.Member
    reason: str
    days: int = 1


@commands.hybrid_command()
@app_commands.describe(
    member='The member to ban',
    reason='The reason for the ban',
    days='The number of days worth of messages to delete',
)
async def ban(ctx, *, flags: BanFlags):
    ...
```

LANGUAGE: python
CODE:
```
class BanFlags(commands.FlagConverter):
    member: discord.Member = commands.flag(description='The member to ban')
    reason: str = commands.flag(description='The reason for the ban')
    days: int = commands.flag(default=1, description='The number of days worth of messages to delete')


@commands.hybrid_command()
async def ban(ctx, *, flags: BanFlags):
    ...
```

----------------------------------------

TITLE: discord.AutoShardedClient.fetch_session_start_limits()
DESCRIPTION: Adds the fetch_session_start_limits() method to AutoShardedClient for retrieving session start limits.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
import discord

async def get_limits(client: discord.AutoShardedClient):
    limits = await client.fetch_session_start_limits()
    print(f"Session start limits: {limits}")
```

----------------------------------------

TITLE: Activity Creation Timestamp
DESCRIPTION: Adds the `Activity.created_at` attribute to retrieve the timestamp when an activity was started.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
activity.created_at
```

----------------------------------------

TITLE: MinimalHelpCommand Methods
DESCRIPTION: Provides documentation for methods within MinimalHelpCommand, covering sending help pages, retrieving opening/ending notes, command signatures, and formatting bot commands and subcommands.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
_send_pages():
  Description: A helper utility to send the page output from paginator to the destination.
  Type: coroutine

get_opening_note():
  Description: Returns help command’s opening note. This is mainly useful to override for i18n purposes.
  Returns: The help command opening note.
  Return type: str

get_command_signature(command):
  Description: Retrieves the signature portion of the help page.
  Parameters:
    command (Command): The command to get the signature of.
  Returns: The signature for the command.
  Return type: str

get_ending_note():
  Description: Return the help command’s ending note. This is mainly useful to override for i18n purposes.
  Returns: The help command ending note.
  Return type: str

add_bot_commands_formatting(commands, heading):
  Description: Adds the minified bot heading with commands to the output. The formatting should be added to the paginator.
  Parameters:
    commands (Sequence[Command]): A list of commands that belong to the heading.
    heading (str): The heading to add to the line.

add_subcommand_formatting(command):
  Description: Adds formatting information on a subcommand.
```

----------------------------------------

TITLE: Python MentionableSelect Example
DESCRIPTION: Illustrates how to create and use a MentionableSelect component in a discord.py application, allowing users to select roles or members.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
import discord

class MyView(discord.ui.View):
    @discord.ui.select(
        placeholder="Choose a role or member...",
        min_values=1,
        max_values=3
    )
    async def select_callback(self, interaction: discord.Interaction, select: discord.ui.MentionableSelect):
        await interaction.response.send_message(f"You selected: {select.values}")


# To use this view:
# view = MyView()
# await interaction.response.send_message("Here is the select menu:", view=view)
```

----------------------------------------

TITLE: Discord UI Modal Creation Example
DESCRIPTION: Demonstrates how to create a custom modal in discord.py by inheriting from ui.Modal and defining TextInput fields. The on_submit method handles the interaction response.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
import discord
from discord import ui

class Questionnaire(ui.Modal, title='Questionnaire Response'):
    name = ui.TextInput(label='Name')
    answer = ui.TextInput(label='Answer', style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message(f'Thanks for your response, {self.name}!', ephemeral=True)
```

----------------------------------------

TITLE: Setting Discord Client Activity
DESCRIPTION: Shows how to initialize a discord.py client with a static 'Playing' status using the `activity` parameter and `discord.Game`.

SOURCE: https://discordpy.readthedocs.io/en/stable/faq

LANGUAGE: python
CODE:
```
client = discord.Client(activity=discord.Game(name='my game'))
```

----------------------------------------

TITLE: Upload File from URL
DESCRIPTION: Downloads a file from a URL using `aiohttp` and uploads it to Discord. Requires `aiohttp` to be installed. The downloaded content is passed as a `BytesIO` object to `discord.File`.

SOURCE: https://discordpy.readthedocs.io/en/stable/faq

LANGUAGE: python
CODE:
```
import io
import aiohttp

async with aiohttp.ClientSession() as session:
    async with session.get(my_url) as resp:
        if resp.status != 200:
            return await channel.send('Could not download file...')
        data = io.BytesIO(await resp.read())
        await channel.send(file=discord.File(data, 'cool_image.png'))
```

----------------------------------------

TITLE: discord.py Command and Help Functionality
DESCRIPTION: Documentation for the `prepare_help_command` method within the `commands.HelpCommand` class, used for preparing the help command execution in discord.py.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.HelpCommand.prepare_help_command()
  - Prepares the help command for execution.
  - This method is called before the help command is sent to the user.
```

----------------------------------------

TITLE: Member Boosting Information
DESCRIPTION: Allows querying when a member started boosting a guild and retrieving a list of all members currently boosting the guild.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
Member.premium_since
  - Queries since when a member has boosted a guild.

Guild.premium_subscribers
  - Queries all the members currently boosting the guild.
```

----------------------------------------

TITLE: Example: Creating a Guild-Restricted Group
DESCRIPTION: Demonstrates how to create a command group that is restricted to specific guilds using the guild_only decorator.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
from discord import app_commands

@app_commands.guild_only()
class MyGroup(app_commands.Group):
    pass

```

----------------------------------------

TITLE: Voice Connection and Playback (Before vs. After)
DESCRIPTION: Compares the old method of joining a voice channel and creating an audio player with the new method using `VoiceChannel.connect()` and `VoiceClient.play()`.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
vc = await client.join_voice_channel(channel)
player = vc.create_ffmpeg_player('testing.mp3', after=lambda: print('done'))
player.start()

player.is_playing()
player.pause()
player.resume()
player.stop()
# ...
```

LANGUAGE: python
CODE:
```
vc = await channel.connect()
vc.play(discord.FFmpegPCMAudio('testing.mp3'), after=lambda e: print('done', e))
vc.is_playing()
vc.pause()
vc.resume()
vc.stop()
# ...
```

----------------------------------------

TITLE: Getting the next item from an iterator without a loop
DESCRIPTION: Demonstrates how to get the next item from an asynchronous iterator using `anext()` (Python 3.10+) or `__anext__()` when `AsyncIterator.next()` is no longer available.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
# before
it = channel.history()
first = await it.next()
if first.content == 'do not iterate':
    return
async for message in it:
    ...

# after
it = channel.history()
first = await anext(it)  # await it.__anext__() on Python<3.10
if first.content == 'do not iterate':
    return
async for message in it:
    ...
```

----------------------------------------

TITLE: locale_str Usage Example
DESCRIPTION: Illustrates how to use the locale_str class to mark a string for translation in discord.py.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
from discord.app_commands import locale_str

# Example usage:
my_string = locale_str("Hello, world!")

# This string can now be translated by the CommandTree during sync.
```

----------------------------------------

TITLE: discord.ext.commands.MinimalHelpCommand Formatting
DESCRIPTION: This section details methods from MinimalHelpCommand, designed for creating concise help messages. It includes functions for generating command signatures, and formatting for bot commands, subcommands, and aliases.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.MinimalHelpCommand.get_command_signature(command)
  - Gets the signature of a command.
  - Parameters:
    - command: The command to get the signature for.

discord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting(commands)
  - Adds formatting for a list of bot commands.
  - Parameters:
    - commands: A list of commands.

discord.ext.commands.MinimalHelpCommand.add_subcommand_formatting(command)
  - Adds formatting for a subcommand.
  - Parameters:
    - command: The subcommand to format.

discord.ext.commands.MinimalHelpCommand.add_aliases_formatting(command)
  - Adds formatting for command aliases.
  - Parameters:
    - command: The command with aliases.

discord.ext.commands.MinimalHelpCommand.add_command_formatting(command)
  - Adds formatting for a command.
  - Parameters:
    - command: The command to format.
```

----------------------------------------

TITLE: Discord API - Subscription Period Information
DESCRIPTION: References to attributes providing the start and end dates of the current subscription period.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Subscription.current_period_end
discord.Subscription.current_period_start
```

----------------------------------------

TITLE: discord.app_commands and discord.AppCommandOptionType user-related
DESCRIPTION: Enums and types related to application commands, specifically concerning user-related options and installation types.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.AppInstallationType.user
  - Description: Represents a user-based installation type for application commands.

discord.AppCommandOptionType.user
  - Description: Represents the user type for application command options.
```

----------------------------------------

TITLE: Asynchronous Extension Loading
DESCRIPTION: Illustrates how to load extensions asynchronously in discord.py. This covers using `setup_hook` within a Bot subclass or within an `async with` block for loading extensions.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
# before
bot.load_extension('my_extension')

# after using setup_hook
class MyBot(commands.Bot):
    async def setup_hook(self):
        await self.load_extension('my_extension')

# after using async_with
async def main():
    async with bot:
        await bot.load_extension('my_extension')
        await bot.start(TOKEN)

asyncio.run(main())
```

----------------------------------------

TITLE: Discord.py Prefix Get Method
DESCRIPTION: Retrieves the prefix for a given message from the bot.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.Bot.get_prefix(message)
  - Retrieves the prefix for a given message.
  - Parameters:
    - message: The message to get the prefix for.
```

----------------------------------------

TITLE: Client Initialization with Intents
DESCRIPTION: Demonstrates how to initialize the discord.Client with gateway intents, a requirement for bots after Discord's API changes. This ensures proper event handling and data retrieval.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
import discord

intents = discord.Intents.default()
# Enable specific intents as needed, e.g., intents.members = True

client = discord.Client(intents=intents)
```

----------------------------------------

TITLE: Getting App Commands
DESCRIPTION: Retrieves a list of discord.app_commands.Command and discord.app_commands.Group objects defined within the cog.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
from typing import List, Union
import discord

# Assuming 'cog' is an instance of a Cog class
# app_commands: List[Union[discord.app_commands.Command, discord.app_commands.Group]] = cog.walk_app_commands()
```

----------------------------------------

TITLE: Simple Background Task
DESCRIPTION: Demonstrates a basic background task that runs every 5 seconds and increments an index. It includes starting the task in `__init__` and cancelling it in `cog_unload`.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/tasks/index

LANGUAGE: python
CODE:
```
from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self):
        self.index = 0
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=5.0)
    async def printer(self):
        print(self.index)
        self.index += 1

```

----------------------------------------

TITLE: Member and Entitlement Flags
DESCRIPTION: Details attributes related to member flags, specifically those indicating participation in onboarding or home actions, and entitlement start times.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.MemberFlags.started_home_actions
  Indicates if the member has started home actions.

discord.MemberFlags.started_onboarding
  Indicates if the member has started the onboarding process.

discord.Entitlement.starts_at
  The timestamp when the entitlement starts.
```

----------------------------------------

TITLE: discord.ext.commands Overview
DESCRIPTION: Provides a framework for creating extensible, flexible, and powerful bot commands for Discord. It simplifies common bot development tasks.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/index

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

# Bot setup and command definitions would go here.
```

----------------------------------------

TITLE: Discord.py Partial Messageable Get Methods
DESCRIPTION: Retrieves a partial messageable object from the client or bot.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Client.get_partial_messageable(channel_id)
commands.Bot.get_partial_messageable(channel_id)
  - Retrieves a partial messageable object from the cache given its ID.
  - Parameters:
    - channel_id: The ID of the messageable channel to retrieve.
```

----------------------------------------

TITLE: discord.py API Documentation - discord.ext.commands
DESCRIPTION: API documentation for the discord.ext.commands extension, detailing key classes and methods such as Greedy, Cog, Context, and Range.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands:
  Greedy:
    Allows a command argument to consume multiple values, potentially maintaining state between calls.

  Cog:
    has_app_command_error_handler() -> bool
      Checks if the cog has an application command error handler defined.

  Context:
    send(content: Optional[str] = None, *, tts: bool = False, embed: Optional[discord.Embed] = None, file: Optional[discord.File] = None, files: Optional[List[discord.File]] = None, delete_after: Optional[float] = None, nonce: Optional[str] = None, allowed_mentions: Optional[discord.AllowedMentions] = None, reference: Optional[discord.Message] = None, mention_author: Optional[bool] = None, view: Optional[discord.ui.View] = None, suppress_embeds: Optional[bool] = None, ephemeral: bool = False)
      Sends a message to the context. Supports `delete_after` for ephemeral messages.

    from_interaction(interaction: discord.Interaction) -> Context
      Creates a Context object from an interaction. Fixes ignoring `command_failed`.

  Range:
    Allows specifying a range for command arguments, supporting Python 3.10 Union syntax.
```

----------------------------------------

TITLE: Discord UTC Now
DESCRIPTION: Utility function to get the current time in UTC.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.utils.utcnow():
  Returns the current time in UTC.
  Returns:
      datetime: The current UTC time.
```

----------------------------------------

TITLE: Using aiohttp.ClientSession for Requests
DESCRIPTION: Shows the recommended way to make HTTP requests using `aiohttp` by creating a `ClientSession`. This approach is more efficient than creating a new session for each request and demonstrates proper session management.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
async with aiohttp.ClientSession() as sess:
    async with sess.get('url') as resp:
        # work with resp
```

----------------------------------------

TITLE: discord.py allowed_installs Decorator
DESCRIPTION: The `allowed_installs` decorator specifies contexts where a command should be installed. It's verified server-side by Discord and does not function with subcommands. This decorator was introduced in version 2.4.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
@discord.app_commands.allowed_installs(_guilds =..._, _users =..._)
async def my_command(interaction: discord.Interaction) -> None:
    await interaction.response.send_message('I am installed in users by default!')
```

----------------------------------------

TITLE: Making Asynchronous Web Requests with aiohttp
DESCRIPTION: Shows how to make non-blocking HTTP requests using the `aiohttp` library, which is a dependency of discord.py. This example demonstrates fetching JSON data from a remote API.

SOURCE: https://discordpy.readthedocs.io/en/stable/faq

LANGUAGE: python
CODE:
```
import aiohttp

async with aiohttp.ClientSession() as session:
    async with session.get('http://aws.random.cat/meow') as r:
        if r.status == 200:
            js = await r.json()

```

----------------------------------------

TITLE: discord.app_commands.guild_install() Function
DESCRIPTION: This function is used to install application commands to a specific guild. It is essential for developers who want to register slash commands or other application commands within a particular Discord guild.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: Python
CODE:
```
import discord

# Assuming 'client' is an instance of discord.Client or discord.Bot
# and 'command' is a defined application command.

# Example usage (conceptual):
# await discord.app_commands.guild_install(client, guild_id, command)
```

----------------------------------------

TITLE: Discord App Command Tree Methods
DESCRIPTION: Provides documentation for methods related to managing and retrieving application commands from a Discord command tree. Includes functions for getting specific commands, listing all commands, and iterating through commands recursively.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
get_command(command: str, guild: Optional[Snowflake] = None, type: AppCommandType = AppCommandType.chat_input)
  Retrieves a specific application command from the command tree.
  Parameters:
    command: The name of the root command to retrieve.
    guild: The guild to get the command from. If None, retrieves a global command.
    type: The type of command to get (e.g., chat_input). Defaults to chat_input.
  Returns:
    The application command found, or None if not found.

get_commands(_*_ , guild: Optional[Snowflake] = None, type: Optional[AppCommandType] = None)
  Retrieves all application commands from the command tree.
  Parameters:
    guild: The guild to get commands from (excluding global commands). If None, only global commands are returned.
    type: The type of commands to get. If None, all command types are returned.
  Returns:
    A list of application commands.

walk_commands(_*_ , guild: Optional[Snowflake] = None, type: AppCommandType = AppCommandType.chat_input)
  Recursively walks through all application commands and child commands in the tree.
  Parameters:
    guild: The guild to iterate commands from (excluding global commands). If None, iterates global commands.
    type: The type of commands to iterate over. Defaults to chat_input.
  Yields:
    Application commands (ContextMenu, Command, Group).
```

LANGUAGE: APIDOC
CODE:
```
on_error(interaction, error, /)
  Coroutine callback for command errors.
  This function is called when any command raises an AppCommandError.
  The default implementation logs the exception if no error handlers are attached.
  Parameters:
    interaction: The interaction where the error occurred.
    error: The AppCommandError that was raised.
  Note:
    To get the command that failed, discord.Interaction.command should be used.
```

----------------------------------------

TITLE: Discord Bot Command Sync and Scopes
DESCRIPTION: This documentation explains the necessary steps for Discord bot application commands to appear. It highlights the importance of syncing commands using `CommandTree.sync()` and inviting the bot with the `applications.commands` scope.

SOURCE: https://discordpy.readthedocs.io/en/stable/faq

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.CommandTree.sync()
  - Syncs the application commands with Discord.
  - Required for commands to appear.

Bot Invitation Scopes:
  - `bot`: Standard bot scope.
  - `applications.commands`: Required for application (slash) commands.

Example OAuth URL:
  https://discord.com/oauth2/authorize?client_id=<client id>&scope=applications.commands+bot

Using `utils.oauth_url()`:
  oauth_url(<other options>, scopes=("bot", "applications.commands"))
```

----------------------------------------

TITLE: Discord.py Partial Message Get Methods
DESCRIPTION: Retrieves a partial message object from various channel types.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.DMChannel.get_partial_message(message_id)
discord.PartialMessageable.get_partial_message(message_id)
discord.StageChannel.get_partial_message(message_id)
discord.TextChannel.get_partial_message(message_id)
discord.Thread.get_partial_message(message_id)
discord.VoiceChannel.get_partial_message(message_id)
  - Retrieves a partial message object from the cache given its ID.
  - Parameters:
    - message_id: The ID of the message to retrieve.
```

----------------------------------------

TITLE: Application Command Choices and Arguments
DESCRIPTION: Documentation for defining choices and arguments for application commands in discord.py, including transformers and choice definitions.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.Choice:
  Description: Represents a choice for an application command option.
  Attributes:
    name: The display name of the choice.
    value: The value of the choice.

discord.app_commands.TranslationContextLocation.choice_name:
  Type: TranslationContextLocation
  Description: Represents the context location for choice names.

discord.app_commands.Argument.choices:
  Type: List[Choice]
  Description: A list of choices for this argument.

discord.app_commands.Parameter.choices:
  Type: List[Choice]
  Description: A list of choices for this parameter.

discord.app_commands.Transformer.choices:
  Type: List[Choice]
  Description: A list of choices for this transformer.

discord.app_commands.choices(*choices):
  Description: Decorator to set choices for an application command parameter.
  Parameters:
    *choices: A variable number of discord.app_commands.Choice objects.
```

----------------------------------------

TITLE: Discord.py Guild Member Get Methods
DESCRIPTION: Retrieves guild members by their ID or name from a guild instance.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Guild.get_member(member_id)
  - Retrieves a member from the cache given their ID.
  - Parameters:
    - member_id: The ID of the member to retrieve.

discord.Guild.get_member_named(name)
  - Retrieves a member from the cache given their name or nickname.
  - Parameters:
    - name: The name or nickname of the member to retrieve.
```

----------------------------------------

TITLE: Discord App Command Get Parameter Method
DESCRIPTION: The get_parameter method retrieves a specific parameter of the command by its name.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
get_parameter(_name_)
    Retrieves a parameter by its name.
```

----------------------------------------

TITLE: Sticker and Activity Related API Documentation
DESCRIPTION: This section covers API elements related to stickers and activities, including sticker types and attributes for starting activities or events.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.StickerType.standard
  Represents a standard sticker.

discord.StandardSticker
  Represents a standard sticker object.

discord.Activity.start
  Sets the activity to start.

discord.Game.start
  Sets the game to start.

discord.Spotify.start
  Starts a Spotify activity.

discord.ScheduledEvent.start
  Starts a scheduled event.

discord.ScheduledEvent.start_time
  The time when the scheduled event starts.
```

----------------------------------------

TITLE: Discord Member Converter Example
DESCRIPTION: Demonstrates how to use discord.Member as a converter in a command to retrieve member information. The library automatically handles conversion from mentions, IDs, nicknames, or usernames.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

bot = commands.Bot(command_prefix='!')

@bot.command()
async def joined(ctx, *, member: discord.Member):
    await ctx.send(f'{member} joined on {member.joined_at}')

# Example of how the command would be invoked:
# !joined @SomeUser
# !joined SomeUser#1234
# !joined SomeUserNickname
# !joined SomeUserID
```

----------------------------------------

TITLE: Running the Client (Simplified)
DESCRIPTION: The client.run() method has been updated to simplify the process of running the client. It now directly accepts the token and handles the event loop internally.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_async

LANGUAGE: python
CODE:
```
client.run('token')
```

----------------------------------------

TITLE: discord.ext.tasks.Loop.__call__
DESCRIPTION: Represents the callable interface for a loop task within the discord.ext.tasks extension. This method is invoked to start or manage the loop.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: python
CODE:
```
async def __call__(self, *args, **kwargs):
    # Loop execution logic here
```

----------------------------------------

TITLE: commands.DefaultHelpCommand Class
DESCRIPTION: A default implementation of the help command for bot prefixes.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.DefaultHelpCommand:
  A default implementation of `HelpCommand`.
  Attributes:
    no_category: The string to display when a command has no category.
    width: The approximate width of the help text.
    indent: The indentation for commands.
    commands_heading: The heading for the commands list.
    categories_heading: The heading for the categories list.
    dm_help: Whether to send help in DMs or not.
    clean_prefix: The prefix to use when cleaning the command string.
    command_attrs: A dictionary of attributes to apply to the help command.
    show_hidden: Whether to show hidden commands.
    pagify_help: Whether to paginate the help output.
    sort_commands: Whether to sort commands alphabetically.
    command_not_found: The message to display when a command is not found.
    invalid_category: The message to display when a category is invalid.
    dm_unavailable_message: The message to display when DMs are unavailable.
    help_attrs: A dictionary of attributes to apply to the help command.
    command_prefix: The prefix for the bot.
    command_aliases: Aliases for the help command.
    command_description: Description for the help command.
    command_signature: Signature for the help command.
    command_usage: Usage for the help command.
    command_error: Error message for the help command.
    command_invoke_without_command: Message when invoke without command.
    command_invoke_with_command: Message when invoke with command.
    command_invoke_with_subcommand: Message when invoke with subcommand.
    command_invoke_with_invalid_subcommand: Message when invoke with invalid subcommand.
    command_invoke_with_invalid_argument: Message when invoke with invalid argument.
    command_invoke_with_missing_argument: Message when invoke with missing argument.
    command_invoke_with_too_many_arguments: Message when invoke with too many arguments.
    command_invoke_with_too_few_arguments: Message when invoke with too few arguments.
    command_invoke_with_invalid_choice: Message when invoke with invalid choice.
    command_invoke_with_invalid_type: Message when invoke with invalid type.
    command_invoke_with_invalid_value: Message when invoke with invalid value.
    command_invoke_with_invalid_parameter: Message when invoke with invalid parameter.
    command_invoke_with_invalid_parameter_type: Message when invoke with invalid parameter type.
    command_invoke_with_invalid_parameter_value: Message when invoke with invalid parameter value.
    command_invoke_with_invalid_parameter_name: Message when invoke with invalid parameter name.
    command_invoke_with_invalid_parameter_description: Message when invoke with invalid parameter description.
    command_invoke_with_invalid_parameter_default: Message when invoke with invalid parameter default.
    command_invoke_with_invalid_parameter_required: Message when invoke with invalid parameter required.
    command_invoke_with_invalid_parameter_optional: Message when invoke with invalid parameter optional.
    command_invoke_with_invalid_parameter_choices: Message when invoke with invalid parameter choices.
    command_invoke_with_invalid_parameter_converter: Message when invoke with invalid parameter converter.
    command_invoke_with_invalid_parameter_converter_error: Message when invoke with invalid parameter converter error.
    command_invoke_with_invalid_parameter_converter_message: Message when invoke with invalid parameter converter message.
    command_invoke_with_invalid_parameter_converter_name: Message when invoke with invalid parameter converter name.
    command_invoke_with_invalid_parameter_converter_type: Message when invoke with invalid parameter converter type.
    command_invoke_with_invalid_parameter_converter_value: Message when invoke with invalid parameter converter value.
    command_invoke_with_invalid_parameter_converter_default: Message when invoke with invalid parameter converter default.
    command_invoke_with_invalid_parameter_converter_required: Message when invoke with invalid parameter converter required.
    command_invoke_with_invalid_parameter_converter_optional: Message when invoke with invalid parameter converter optional.
    command_invoke_with_invalid_parameter_converter_choices: Message when invoke with invalid parameter converter choices.
    command_invoke_with_invalid_parameter_converter_description: Message when invoke with invalid parameter converter description.
    command_invoke_with_invalid_parameter_converter_signature: Message when invoke with invalid parameter converter signature.
    command_invoke_with_invalid_parameter_converter_usage: Message when invoke with invalid parameter converter usage.
    command_invoke_with_invalid_parameter_converter_error_message: Message when invoke with invalid parameter converter error message.
    command_invoke_with_invalid_parameter_converter_error_type: Message when invoke with invalid parameter converter error type.
    command_invoke_with_invalid_parameter_converter_error_value: Message when invoke with invalid parameter converter error value.
    command_invoke_with_invalid_parameter_converter_error_default: Message when invoke with invalid parameter converter error default.
    command_invoke_with_invalid_parameter_converter_error_required: Message when invoke with invalid parameter converter error required.
    command_invoke_with_invalid_parameter_converter_error_optional: Message when invoke with invalid parameter converter error optional.
    command_invoke_with_invalid_parameter_converter_error_choices: Message when invoke with invalid parameter converter error choices.
    command_invoke_with_invalid_parameter_converter_error_description: Message when invoke with invalid parameter converter error description.
    command_invoke_with_invalid_parameter_converter_error_signature: Message when invoke with invalid parameter converter error signature.
    command_invoke_with_invalid_parameter_converter_error_usage: Message when invoke with invalid parameter converter error usage.
    command_invoke_with_invalid_parameter_converter_error_message_type: Message when invoke with invalid parameter converter error message type.
    command_invoke_with_invalid_parameter_converter_error_message_value: Message when invoke with invalid parameter converter error message value.
    command_invoke_with_invalid_parameter_converter_error_message_default: Message when invoke with invalid parameter converter error message default.
    command_invoke_with_invalid_parameter_converter_error_message_required: Message when invoke with invalid parameter converter error message required.
    command_invoke_with_invalid_parameter_converter_error_message_optional: Message when invoke with invalid parameter converter error message optional.
    command_invoke_with_invalid_parameter_converter_error_message_choices: Message when invoke with invalid parameter converter error message choices.
    command_invoke_with_invalid_parameter_converter_error_message_description: Message when invoke with invalid parameter converter error message description.
    command_invoke_with_invalid_parameter_converter_error_message_signature: Message when invoke with invalid parameter converter error message signature.
    command_invoke_with_invalid_parameter_converter_error_message_usage: Message when invoke with invalid parameter converter error message usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name: Message when invoke with invalid parameter converter error message type name.
    command_invoke_with_invalid_parameter_converter_error_message_type_value: Message when invoke with invalid parameter converter error message type value.
    command_invoke_with_invalid_parameter_converter_error_message_type_default: Message when invoke with invalid parameter converter error message type default.
    command_invoke_with_invalid_parameter_converter_error_message_type_required: Message when invoke with invalid parameter converter error message type required.
    command_invoke_with_invalid_parameter_converter_error_message_type_optional: Message when invoke with invalid parameter converter error message type optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_choices: Message when invoke with invalid parameter converter error message type choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_description: Message when invoke with invalid parameter converter error message type description.
    command_invoke_with_invalid_parameter_converter_error_message_type_signature: Message when invoke with invalid parameter converter error message type signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_usage: Message when invoke with invalid parameter converter error message type usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_value: Message when invoke with invalid parameter converter error message type name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_default: Message when invoke with invalid parameter converter error message type name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_required: Message when invoke with invalid parameter converter error message type name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_optional: Message when invoke with invalid parameter converter error message type name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_choices: Message when invoke with invalid parameter converter error message type name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_description: Message when invoke with invalid parameter converter error message type name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_signature: Message when invoke with invalid parameter converter error message type name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_usage: Message when invoke with invalid parameter converter error message type name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name: Message when invoke with invalid parameter converter error message type name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_value: Message when invoke with invalid parameter converter error message type name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_default: Message when invoke with invalid parameter converter error message type name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_required: Message when invoke with invalid parameter converter error message type name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_optional: Message when invoke with invalid parameter converter error message type name name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_choices: Message when invoke with invalid parameter converter error message type name name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_description: Message when invoke with invalid parameter converter error message type name name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_signature: Message when invoke with invalid parameter converter error message type name name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_usage: Message when invoke with invalid parameter converter error message type name name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name: Message when invoke with invalid parameter converter error message type name name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_value: Message when invoke with invalid parameter converter error message type name name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_default: Message when invoke with invalid parameter converter error message type name name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_required: Message when invoke with invalid parameter converter error message type name name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_optional: Message when invoke with invalid parameter converter error message type name name name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_choices: Message when invoke with invalid parameter converter error message type name name name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_description: Message when invoke with invalid parameter converter error message type name name name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_signature: Message when invoke with invalid parameter converter error message type name name name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_usage: Message when invoke with invalid parameter converter error message type name name name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name: Message when invoke with invalid parameter converter error message type name name name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_value: Message when invoke with invalid parameter converter error message type name name name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_default: Message when invoke with invalid parameter converter error message type name name name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_required: Message when invoke with invalid parameter converter error message type name name name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_optional: Message when invoke with invalid parameter converter error message type name name name name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_choices: Message when invoke with invalid parameter converter error message type name name name name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_description: Message when invoke with invalid parameter converter error message type name name name name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_signature: Message when invoke with invalid parameter converter error message type name name name name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_usage: Message when invoke with invalid parameter converter error message type name name name name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name: Message when invoke with invalid parameter converter error message type name name name name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_value: Message when invoke with invalid parameter converter error message type name name name name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_default: Message when invoke with invalid parameter converter error message type name name name name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_required: Message when invoke with invalid parameter converter error message type name name name name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_optional: Message when invoke with invalid parameter converter error message type name name name name name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_choices: Message when invoke with invalid parameter converter error message type name name name name name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_description: Message when invoke with invalid parameter converter error message type name name name name name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_signature: Message when invoke with invalid parameter converter error message type name name name name name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_usage: Message when invoke with invalid parameter converter error message type name name name name name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name: Message when invoke with invalid parameter converter error message type name name name name name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_value: Message when invoke with invalid parameter converter error message type name name name name name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_default: Message when invoke with invalid parameter converter error message type name name name name name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_required: Message when invoke with invalid parameter converter error message type name name name name name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_optional: Message when invoke with invalid parameter converter error message type name name name name name name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_choices: Message when invoke with invalid parameter converter error message type name name name name name name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_description: Message when invoke with invalid parameter converter error message type name name name name name name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_signature: Message when invoke with invalid parameter converter error message type name name name name name name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_usage: Message when invoke with invalid parameter converter error message type name name name name name name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name: Message when invoke with invalid parameter converter error message type name name name name name name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_value: Message when invoke with invalid parameter converter error message type name name name name name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_default: Message when invoke with invalid parameter converter error message type name name name name name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_required: Message when invoke with invalid parameter converter error message type name name name name name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_optional: Message when invoke with invalid parameter converter error message type name name name name name name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_choices: Message when invoke with invalid parameter converter error message type name name name name name name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_description: Message when invoke with invalid parameter converter error message type name name name name name name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_signature: Message when invoke with invalid parameter converter error message type name name name name name name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_usage: Message when invoke with invalid parameter converter error message type name name name name name name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name: Message when invoke with invalid parameter converter error message type name name name name name name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_value: Message when invoke with invalid parameter converter error message type name name name name name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_default: Message when invoke with invalid parameter converter error message type name name name name name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_required: Message when invoke with invalid parameter converter error message type name name name name name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_optional: Message when invoke with invalid parameter converter error message type name name name name name name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_choices: Message when invoke with invalid parameter converter error message type name name name name name name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_description: Message when invoke with invalid parameter converter error message type name name name name name name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_signature: Message when invoke with invalid parameter converter error message type name name name name name name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_usage: Message when invoke with invalid parameter converter error message type name name name name name name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name: Message when invoke with invalid parameter converter error message type name name name name name name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_value: Message when invoke with invalid parameter converter error message type name name name name name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_default: Message when invoke with invalid parameter converter error message type name name name name name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_required: Message when invoke with invalid parameter converter error message type name name name name name name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_optional: Message when invoke with invalid parameter converter error message type name name name name name name optional.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_choices: Message when invoke with invalid parameter converter error message type name name name name name name choices.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_description: Message when invoke with invalid parameter converter error message type name name name name name name description.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_signature: Message when invoke with invalid parameter converter error message type name name name name name name signature.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_usage: Message when invoke with invalid parameter converter error message type name name name name name usage.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_name: Message when invoke with invalid parameter converter error message type name name name name name name name.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_value: Message when invoke with invalid parameter converter error message type name name name name name name value.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_default: Message when invoke with invalid parameter converter error message type name name name name name name default.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_name_name_required: Message when invoke with invalid parameter converter error message type name name name name name name name required.
    command_invoke_with_invalid_parameter_converter_error_message_type_name_name_name_name_name_name_name_
```

----------------------------------------

TITLE: Converter Metaclass Migration
DESCRIPTION: Shows the change in discord.py Converters, which are now generic runtime protocols. This example highlights the modification required for user-created classes inheriting from `Converter`.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
# before
class SomeConverterMeta(type):
    ...

class SomeConverter(commands.Converter, metaclass=SomeConverterMeta):
    ...

# after
class SomeConverterMeta(type(commands.Converter)):
    ...

class SomeConverter(commands.Converter, metaclass=SomeConverterMeta):
    ...
```

----------------------------------------

TITLE: Setting Cog Name Example
DESCRIPTION: Illustrates how to specify a custom name for a cog when defining the class, overriding the default behavior.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
class MyCog(commands.Cog, name='My Cog'):
    pass

```

----------------------------------------

TITLE: Setting Log Level and Logging to a File
DESCRIPTION: Shows how to set the logging level to `DEBUG` and direct logs to a file simultaneously. This is useful for capturing detailed information, especially during development.

SOURCE: https://discordpy.readthedocs.io/en/stable/logging

LANGUAGE: python
CODE:
```
import logging

handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')

# Assume client refers to a discord.Client subclass...
client.run(token, log_handler=handler, log_level=logging.DEBUG)
```

----------------------------------------

TITLE: Discord.py Emoji and Guild Get Methods
DESCRIPTION: Retrieves emoji objects from client and guild instances, and guild objects from the client.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Client.get_emoji(emoji_id)
commands.Bot.get_emoji(emoji_id)
discord.Guild.get_emoji(emoji_id)
  - Retrieves an emoji from the cache given its ID.
  - Parameters:
    - emoji_id: The ID of the emoji to retrieve.

discord.Client.get_guild(guild_id)
commands.Bot.get_guild(guild_id)
  - Retrieves a guild from the cache given its ID.
  - Parameters:
    - guild_id: The ID of the guild to retrieve.
```

----------------------------------------

TITLE: MinimalHelpCommand API Documentation
DESCRIPTION: Provides API details for the MinimalHelpCommand class in discord.py, including methods for formatting help messages, aliases, and commands, as well as determining the output destination. It highlights changes introduced in version 2.0.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
MinimalHelpCommand:
  add_aliases_formatting(aliases: Sequence[str], /)
    Adds the formatting information on a command’s aliases.
    The formatting should be added to the paginator.
    The default implementation is the aliases_heading bolded followed by a comma separated list of aliases.
    This is not called if there are no aliases to format.
    Changed in version 2.0: `aliases` parameter is now positional-only.
    Parameters:
      aliases (Sequence[str]): A list of aliases to format.

  add_command_formatting(command: Command, /)
    A utility function to format commands and groups.
    Changed in version 2.0: `command` parameter is now positional-only.
    Parameters:
      command (Command): The command to format.

  get_destination() -> abc.Messageable
    Returns the Messageable where the help command will be output.
    You can override this method to customise the behaviour.
    By default this returns the context’s channel.
    Returns:
      The destination where the help command will be output.
    Return type:
      abc.Messageable
```

----------------------------------------

TITLE: Fetch Stage Instance
DESCRIPTION: Fetches a stage instance associated with a stage channel. This is used to get information about an ongoing stage event.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.StageChannel.fetch_instance()
  Fetches the stage instance associated with this channel.
  Returns:
    A StageInstance object or None if no instance exists.
```

----------------------------------------

TITLE: Fetch Template by Code or URL
DESCRIPTION: Gets a Template object from a Discord invite code or a discord.new URL. This is an asynchronous operation and requires a valid template code or URL. It can raise NotFound or HTTPException.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Bot.fetch_template(code)
  - Gets a Template from a discord.new URL or code.
  - Parameters:
    - code (Union[Template, str]): The Discord Template Code or URL (must be a discord.new URL).
  - Returns:
    - Template: The template object.
  - Raises:
    - NotFound: If the template is invalid.
    - HTTPException: If getting the template fails.
```

----------------------------------------

TITLE: Fixes for discord.py v2.0.1
DESCRIPTION: Details bug fixes in discord.py v2.0.1, including issues with cchardet installation, UI View timeouts, error handling in CommandTree, use of importlib.metadata, library callbacks, and union types with commands.Greedy.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
Fix `cchardet` being installed on Python >=3.10 when using the `speed` extras.
Fix [`ui.View`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.View "discord.ui.View") timeout updating when the [`ui.View.interaction_check()`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.View.interaction_check "discord.ui.View.interaction_check") failed.
Fix [`app_commands.CommandTree.on_error()`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.app_commands.CommandTree.on_error "discord.app_commands.CommandTree.on_error") not triggering if [`interaction_check()`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.app_commands.CommandTree.interaction_check "discord.app_commands.CommandTree.interaction_check") raises.
Fix `__main__` script to use `importlib.metadata` instead of the deprecated `pkg_resources`.
Fix library callbacks triggering a type checking error if the parameter names were different.
Fix Python 3.10 union types not working with [`commands.Greedy`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Greedy "discord.ext.commands.Greedy").
```

----------------------------------------

TITLE: Getting Single Elements from AsyncIterator
DESCRIPTION: Demonstrates retrieving a single element from an AsyncIterator using .get() or .find(), similar to discord.utils.find() or discord.utils.get().

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
my_last_message = await channel.history().get(author=client.user)
```

----------------------------------------

TITLE: discord.ext.commands API Reference
DESCRIPTION: API documentation for discord.ext.commands decorators and exceptions.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.has_guild_permissions(perms, *, message=None, error=None)
  Checks if the invoking user has the specified guild permissions.
  Parameters:
    perms (dict[str, bool]): A dictionary of permissions to check.
    message (str, optional): A custom error message.
    error (Optional[Type[CheckFailure]], optional): A custom error to raise.

discord.ext.commands.bot_has_any_role(*roles, message=None, error=None)
  Checks if the bot has any of the specified roles.
  Parameters:
    *roles (Union[discord.Role, int, str]): The roles to check for.
    message (str, optional): A custom error message.
    error (Optional[Type[CheckFailure]], optional): A custom error to raise.
  Raises:
    BotMissingAnyRole: If the bot is missing all specified roles.
    NoPrivateMessage: If used in a private message.

discord.ext.commands.cooldown(rate, per, type=BucketType.default)
  A decorator that adds a cooldown to a Command.
  Parameters:
    rate (int): The number of times a command can be used before triggering a cooldown.
    per (float): The amount of seconds to wait for a cooldown when it’s been triggered.
    type (Union[BucketType, Callable[[Context], Any]]): The type of cooldown to have. If callable, should return a key for the mapping.
  Raises:
    CommandOnCooldown: If the cooldown is triggered.

discord.ext.commands.dynamic_cooldown(cooldown, type=BucketType.default)
  A decorator that adds a dynamic cooldown to a Command.
  Parameters:
    cooldown (Cooldown): The cooldown object to use.
    type (Union[BucketType, Callable[[Context], Any]]): The type of cooldown to have. If callable, should return a key for the mapping.

discord.ext.commands.BucketType
  An enum that represents the type of bucket for cooldowns.
  Members:
    default
    user
    guild
    channel
    member
    role
    category
    dm
    group
    thread

discord.ext.commands.BotMissingAnyRole
  Exception raised when the bot is missing any of the required roles.

discord.ext.commands.CommandOnCooldown
  Exception raised when a command is on cooldown.
  Attributes:
    retry_after (float): The number of seconds until the command can be used again.
    message (str): The error message.
    command (Command): The command that triggered the error.
    args (tuple): The arguments passed to the command.
    kwargs (dict): The keyword arguments passed to the command.
```

----------------------------------------

TITLE: discord.py Utility and Client Methods
DESCRIPTION: This section documents utility functions and client methods for interacting with the Discord API. It includes functions for getting channels, members, and managing application flags.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.utils.get(iterable, **attributes)
  - Finds the first item in an iterable that matches the given attributes.
  - Parameters:
    - iterable: The iterable to search within.
    - **attributes: Keyword arguments representing the attributes to match.
  - Returns: The found item or None if not found.

discord.Client.get_all_channels()
  - Returns an iterator of all channels the client can access.
  - Returns: An iterator of discord.abc.GuildChannel or discord.DMChannel objects.

discord.Client.get_all_members()
  - Returns an iterator of all members in guilds the client is in.
  - Returns: An iterator of discord.Member objects.

discord.Client.get_channel(channel_id)
  - Gets a channel from the client's cache.
  - Parameters:
    - channel_id: The ID of the channel to retrieve.
  - Returns: The found channel or None if not found.

discord.Guild.get_channel(channel_id)
  - Gets a channel from the guild's cache.
  - Parameters:
    - channel_id: The ID of the channel to retrieve.
  - Returns: The found channel or None if not found.

discord.Guild.get_channel_or_thread(channel_id)
  - Gets a channel or thread from the guild's cache.
  - Parameters:
    - channel_id: The ID of the channel or thread to retrieve.
  - Returns: The found channel/thread or None if not found.

discord.ApplicationFlags.gateway_guild_members
  - Flag to enable gateway presence intents.

discord.ApplicationFlags.gateway_guild_members_limited
  - Flag to enable limited gateway presence intents.

discord.ApplicationFlags.gateway_message_content
  - Flag to enable gateway message content intents.

discord.ApplicationFlags.gateway_message_content_limited
  - Flag to enable limited gateway message content intents.

discord.ApplicationFlags.gateway_presence
  - Flag to enable gateway presence intents.

discord.ApplicationFlags.gateway_presence_limited
  - Flag to enable limited gateway presence intents.

discord.GatewayNotFound
  - Exception raised when a gateway is not found.

discord.Permissions.general()
  - Returns a Permissions object with all general permissions enabled.

discord.Locale.german
  - Represents the German locale.

discord.Poll.get_answer(answer_id)
  - Retrieves a specific answer from a poll.
  - Parameters:
    - answer_id: The ID of the answer to retrieve.
  - Returns: The poll answer object.
```

----------------------------------------

TITLE: Define a Simple Command
DESCRIPTION: Demonstrates how to define a basic command using the @bot.command() decorator. The command takes a context object and an argument, and sends the argument back to the channel.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='$', intents=intents)

@bot.command()
async def foo(ctx, arg):
    await ctx.send(arg)
```

----------------------------------------

TITLE: discord.py Commands API - Help Commands
DESCRIPTION: Covers the HelpCommand framework, including DefaultHelpCommand, MinimalHelpCommand, and Paginator for customizing how command help is displayed to users. This allows for flexible and user-friendly help interfaces.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
HelpCommand:
  __init__(**options)
    **options: Options for customizing help command behavior.

DefaultHelpCommand:
  __init__(**options)
    **options: Options for customizing the default help command.

MinimalHelpCommand:
  __init__(**options)
    **options: Options for customizing the minimal help command.

Paginator:
  __init__(pages, **options)
    pages: A list of pages to paginate.
    **options: Options for customizing the paginator.
```

----------------------------------------

TITLE: Get Translated String
DESCRIPTION: Retrieves a translated string using an available translator. Returns None if no translator is set.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
from typing import Optional

# Assuming 'translator' is an object with a translate method
translated_string: Optional[str] = translator.translate("some_key")

# The return type is Optional[str]
```

----------------------------------------

TITLE: Discord.py AppCommandError Hierarchy
DESCRIPTION: Details the exception hierarchy for discord.py application commands, starting with the base AppCommandError and its subclasses like TranslationError and CheckFailure.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.AppCommandError
  - Base exception for application command related errors.

discord.app_commands.TranslationError(_* msg_, _string =None_, _locale =None_, _context_)
  - Raised when the library fails to translate a string.
  - Inherits from AppCommandError.
  - Original exception can be retrieved using `__cause__`.
  - Attributes:
    - string: The string that caused the error (Optional[Union[str, locale_str]]).
    - locale: The locale that caused the error (Optional[Locale]).
    - context: The context of the translation (TranslationContext).

discord.app_commands.CheckFailure
  - Raised when check predicates in a command have failed.
  - Inherits from AppCommandError.

discord.app_commands.NoPrivateMessage(_message =None_)
  - Raised when a command does not work in a direct message.
  - Inherits from CheckFailure.

discord.app_commands.MissingRole(_missing_role_)
  - Raised when the command invoker lacks a role to run a command.
  - Inherits from CheckFailure.
  - Attributes:
    - missing_role: The required role that is missing (Union[str, int]).

discord.app_commands.MissingAnyRole(_missing_roles_)
  - Raised when the command invoker lacks any of the specified roles.
  - Inherits from CheckFailure.
  - Attributes:
    - missing_roles: The list of missing roles.
```

----------------------------------------

TITLE: discord.py Interactions API Reference
DESCRIPTION: Documentation for decorators used in discord.py's interactions API, including `allowed_installs` and `default_permissions`.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
allowed_installs(_guilds: bool = None, _users: bool = None)
  - Decorator to indicate command installation contexts (guilds or users).
  - Verified server-side by Discord.
  - Does not work with subcommands.
  - New in version 2.4.

default_permissions(_perms_obj: Permissions = None, **perms: bool)
  - Decorator to set default permissions for command execution.
  - Acts as a hint; not strictly enforced by Discord.
  - Empty permissions disallow all but administrators in guilds.
  - Does not work with subcommands.
  - For strict enforcement, use `has_permissions()`.
  - Parameters:
    - _perms_obj: A discord.Permissions object.
    - **perms: Keyword arguments for specific permissions (e.g., manage_messages=True).
  - New in version 2.5.
```

----------------------------------------

TITLE: discord.Client API Documentation
DESCRIPTION: Provides documentation for key methods and events within the discord.Client class, focusing on event registration and handling.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_async

LANGUAGE: APIDOC
CODE:
```
discord.Client.event()
  - Decorator to register an event.
  - Requires the decorated function to be a coroutine.
  - Example:
    @client.event
    async def on_message(message):
        print('Message received!')
```

LANGUAGE: APIDOC
CODE:
```
discord.Client.async_event()
  - Utility decorator for easier event registration, especially for coroutines.
  - Simplifies the process of marking functions as events.
  - Example:
    @client.async_event
    async def on_ready():
        print('Client is ready!')
```

LANGUAGE: APIDOC
CODE:
```
discord.on_channel_update(before, after)
  - Called when a channel is updated.
  - Parameters:
    - before: The channel state before the update.
    - after: The channel state after the update.
```

LANGUAGE: APIDOC
CODE:
```
discord.on_member_update(before, after)
  - Called when a member is updated.
  - Parameters:
    - before: The member state before the update.
    - after: The member state after the update.
  - Replaces the functionality of the older `on_status` event.
```

LANGUAGE: APIDOC
CODE:
```
discord.on_server_role_update(before, after)
  - Called when a server role is updated.
  - Parameters:
    - before: The role state before the update.
    - after: The role state after the update.
```

LANGUAGE: APIDOC
CODE:
```
discord.on_voice_state_update(before, after)
  - Called when a member's voice state is updated.
  - Parameters:
    - before: The voice state before the update.
    - after: The voice state after the update.
```

LANGUAGE: APIDOC
CODE:
```
discord.on_socket_raw_send(payload)
  - Called when a raw payload is sent over the WebSocket.
  - Parameter:
    - payload: The data payload sent.
```

----------------------------------------

TITLE: HelpCommand Methods
DESCRIPTION: Provides documentation for key methods within the HelpCommand class, including getting the maximum command name length, determining the help message destination, and handling errors during help command execution.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_max_size(commands: Sequence[Command]) -> int
    Returns the largest name length of the specified command list.
    Changed in version 2.0: `commands` parameter is now positional-only.
    Parameters:
        commands (Sequence[Command]): A sequence of commands to check for the largest size.
    Returns:
        int: The maximum width of the commands.

get_destination() -> abc.Messageable
    Returns the Messageable where the help command will be output.
    You can override this method to customise the behaviour.
    By default this returns the context’s channel.
    Returns:
        abc.Messageable: The destination where the help command will be output.

_await _send_error_message(error: str)
    This function is a coroutine.
    Handles the implementation when an error happens in the help command. For example, the result of command_not_found() will be passed here.
    You can override this method to customise the behaviour.
    By default, this sends the error message to the destination specified by get_destination().
    Note: You can access the invocation context with HelpCommand.context.
    Changed in version 2.0: `error` parameter is now positional-only.
    Parameters:
        error (str): The error message to display to the user. Note that this has had mentions removed to prevent abuse.

_await _on_help_command_error(ctx: Context, error: Exception)
    This function is a coroutine.
    The help command’s error handler, as specified by Error Handling.
    Useful to override if you need some specific behaviour when the error handler is called.
    By default this method does nothing and just propagates to the default error handlers.
    Changed in version 2.0: `ctx` and `error` parameters are now positional-only.
    Parameters:
        ctx (Context): The invocation context.
        error (Exception): The error that occurred during help command execution.
```

----------------------------------------

TITLE: Register Coroutine for Loop
DESCRIPTION: Registers a coroutine to be executed before the event loop starts. Raises TypeError if the provided function is not a coroutine.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/tasks/index

LANGUAGE: python
CODE:
```
loop.coro(coroutine_function)
```

----------------------------------------

TITLE: discord.app_commands Module
DESCRIPTION: Introduction to the discord.app_commands package, which provides helpers for creating application commands in Discord bots.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
## Application Commands
The library has helpers to aid in creation of application commands. These are all in the `discord.app_commands` package.
```

----------------------------------------

TITLE: Discord API Attributes and Events
DESCRIPTION: This section lists various attributes and parameters within the discord.py library that relate to timestamps, start times, and update times. It includes attributes from Spotify, Member, VoiceState, Activity, Game, StreamIntegration, Embed, and Template, as well as parameters in on_typing and channel pins update events.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: APIDOC
CODE:
```
discord.Spotify.end
discord.Member.joined_at
discord.Member.premium_since
discord.VoiceState.requested_to_speak_at
discord.Activity.start
discord.Game.start
discord.Spotify.start
discord.StreamIntegration.synced_at
discord.Embed.timestamp
discord.Template.updated_at
discord.on_typing(timestamp)
discord.on_private_channel_pins_update(last_pin)
discord.on_guild_channel_pins_update(last_pin)
discord.utils.snowflake_time()
```

----------------------------------------

TITLE: discord.py Library Overview
DESCRIPTION: This section provides an overview of the discord.py library, a popular Python wrapper for the Discord API. It covers the main modules like discord and discord.ext, which includes commands and tasks.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands, tasks

# Example of using discord.py

# Intents are required for most events
intents = discord.Intents.default()
intents.message_content = True

# Create a bot instance
bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')

@bot.command()
async def hello(ctx):
    await ctx.send('Hello!')

# Example of a background task
@tasks.loop(seconds=60)
async def my_background_task():
    print("Running background task...")

# Start the task
my_background_task.start()

# Run the bot (replace 'YOUR_BOT_TOKEN' with your actual token)
# bot.run('YOUR_BOT_TOKEN')
```

----------------------------------------

TITLE: discord.ext.commands API Reference
DESCRIPTION: API reference for discord.ext.commands, covering Bots, Prefix Helpers, Event Reference, Commands, Cogs, Help Commands, Enums, Checks, Context, Converters, Defaults, and Exceptions.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/index

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands API Reference:

Bots:
  - Bot class for creating Discord bots.
  - Handles events, commands, and extensions.

Prefix Helpers:
  - Utilities for managing command prefixes.

Event Reference:
  - Documentation for various bot events.

Commands:
  - Decorators and classes for defining commands.
  - Includes support for aliases, cooldowns, and checks.

Cogs:
  - System for organizing commands into modular classes.
  - Supports loading, unloading, and reloading cogs.

Help Commands:
  - Customizable help command system.

Enums:
  - Enumerations for various command-related constants.

Checks:
  - Functions to validate command usage permissions.

Context:
  - Object representing the context of a command invocation.
  - Provides access to message, author, channel, guild, etc.

Converters:
  - Classes for converting arguments to specific types.
  - Supports custom type conversion.

Defaults:
  - Default values for command parameters.

Exceptions:
  - Custom exceptions for command-related errors.
```

----------------------------------------

TITLE: Get Cog by Name
DESCRIPTION: Retrieves an instance of a Cog by its name. Returns None if the specified Cog is not found. The `name` parameter is positional-only.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_cog(name: str) -> Optional[Cog]
  Gets the cog instance requested.
  Parameters:
    name (str): The name of the cog you are requesting. This is equivalent to the name passed via keyword argument in class creation or the class name if unspecified.
  Returns:
    Optional[Cog]: The cog that was requested. If not found, returns None.
```

----------------------------------------

TITLE: discord.py Command Help System
DESCRIPTION: Configuration and implementation details for the help command system within discord.py's command extension.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.Command.help
  - The help string for the command.

commands.Bot.help_command
  - The HelpCommand instance used by the bot.

commands.HelpCommand
  - Base class for custom help commands.
  - Methods:
    - send_bot_help(mapping, private):
      - Sends the bot's help message.
    - send_cog_help(cog):
      - Sends the help message for a specific cog.
    - send_group_help(group):
      - Sends the help message for a command group.
    - send_command_help(command):
      - Sends the help message for a specific command.
```

----------------------------------------

TITLE: MinimalHelpCommand Methods
DESCRIPTION: Details the methods of the MinimalHelpCommand class, used for formatting and sending help messages to users.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
MinimalHelpCommand Methods:
  add_aliases_formatting(aliases: list[str]) -> str - Formats a list of aliases for display.
  add_bot_commands_formatting(commands: list[discord.ext.commands.Command]) -> str - Formats a list of bot commands for display.
  add_command_formatting(command: discord.ext.commands.Command) -> str - Formats a single command for display.
  add_subcommand_formatting(command: discord.ext.commands.Command) -> str - Formats a subcommand for display.
  get_command_signature(command: discord.ext.commands.Command) -> str - Gets the signature of a command.
  get_destination() -> discord.abc.Messageable - Gets the destination where the help message should be sent.
  get_ending_note() -> str - Gets the ending note for the help message.
  get_opening_note() -> str - Gets the opening note for the help message.
  send_pages(pages: list[str]) -> discord.ext.commands.minimal_help.MinimalHelpPaginator - Sends the help message pages.
```

----------------------------------------

TITLE: discord.py Migration Guide
DESCRIPTION: This section details the changes and migration steps required when moving to newer versions of discord.py, such as v2.0. It covers significant updates like Python version changes, intent requirements, and modifications to various classes and functions.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
## Migrating to v2.0

### Python Version Change

### Removal of Support For User Accounts

### asyncio Event Loop Changes

### Intents Are Now Required

### Abstract Base Classes Changes

### `datetime` Objects Are Now UTC-Aware

### Major Webhook Changes

### Asset Redesign and Changes

### Thread Support

### Removing In-Place Edits

### Sticker Changes

### Integrations Changes

### Presence Updates Now Have A Separate Event

### Moving Away From Custom AsyncIterator

### Changing certain lists to be lazy sequences instead

### Embed Changes

### Removal of `InvalidArgument` Exception

### Logging Changes

### Text in Voice

### Removal of `StoreChannel`

### Change in `Guild.bans` endpoint

### Flag classes now have a custom `bool()` implementation

### Function Signature Changes

### Attribute Type Changes

### Removals

### Miscellaneous Changes

### `VoiceProtocol.connect()` signature changes.

## Command Extension Changes

### Extension and Cog Loading / Unloading is Now Asynchronous

### Converters Are Now Generic Runtime Protocols

### Function Signature Changes

### Removals

### Miscellaneous Changes

## Tasks Extension Changes

## Migrating to v1.0
```

----------------------------------------

TITLE: Relative paths for loading extensions
DESCRIPTION: Introduces the `package` keyword argument for loading extensions using relative paths in `discord.ext.commands`. This simplifies extension management in complex project structures.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
from discord.ext import commands
import os

# Assuming your extensions are in a subdirectory 'cogs'
# bot.load_extension('cogs.my_cog', package='.')

# Or if 'cogs' is a sibling directory to your main script:
# bot.load_extension('my_cog', package='cogs')

```

----------------------------------------

TITLE: Renamed Permissions Attributes
DESCRIPTION: Permissions-related attributes in discord.py have been renamed by removing the 'can_' prefix. For example, 'can_manage_messages' is now 'manage_messages'.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_async

LANGUAGE: python
CODE:
```
client.edit_channel_permissions()
# Previously: client.set_channel_permissions()
```

----------------------------------------

TITLE: discord.py HelpCommand API Reference
DESCRIPTION: Provides detailed documentation for the `HelpCommand` class in discord.py, including methods for handling command help messages, preparing the help command context, and accessing command-related attributes. It covers method signatures, parameter descriptions, return values, and notes on customization and version changes.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
HelpCommand:
  _send_command_help(command)
    Description: Handles the implementation of the single command page in the help command. This method does not return anything; message sending should be done within this method. Subclasses should use `get_destination()` for message routing.
    Parameters:
      command ([`Command`]): The command that was requested for help. This parameter is positional-only since version 2.0.
    Notes:
      - Can be overridden to customize behavior.
      - Invocation context is available via `HelpCommand.context`.
      - Related attributes for displaying help: `Command.help`, `Command.brief`, `Command.short_doc`, `Command.description`.
      - Use `get_command_signature()` to get the command signature.

  _prepare_help_command(ctx, command=None)
    Description: A low-level method to prepare the help command before execution. Useful for setting up subclass state. The default implementation does nothing.
    Parameters:
      ctx ([`Context`]): The invocation context. This parameter is positional-only since version 2.0.
      command ([`Command`], optional): The command for which help is being prepared. Defaults to None. This parameter is positional-only since version 2.0.
    Notes:
      - Called within the help command callback body.

  get_destination()
    Description: Returns the destination where the help message should be sent. This is a customization point for subclasses.

  context
    Description: Property to access the invocation context within the help command.

  filter_commands(commands, *, include_hidden=False)
    Description: Filters a list of commands, returning only those that should be displayed. This method is used internally to filter commands before displaying them.
    Parameters:
      commands (list of [`Command`]): The list of commands to filter.
      include_hidden (bool, optional): Whether to include hidden commands. Defaults to False.
    Returns: A filtered list of commands.

  get_command_signature(command)
    Description: Returns the signature of a given command, formatted for display.
    Parameters:
      command ([`Command`]): The command to get the signature for.
    Returns: A string representing the command's signature.
```

----------------------------------------

TITLE: Provide Choices for Application Command Parameters
DESCRIPTION: The `discord.app_commands.choices` decorator enables you to define a set of predefined options for a command parameter, which appear as a dropdown or selection list in the Discord UI. This improves user experience by guiding input. Choices can be provided directly, or by using `typing.Literal` or `enum.Enum` for more structured definitions.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
@discord.app_commands.choices(_** parameters_)

Instructs the given parameters by their name to use the given choices for their choices.

Parameters:
    **parameters: The choices of the parameters.

Raises:
    TypeError: The parameter name is not found or the parameter type was incorrect.
```

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands
from typing import Literal
import enum


class Fruits(enum.Enum):
    apple = 1
    banana = 2
    cherry = 3


class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @discord.app_commands.command()
    @discord.app_commands.describe(fruits='Fruits to choose from')
    @discord.app_commands.choices(fruits=[
        discord.app_commands.Choice(name='Apple', value='apple'),
        discord.app_commands.Choice(name='Banana', value='banana'),
        discord.app_commands.Choice(name='Cherry', value='cherry'),
    ])
    async def favorite_fruit(self, interaction: discord.Interaction, fruits: discord.app_commands.Choice[str]):
        await interaction.response.send_message(f'Your favorite fruit is {fruits.name}.')

    @discord.app_commands.command()
    @discord.app_commands.describe(color='Colors to choose from')
    async def favorite_color_literal(self, interaction: discord.Interaction, color: Literal['Red', 'Green', 'Blue']):
        await interaction.response.send_message(f'Your favorite color is {color}.')

    @discord.app_commands.command()
    @discord.app_commands.describe(fruit_enum='Fruits to choose from')
    async def favorite_fruit_enum(self, interaction: discord.Interaction, fruit_enum: Fruits):
        await interaction.response.send_message(f'Your favorite fruit is {fruit_enum.name}.')
```

----------------------------------------

TITLE: HelpCommand API Documentation
DESCRIPTION: Provides a comprehensive overview of the HelpCommand class, including its callback, related methods, and parameter details. It outlines how to customize the help command's behavior and response.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
HelpCommand:
  _command_callback(_ctx_ , _/_ , _*_ , _command =None_)
    Description: The actual implementation of the help command. It is not recommended to override this method and instead change the behaviour through the methods that actually get dispatched.
    Parameters:
      _ctx_: The context of the command invocation.
      _command (Optional[str]): The argument passed to the help command.
    Changed in version 2.0: ctx parameter is now positional-only.
    Related Methods:
      - send_bot_help()
      - send_cog_help()
      - send_group_help()
      - send_command_help()
      - get_destination()
      - command_not_found()
      - subcommand_not_found()
      - send_error_message()
      - on_help_command_error()
      - prepare_help_command()
```

----------------------------------------

TITLE: Get Cog Listeners
DESCRIPTION: Retrieves a list of listeners associated with a cog. Each listener is returned as a tuple containing its name and the function object.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/cogs

LANGUAGE: python
CODE:
```
>>> for name, func in cog.get_listeners():
...     print(name, '->', func)
```

----------------------------------------

TITLE: Get ID of Sent Message
DESCRIPTION: Retrieves the unique ID of a message after it has been sent. The `send()` method returns the sent `Message` object.

SOURCE: https://discordpy.readthedocs.io/en/stable/faq

LANGUAGE: python
CODE:
```
message = await channel.send('hmm…')
message_id = message.id
```

----------------------------------------

TITLE: Removing In-Place Edits in discord.py
DESCRIPTION: Explains the change from in-place model edits to returning new instances, addressing race conditions. Provides a before-and-after code example.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
# before
await member.edit(nick='new nick')
await member.send(f'Your new nick is {member.nick}')

# after (conceptual, actual implementation returns new instance)
# new_member = await member.edit(nick='new nick')
# await member.send(f'Your new nick is {new_member.nick}')
```

----------------------------------------

TITLE: Python datetime UTC-Aware Migration Example
DESCRIPTION: Demonstrates the migration from using naive datetime objects with `datetime.datetime.utcnow()` to using the UTC-aware `discord.utils.utcnow()` function for calculating time differences. This ensures consistency and avoids potential errors related to timezone handling.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
import datetime
import discord

# before
# week_ago = datetime.datetime.utcnow() - datetime.timedelta(days=7)
# if member.created_at > week_ago:
#     print(f'Member account {member} was created less than a week ago!')

# after
# The new helper function can be used here:
week_ago = discord.utils.utcnow() - datetime.timedelta(days=7)
# if member.created_at > week_ago:
#     print(f'Member account {member} was created less than a week ago!')
```

----------------------------------------

TITLE: Handling asyncio.TimeoutError with Client.wait_for
DESCRIPTION: Provides an example of using `Client.wait_for()` with a timeout and handling the `asyncio.TimeoutError` exception when the timeout is reached. It demonstrates the expected behavior for both successful completion and timeout scenarios.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
def pred(m):
    return m.author == message.author and m.channel == message.channel

try:
    msg = await client.wait_for('message', check=pred, timeout=60.0)
except asyncio.TimeoutError:
    await channel.send('You took too long...')
else:
    await channel.send('You said {0.content}, {0.author}.'.format(msg))
```

----------------------------------------

TITLE: Select Menu and Related Components
DESCRIPTION: Documentation for Discord's UI Select Menus, including their creation, options, default values, and component types. Also covers related button styles.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: python
CODE:
```
discord.AppInstallParams.scopes
discord.ButtonStyle.secondary
discord.ui.Select
discord.ComponentType.select
discord.ui.select()
discord.SelectDefaultValue
discord.SelectDefaultValueType
discord.SelectMenu
discord.SelectOption
```

----------------------------------------

TITLE: Discord.py Cog Special Methods and Listener Example
DESCRIPTION: Demonstrates the usage of various special methods within a discord.py Cog, including cog_unload, bot_check, bot_check_once, cog_check, cog_command_error, cog_before_invoke, cog_after_invoke, and the listener decorator for event handling.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
class MyCog(commands.Cog, name='Example Cog'):
    def cog_unload(self):
        print('cleanup goes here')

    def bot_check(self, ctx):
        print('bot check')
        return True

    def bot_check_once(self, ctx):
        print('bot check once')
        return True

    async def cog_check(self, ctx):
        print('cog local check')
        return await ctx.bot.is_owner(ctx.author)

    async def cog_command_error(self, ctx, error):
        print('Error in {0.command.qualified_name}: {1}'.format(ctx, error))

    async def cog_before_invoke(self, ctx):
        print('cog local before: {0.command.qualified_name}'.format(ctx))

    async def cog_after_invoke(self, ctx):
        print('cog local after: {0.command.qualified_name}'.format(ctx))

    @commands.Cog.listener()
    async def on_message(self, message):
        pass
```

----------------------------------------

TITLE: discord.ext.commands - Bot Commands Framework
DESCRIPTION: The discord.ext.commands extension provides a framework for creating command-based Discord bots. It simplifies command parsing, argument handling, and command grouping.

SOURCE: https://discordpy.readthedocs.io/en/stable/index

LANGUAGE: python
CODE:
```
from discord.ext import commands

# Example of basic bot setup with commands (not runnable without further context)
bot = commands.Bot(command_prefix='!')

@bot.command()
async def ping(ctx):
    await ctx.send('Pong!')

# bot.run('YOUR_TOKEN')
```

----------------------------------------

TITLE: Customizing Command Parameters with discord.py
DESCRIPTION: Demonstrates how to use `commands.parameter` to define custom default values, converters, and descriptions for command parameters in discord.py. The example shows a late-binding default value using a lambda function.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

# Assuming 'bot' is an instance of commands.Bot
# @bot.command()
# async def wave(ctx, to: discord.User = commands.parameter(default=lambda ctx: ctx.author)):
#     await ctx.send(f'Hello {to.mention} :wave:')

```

----------------------------------------

TITLE: discord.py Breaking Changes
DESCRIPTION: Examples of changes that are considered breaking in the discord.py library's public API. These changes require users to update their code.

SOURCE: https://discordpy.readthedocs.io/en/stable/version_guarantees

LANGUAGE: APIDOC
CODE:
```
discord.py Breaking Changes:
  - Changing the default parameter value to something else.
  - Renaming a function without an alias to an old function.
  - Adding or removing parameters to an event.
```

----------------------------------------

TITLE: Discord Select Menus Overview
DESCRIPTION: Provides an overview of the discord.py library's support for creating various types of select menus.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
Select Menus:
The discord.py library offers classes to facilitate the creation of different select menu types.
```

----------------------------------------

TITLE: Basic Check Example
DESCRIPTION: Illustrates a simple check function that verifies if the command invoker is a specific user. This check is then applied to a command using the @commands.check decorator.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
def check_if_it_is_me(ctx):
    return ctx.message.author.id == 85309593344815104

@bot.command()
@commands.check(check_if_it_is_me)
async def only_for_me(ctx):
    await ctx.send('I know you!')
```

----------------------------------------

TITLE: discord.py Help Command API
DESCRIPTION: Provides API documentation for the DefaultHelpCommand class in discord.py, covering methods for generating and formatting help messages for commands.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
DefaultHelpCommand.get_command_signature(_command_)
  Retrieves the signature portion of the help page.
  Calls get_command_signature() if show_parameter_descriptions is False else returns a modified signature where the command parameters are not shown.
  New in version 2.0.
  Parameters:
    command (Command): The command to get the signature of.
  Returns:
    str: The signature for the command.
```

LANGUAGE: APIDOC
CODE:
```
DefaultHelpCommand.add_indented_commands(_commands_, _heading_, _*, _max_size=None)
  Indents a list of commands after the specified heading.
  The formatting is added to the paginator.
  The default implementation is the command name indented by indent spaces, padded to max_size followed by the command’s short_doc and then shortened to fit into the width.
  Changed in version 2.0: commands parameter is now positional-only.
  Parameters:
    commands (Sequence[Command]): A list of commands to indent for output.
    heading (str): The heading to add to the output. This is only added if the list of commands is greater than 0.
    max_size (Optional[int]): The max size to use for the gap between indents. If unspecified, calls get_max_size() on the commands parameter.
```

LANGUAGE: APIDOC
CODE:
```
DefaultHelpCommand.add_command_arguments(_command_)
  Indents a list of command arguments after the arguments_heading.
```

----------------------------------------

TITLE: Initializing AutoShardedClient
DESCRIPTION: Demonstrates the basic initialization of `discord.AutoShardedClient` for bots that need to manage sharding within a single process. This replaces the standard `discord.Client` for sharded bots.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
client = discord.AutoShardedClient()
```

----------------------------------------

TITLE: Transformer Class Documentation
DESCRIPTION: Provides details on the base Transformer class, its attributes, methods, and how to use it for custom type transformations in Discord application commands. Includes an example of creating a custom transformer for a Point type.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
Transformer:
  Description: The base class that allows a type annotation in an application command parameter to map into an AppCommandOptionType and transform the raw value into one from this type.
  Customization: Can be customized by overriding methods and properties, or by using it as the second type parameter of the Transform class.
  New in version: 2.0

  Attributes:
    channel_types: A list of channel types allowed for the parameter. Only valid if type() returns 'channel'. Defaults to an empty list.
      Type: List[ChannelType]
    choices: (Not detailed in provided text)
    max_value: The maximum supported value for the parameter. Valid for 'number', 'integer', or 'string' types.
    min_value: The minimum supported value for the parameter. Valid for 'number', 'integer', or 'string' types.
    type: The option type associated with this transformer. Defaults to AppCommandOptionType.string.
      Type: AppCommandOptionType

  Methods:
    async autocomplete(self, interaction: discord.Interaction, current: str) -> List[app_commands.Choice]: (Not detailed in provided text)
    async transform(self, interaction: discord.Interaction, value: str) -> Any:
      Description: Transforms the raw input value into the desired type.
      Parameters:
        interaction: The interaction object.
        value: The raw input value as a string.
      Returns: The transformed value.

Example Usage:
```python
import typing
import discord
from discord import app_commands

class Point(typing.NamedTuple):
    x: int
    y: int

class PointTransformer(app_commands.Transformer):
    async def transform(self, interaction: discord.Interaction, value: str) -> Point:
        (x, _, y) = value.partition(',')
        return Point(x=int(x.strip()), y=int(y.strip()))

@app_commands.command()
async def graph(interaction: discord.Interaction, point: app_commands.Transform[Point, PointTransformer]):
    await interaction.response.send_message(str(point))
```
Note: If a class is passed instead of an instance to the second type parameter of Transform, it is constructed with no arguments passed to its __init__ method.
```

----------------------------------------

TITLE: HelpCommand Class Overview
DESCRIPTION: Provides the base implementation for help command formatting in discord.py. Instances are deep copied on each command invocation to prevent race conditions. It manages attributes related to the help command's context and visibility settings.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
class discord.ext.commands.HelpCommand:
    """The base implementation for help command formatting."""

    Attributes:
        cog: The cog associated with this help command.
        command_attrs: Dictionary of attributes to be used for the help command.
        context: The context that invoked this help formatter.
        invoked_with: The argument that was invoked with the help command.
        show_hidden: Specifies if hidden commands should be shown in the output. Defaults to False.
        verify_checks: Specifies if checks should be verified for commands.

    Methods:
        add_check(predicate)
        command_callback(*args, **kwargs)
        command_not_found(string)
        filter_commands(commands, *, parent=None, type=None)
        get_bot_mapping()
        get_command_signature(command)
        get_destination()
        get_max_size()
        on_help_command_error(error)
        prepare_help_command(ctx, *, command=None)
        remove_check(predicate)
        remove_mentions(text)
        send_bot_help(mapping, **kwargs)
        send_cog_help(cog)
        send_command_help(command)
        send_error_message(error)
        send_group_help(group)
        subcommand_not_found(subcommand_name, *, command=None)
```

----------------------------------------

TITLE: Get Cog Commands
DESCRIPTION: Retrieves a list of commands associated with a cog. This method is useful for iterating through all commands directly attached to a cog.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/cogs

LANGUAGE: python
CODE:
```
>>> cog = bot.get_cog('Greetings')
>>> commands = cog.get_commands()
>>> print([c.name for c in commands])
```

----------------------------------------

TITLE: FlagConverter with Tuple for Variadic Arguments
DESCRIPTION: Illustrates using `typing.Tuple` with `...` to achieve variadic-like behavior for flags, similar to the List example but with a tuple return type. This is useful for arguments that can be repeated.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
from discord.ext import commands
from typing import Tuple
import discord

class BanFlags(commands.FlagConverter):
    members: Tuple[discord.Member, ...] # Allows multiple members to be passed with the 'member' flag
    reason: str
    days: int = 1

```

----------------------------------------

TITLE: Discord.py Member Flags
DESCRIPTION: This documentation outlines member flags related to user onboarding and completed actions within Discord, as managed by discord.py.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.MemberFlags.completed_home_actions:
  Flag indicating if a member has completed home actions.

discord.MemberFlags.completed_onboarding:
  Flag indicating if a member has completed onboarding.
```

----------------------------------------

TITLE: discord.py Voice API Documentation
DESCRIPTION: API documentation for key voice-related classes and methods in discord.py, including `VoiceChannel.connect`, `VoiceClient.play`, `AudioSource`, and `FFmpegPCMAudio`.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: APIDOC
CODE:
```
VoiceChannel.connect()
  Connects to a voice channel.
  Returns: VoiceClient

VoiceClient.play(source: AudioSource, *, after: Optional[Callable[[Optional[Exception]], None]] = None)
  Plays an audio source.
  Parameters:
    source: The audio source to play.
    after: A callable that is called when the source has finished playing.

AudioSource
  Abstract base class for audio sources.

FFmpegPCMAudio(source: Union[str, bytes, BinaryIO], *, executable: str = 'ffmpeg', pipe: bool = False, stderr: Optional[int] = None)
  An audio source that uses FFmpeg to process audio.
  Parameters:
    source: The source of the audio (file path, URL, etc.).
    executable: The path to the FFmpeg executable.
    pipe: Whether to pipe the audio data.
    stderr: File descriptor for FFmpeg's stderr.

PCMVolumeTransformer(audio: AudioSource, *, volume: Union[float, int] = 1.0)
  A transformer that adjusts the volume of an audio source.
  Attributes:
    volume: The volume level (0.0 to 1.0+).
```

----------------------------------------

TITLE: Loading and Reloading Discord Bot Extensions
DESCRIPTION: These examples demonstrate how to load and reload extensions in a Discord bot using the Bot object. Loading an extension registers its commands or listeners, while reloading updates the bot with any changes made to the extension's code without restarting.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/extensions

LANGUAGE: python
CODE:
```
# To load an extension:
await bot.load_extension('hello')

# To reload an extension:
>>> await bot.reload_extension('hello')
```

----------------------------------------

TITLE: Discord.py Bot API Documentation
DESCRIPTION: Documentation for key bot methods and decorators in discord.py, including `before_invoke`, `after_invoke`, `check`, `check_once`, and `command`.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Bot.before_invoke(coro)
  Registers a coroutine to be called before any command is invoked.
  Parameters:
    coro (coroutine): The coroutine to register as the pre-invoke hook.
  Raises:
    TypeError: The coroutine passed is not a coroutine.

Bot.after_invoke(coro)
  Registers a coroutine to be called after any command is invoked.
  Parameters:
    coro (coroutine): The coroutine to register as the post-invoke hook.

Bot.check(func)
  Decorator that adds a global check to the bot. This check runs before any command checks and applies to all commands.
  Parameters:
    func (function or coroutine): The check function, taking a Context object.
  Note: Can raise exceptions inherited from CommandError.

Bot.check_once(func)
  Decorator that adds a 'call once' global check to the bot. This check is called only once per invoke() call.
  Parameters:
    func (function or coroutine): The check function, taking a Context object.
  Note: Can raise exceptions inherited from CommandError.

Bot.command(*args, **kwargs)
  Decorator to register a function as a command.
```

----------------------------------------

TITLE: discord.py Application Commands
DESCRIPTION: Documentation for application commands, including command trees and group management.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.CommandTree.get_command(name)
  - Gets an application command by its name.
  - Parameters:
    - name: The name of the command to retrieve.
  - Returns: The command object or None if not found.

discord.app_commands.Group.get_command(name)
  - Gets a subcommand by its name from an application command group.
  - Parameters:
    - name: The name of the subcommand to retrieve.
  - Returns: The command object or None if not found.
```

----------------------------------------

TITLE: Get Channel by ID
DESCRIPTION: Retrieves a specific channel or thread using its unique ID. Returns None if the channel is not found. The `id` parameter is positional-only.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_channel(id: int) -> Optional[Union[abc.GuildChannel, Thread, abc.PrivateChannel]]
  Returns a channel or thread with the given ID.
  Parameters:
    id (int): The ID to search for.
  Returns:
    Optional[Union[abc.GuildChannel, Thread, abc.PrivateChannel]]: The returned channel or None if not found.
```

----------------------------------------

TITLE: discord.ext.commands.DefaultHelpCommand Formatting
DESCRIPTION: This section covers methods from DefaultHelpCommand used for formatting help messages. It includes utilities for shortening text and adding command-specific formatting to make help output more readable and organized.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.DefaultHelpCommand.shorten_text(text)
  - Shortens the given text to fit within a certain limit.
  - Parameters:
    - text: The text to shorten.

discord.ext.commands.DefaultHelpCommand.add_command_formatting(command)
  - Adds formatting to a command's help string.
  - Parameters:
    - command: The command to format.
```

----------------------------------------

TITLE: Custom Command Check Example
DESCRIPTION: Demonstrates how to create a custom command check in discord.py to verify if the command invoker is the server owner. This check can be combined with other checks using `commands.check_any`.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
def is_guild_owner():
    def predicate(ctx):
        return ctx.guild is not None and ctx.guild.owner_id == ctx.author.id
    return commands.check(predicate)

@bot.command()
@commands.check_any(commands.is_owner(), is_guild_owner())
async def only_for_owners(ctx):
    await ctx.send('Hello mister owner!')
```

----------------------------------------

TITLE: Synchronous Webhook Changes
DESCRIPTION: This section indicates changes in synchronous webhook handling, implying a similar shift in initialization as seen with asynchronous webhooks, though a specific code example for synchronous is not provided in the source text.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
# Synchronous webhook usage has also been updated, with functionality split to separate classes.
```

----------------------------------------

TITLE: Custom Help Command Implementation in Cog
DESCRIPTION: Demonstrates how to create a custom help command using MinimalHelpCommand and associate it with a cog. This allows for dynamic changes to the help command's behavior and ensures it functions correctly when the cog is loaded or unloaded.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
class MyHelpCommand(commands.MinimalHelpCommand):
    def get_command_signature(self, command):
        return '{0.clean_prefix}{1.qualified_name}{1.signature}'.format(self, command)

class MyCog(commands.Cog):
    def __init__(self, bot):
        self._original_help_command = bot.help_command
        bot.help_command = MyHelpCommand()
        bot.help_command.cog = self

    def cog_unload(self):
        self.bot.help_command = self._original_help_command
```

----------------------------------------

TITLE: Get Messages with Filters
DESCRIPTION: Retrieves messages from a channel with optional filtering by limit, before, after, or around a specific date or message. Handles potential permission and HTTP errors.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_messages(limit: Optional[int] = None, before: Optional[Union[Snowflake, datetime]] = None, after: Optional[Union[Snowflake, datetime]] = None, around: Optional[Union[Snowflake, datetime]] = None, oldest_first: Optional[bool] = None)
  Retrieves messages from a channel.
  Parameters:
    limit (Optional[int]): The number of messages to retrieve. If None, retrieves every message.
    before (Optional[Union[Snowflake, datetime]]): Retrieve messages before this date or message.
    after (Optional[Union[Snowflake, datetime]]): Retrieve messages after this date or message.
    around (Optional[Union[Snowflake, datetime]]): Retrieve messages around this date or message. Max limit is 101.
    oldest_first (Optional[bool]): If True, return messages in oldest->newest order.
  Raises:
    Forbidden: You do not have permissions to get channel message history.
    HTTPException: The request to get message history failed.
  Yields:
    Message: The message with the message data parsed.
```

----------------------------------------

TITLE: discord.app_commands and discord.ext.commands Parameters
DESCRIPTION: Documentation for Parameter classes and related attributes in discord.py's application commands and extensions.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.Parameter
  Represents a parameter in an application command.

commands.Parameter
  Represents a parameter in a traditional command.

discord.app_commands.TranslationContextLocation.parameter_description
  Represents the context location for parameter descriptions in translations.

discord.app_commands.TranslationContextLocation.parameter_name
  Represents the context location for parameter names in translations.

discord.app_commands.Command.parameters
  A list of Parameter objects for the application command.
```

----------------------------------------

TITLE: Get Command by Name
DESCRIPTION: Retrieves a Command object from the bot's internal list of commands using its name. This can also be used to access command aliases.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_command(name: str) -> Optional[Command]
  Get a Command from the internal list of commands.
  This could also be used as a way to get aliases.
```

----------------------------------------

TITLE: discord.py DefaultHelpCommand API Reference
DESCRIPTION: Provides detailed information on the methods available within the DefaultHelpCommand class for managing and displaying help messages in a Discord bot. This includes formatting commands, sending paginated output, and specifying the message destination.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
DefaultHelpCommand:
  __init__(...
    # Initializes the help command formatter.

  send_pages()
    # Coroutine to send paginated help messages.
    # Helper utility to send the page output from paginator to the destination.
    # Dependencies: paginator
    # Returns: None

  add_command_formatting(_command_ , _/_)
    # Utility function to format the non-indented block of commands and groups.
    # Changed in version 2.0: `command` parameter is now positional-only.
    # Changed in version 2.0: add_command_arguments() is now called if show_parameter_descriptions is True.
    # Parameters:
    #   command (Command): The command to format.
    # Returns: Formatted command string.

  get_destination()
    # Returns the Messageable where the help command will be output.
    # You can override this method to customise the behaviour.
    # By default this returns the context’s channel.
    # Returns:
    #   The destination where the help command will be output.
    # Return type:
    #   abc.Messageable
```

----------------------------------------

TITLE: Get Cooldown Retry After in Commands
DESCRIPTION: Adds the ability to retrieve the `retry_after` value from a command's cooldown. This is useful for providing feedback to users about when a command will be available again.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
from discord.ext import commands

# Assuming 'command' is an instance of discord.ext.commands.Command
retry_after = command.get_cooldown_retry_after()
```

----------------------------------------

TITLE: Discord Autocomplete Command Setup
DESCRIPTION: Associates parameters with an autocomplete callback function for slash commands. Autocomplete is supported for string, integer, and float types. Checks can be attached to the callback but not the command itself. The choices returned are suggestions and can be ignored by the user.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
async def fruit_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    fruits = ['Banana', 'Pineapple', 'Apple', 'Watermelon', 'Melon', 'Cherry']
    return [
        app_commands.Choice(name=fruit, value=fruit)
        for fruit in fruits if current.lower() in fruit.lower()
    ]

@app_commands.command()
@app_commands.autocomplete(fruit=fruit_autocomplete)
async def fruits(interaction: discord.Interaction, fruit: str):
    await interaction.response.send_message(f'Your favourite fruit seems to be {fruit}')
```

----------------------------------------

TITLE: Discord Command and Argument Configurations
DESCRIPTION: API references for configuring command behavior, argument limits, and pagination.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.Flag.max_args
  - The maximum number of arguments a flag can accept.

commands.max_concurrency()
  - A decorator to limit the number of concurrent calls to a command.
  - Parameters:
    - concurrency: The maximum number of concurrent calls.
    - key: An optional callable to determine the key for concurrency limiting.

discord.app_commands.Argument.max_length
  - The maximum length for an argument's input.

discord.TextInput.max_length
  - The maximum length for the text input field.

discord.ui.TextInput.max_length
  - The maximum length for the text input field in UI components.

discord.Guild.max_members
  - The maximum number of members a guild can have.

discord.Guild.max_presences
  - The maximum number of presences a guild can have.

commands.Paginator.max_size
  - The maximum size of a paginator page.

discord.Guild.max_stage_video_users
  - The maximum number of users that can stream video in a stage channel.

discord.app_commands.Argument.max_value
  - The maximum allowed value for an argument.

discord.app_commands.Parameter.max_value
  - The maximum allowed value for a parameter in slash commands.

discord.app_commands.Transformer.max_value
  - The maximum allowed value for a transformer's input.

discord.SelectMenu.max_values
  - The maximum number of options a select menu can have selected.

discord.ui.ChannelSelect.max_values
  - The maximum number of channels that can be selected in a channel select menu.

discord.ui.MentionableSelect.max_values
  - The maximum number of mentionable entities that can be selected.

discord.ui.RoleSelect.max_values
  - The maximum number of roles that can be selected in a role select menu.
```

----------------------------------------

TITLE: discord.ext.tasks.Loop Class Methods
DESCRIPTION: Provides an overview of the methods available for the discord.ext.tasks.Loop class, used for managing background tasks in discord.py. This includes starting, stopping, restarting, and cancelling tasks, as well as changing their intervals and handling exceptions.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/tasks/index

LANGUAGE: APIDOC
CODE:
```
class discord.ext.tasks.Loop:
    Attributes:
        current_loop: The current iteration count of the loop.
        hours: The number of hours in the current interval.
        minutes: The number of minutes in the current interval.
        next_iteration: The datetime of the next scheduled iteration.
        seconds: The number of seconds in the current interval.
        time: The time of day the loop should run.

    Methods:
        __call__():
            Allows the Loop instance to be awaited.

        add_exception_type(exception_type: Type[Exception]):
            Adds an exception type to be caught by the loop.

        after_loop():
            A decorator that registers a coroutine to be called after the loop finishes running. The coroutine must take no arguments. Called even during cancellation.

        before_loop():
            A decorator that registers a coroutine to be called before the loop starts running. Useful for waiting for bot readiness. The coroutine must take no arguments.

        cancel():
            Cancels the loop.

        change_interval(after: float = None, days: int = 0, hours: int = 0, minutes: int = 0, seconds: float = 0, weeks: int = 0):
            Changes the interval of the loop.

        clear_exception_types():
            Clears all registered exception types.

        error(exception: Exception): 
            A decorator that registers a coroutine to be called when an exception occurs within the loop.

        failed():
            Returns True if the loop has failed, False otherwise.

        get_task():
            Returns the asyncio.Task associated with the loop.

        is_being_cancelled():
            Returns True if the loop is being cancelled, False otherwise.

        is_running():
            Returns True if the loop is currently running, False otherwise.

        remove_exception_type(exception_type: Type[Exception]):
            Removes an exception type from being caught by the loop.

        restart(coro=None, *, seconds=None, count=None, limit=None, time=None, after=None, loop=None, name=None, pass_context=None, cog=None, wait_until_ready=False, exception_types=None, **kwargs):
            Restarts the loop.

        start(coro=None, *, seconds=None, count=None, limit=None, time=None, after=None, loop=None, name=None, pass_context=None, cog=None, wait_until_ready=False, exception_types=None, **kwargs):
            Starts the loop.

        stop():
            Stops the loop.

Parameters:
    coro (coroutine): The coroutine to run.

Raises:
    TypeError: The function was not a coroutine.

Notes:
    The `before_loop` coroutine can stop the loop before the initial iteration by calling `stop()`.
```

----------------------------------------

TITLE: Bot Error Handling and Event Management
DESCRIPTION: Details the default error handlers for commands and general events within the discord.ext.commands.Bot class. It explains how these handlers log errors and can be overridden for custom behavior. The documentation also covers the `setup_hook` which is called after login.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Bot.login(_token_)
  Logs in the client with the specified credentials and calls the setup_hook().
  Parameters:
    token (str): The authentication token.
  Raises:
    LoginFailure: The wrong credentials are passed.
    HTTPException: An unknown HTTP related error occurred.

Bot.on_command_error(_context_, _exception_)
  The default command error handler provided by the bot. Logs to the library logger, can be overridden.
  Parameters:
    context: The command context.
    exception: The exception that occurred.
  Changed in version 2.0: Parameters are now positional-only.

Bot.on_error(_event_method_, *args, **kwargs)
  The default error handler provided by the client. Logs to the library logger, can be overridden.
  Parameters:
    event_method: The method where the error occurred.
    args: Positional arguments passed to the event method.
    kwargs: Keyword arguments passed to the event method.
  Changed in version 2.0: event_method is now positional-only.
```

----------------------------------------

TITLE: CogMeta Attributes and Usage
DESCRIPTION: Details the attributes of the CogMeta metaclass used for defining cogs in discord.py. Includes examples of how to set attributes like name and command_attrs during class creation and how to integrate with abstract base classes.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
CogMeta:
  A metaclass for defining a cog.

  Attributes:
    name (str): The cog name. Defaults to the class name.
    description (str): The cog description. Defaults to the cleaned docstring.
    command_attrs (dict): Attributes to apply to all commands within the cog.
    group_name (Union[str, locale_str]): The group name for GroupCog instances.
    group_description (Union[str, locale_str]): The group description for GroupCog instances.
    group_auto_locale_strings (bool): Whether to auto-generate locale strings for group commands.
    group_extras (dict): Extra data to associate with the group.
    group_nsfw (bool): Whether the group is NSFW.

  Usage Examples:
    # Setting cog name:
    classMyCog(commands.Cog, name='My Cog'):
        pass

    # Applying command attributes:
    classMyCogWithAttrs(commands.Cog, command_attrs=dict(hidden=True)):
        @commands.command()
        async deffoo(self, ctx):
            pass # hidden -> True

        @commands.command(hidden=False)
        async defbar(self, ctx):
            pass # hidden -> False

    # Integrating with ABCs:
    importabc

    classCogABCMeta(commands.CogMeta, abc.ABCMeta):
        pass

    classSomeMixin(metaclass=abc.ABCMeta):
        pass

    classSomeCogMixin(SomeMixin, commands.Cog, metaclass=CogABCMeta):
        pass

```

----------------------------------------

TITLE: Discord.py Command Retrieval and Properties
DESCRIPTION: Documentation for methods related to retrieving commands and their properties within discord.py. This includes getting a command by its name, accessing its qualified name, and retrieving its parent groups.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_command(name: str)
  Retrieves a subcommand by its name. The name can be fully qualified (e.g. 'foo bar') to get a subcommand of a group command. Returns None if the subcommand is not found.
  Changed in version 2.0: `name` parameter is now positional-only.
  Parameters:
    name (str): The name of the command to get.
  Returns:
    Optional[Command]: The requested command, or None if not found.

parents (property)
  Retrieves the parents of this command as a list of Group objects. Returns an empty list if the command has no parents.
  New in version 1.1.
  Type: List[Group]

qualified_name (property)
  Retrieves the fully qualified command name, including parent names. For example, in '?one two three', the qualified name is 'one two three'.
  Type: str

root_parent (property)
  Retrieves the root parent of this command. Returns None if the command has no parents. For example, in '?a b c test', the root parent is 'a'.
  Type: Optional[Group]
```

----------------------------------------

TITLE: discord.ui.View Class Overview
DESCRIPTION: Provides an overview of the discord.ui.View class, including its purpose, inheritance, and new features. It details the available attributes and methods for managing UI components.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
discord.ui.View(_*_ , _timeout =180.0_)
  Represents a UI view. This object must be inherited to create a UI within Discord.
  New in version 2.0.

  Attributes:
    children: The list of children attached to this view.
    timeout: The timeout in seconds from last interaction with the UI before no longer accepting input. If None then there is no timeout.

  Parameters:
    timeout (Optional[float]): Timeout in seconds from last interaction with the UI before no longer accepting input. If None then there is no timeout.
```

----------------------------------------

TITLE: discord.py Non-Breaking Changes
DESCRIPTION: Examples of changes that are not considered breaking in the discord.py library's public API. These changes typically do not require code modifications from users.

SOURCE: https://discordpy.readthedocs.io/en/stable/version_guarantees

LANGUAGE: APIDOC
CODE:
```
discord.py Non-Breaking Changes:
  - Adding or removing private underscored attributes.
  - Adding an element into the `__slots__` of a data class.
  - Changing the behaviour of a function to fix a bug.
  - Changes in the typing behaviour of the library.
  - Changes in the calling convention of functions that are primarily meant as callbacks.
  - Changes in the documentation.
  - Modifying the internal HTTP handling.
  - Upgrading the dependencies to a new version, major or otherwise.
```

----------------------------------------

TITLE: discord.ext.commands.Bot API Reference
DESCRIPTION: Provides a comprehensive overview of the discord.ext.commands.Bot class, detailing its constructor, attributes, and methods for bot development.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Bot:
  __init__(_command_prefix_, *_ , _help_command= <default-help-command>_, _tree_cls= <class 'discord.app_commands.tree.CommandTree'>_, _description=None_, _allowed_contexts=..., _allowed_installs=..., _intents_, _**options_)
    Initializes the Bot instance.
    Parameters:
      _command_prefix_: The prefix for commands.
      _help_command_: The help command to use.
      _tree_cls_: The command tree class to use.
      _description_: A description for the bot.
      _allowed_contexts_: Allowed interaction contexts.
      _allowed_installs_: Allowed installation contexts.
      _intents_: The intents to enable for the bot.
      _**options_: Additional options for the bot.

  Attributes:
    activity: The current activity of the bot.
    allowed_contexts: The contexts in which the bot's commands are allowed.
    allowed_installs: The installation contexts where the bot is allowed.
    allowed_mentions: Controls mentions for the bot.
    application: The bot's application object.
    application_flags: Flags associated with the bot's application.
    application_id: The unique ID of the bot's application.
    cached_messages: A cache of recent messages.
    case_insensitive: Whether command matching is case-insensitive.
    cogs: A dictionary of loaded cogs.
    command_prefix: The prefix used to invoke commands.
    commands: A list of all registered commands.
    description: A description of the bot.
    emojis: A list of emojis available to the bot.
    extensions: A dictionary of loaded extensions.
    guilds: A list of guilds the bot is in.
    help_command: The help command instance.
    intents: The intents enabled for the bot.
    latency: The bot's current latency to Discord.
    owner_id: The ID of the bot's owner.
    owner_ids: A list of IDs of the bot's owners.
    persistent_views: A collection of persistent views.
    private_channels: A list of private channels the bot is in.
    soundboard_sounds: A collection of soundboard sounds.
    status: The current status of the bot.
    stickers: A list of stickers available to the bot.
    strip_after_prefix: Whether to strip content after the command prefix.
    tree: The command tree instance for application commands.
    tree_cls: The class used for the command tree.
    user: The bot's user object.
    users: A list of users the bot can see.
    voice_clients: A list of active voice clients.

  Methods:
    add_check(predicate: Callable[..., bool]) -> None
      Adds a global check to the bot.
    add_cog(cog: Cog, *, override: bool = False) -> None
      Adds a cog to the bot.
    add_command(command: Command) -> None
      Adds a command to the bot.
    add_dynamic_items(items: Iterable[app_commands.AppCommand]) -> None
      Adds dynamic application command items to the bot.
    add_listener(listener: Callable[..., Coroutine[Any, Any, None]], name: Optional[str] = None) -> None
      Adds a listener to the bot.
```

----------------------------------------

TITLE: Discord Sticker Format Methods
DESCRIPTION: Details the `format` attribute or method for various Discord Sticker types, used to get the URL for the sticker's image. This is useful for displaying stickers in embeds or messages.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.GuildSticker.format:
  Returns the URL of the guild sticker.

discord.StandardSticker.format:
  Returns the URL of the standard sticker.

discord.Sticker.format:
  Returns the URL of the sticker.

discord.StickerItem.format:
  Returns the URL of the sticker item.
```

----------------------------------------

TITLE: Discord Commands Extension: Basic Usage
DESCRIPTION: This snippet covers fundamental aspects of the discord.ext.commands extension, including why `on_message` might interfere with commands and how to get the original message object within a command.

SOURCE: https://discordpy.readthedocs.io/en/stable/faq

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

# It's generally recommended NOT to use on_message if you are using commands.
# If you need to process all messages, you should check if the message
# was processed by the commands extension first.

# Example of a command that accesses the original message

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')

@bot.command()
async def ping(ctx):
    # ctx.message is the original discord.Message object that invoked this command
    await ctx.send(f'Pong! Latency: {round(bot.latency * 1000)}ms. Message ID: {ctx.message.id}')

# If you need to implement on_message alongside commands:
# @bot.event
# async def on_message(message):
#     if message.author == bot.user:
#         return
#     # Process your custom message logic here
#     # ...
#     # Then, allow the commands extension to process the message as well
#     await bot.process_commands(message)

# Replace 'YOUR_BOT_TOKEN' with your actual bot token
# bot.run('YOUR_BOT_TOKEN')

```

----------------------------------------

TITLE: Discord.py Command Exceptions
DESCRIPTION: Details exceptions related to command handling in discord.py, including extension loading and command registration.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.ExtensionNotFound(_name_)
  An exception raised when an extension is not found.
  Inherits from: discord.ext.commands.ExtensionError
  Changed in version 1.3: Made the `original` attribute always None.

  Attributes:
    name (str): The extension that had the error.

discord.ext.commands.CommandRegistrationError(_name_, *_ , alias_conflict=False)
  An exception raised when the command can’t be added because the name is already taken by a different command.
  Inherits from: discord.ClientException
  New in version 1.4.

  Attributes:
    name (str): The command name that had the error.
    alias_conflict (bool): Whether the name that conflicts is an alias of the command we try to add.

discord.ext.commands.HybridCommandError(_original_)
  An exception raised when a HybridCommand raises an AppCommandError derived exception that could not be sufficiently converted to an equivalent CommandError exception.
  New in version 2.0.

  Attributes:
    original (AppCommandError): The original exception that was raised. You can also get this via the `__cause__` attribute.
```

----------------------------------------

TITLE: Loop Control Methods
DESCRIPTION: Provides methods to control the execution of the loop. The `__call__` method executes the internal callback, `start` begins the task in the event loop (raising RuntimeError if already running), and `stop` gracefully halts the task.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/tasks/index

LANGUAGE: APIDOC
CODE:
```
__call__(*args, **kwargs)
    Calls the internal callback that the task holds.

start(*args, **kwargs)
    Starts the internal task in the event loop.
    Raises: RuntimeError: A task has already been launched and is running.
    Returns: The task that has been created.

stop()
    Gracefully stops the task from running.
```

----------------------------------------

TITLE: Discord.py Context API Documentation
DESCRIPTION: Comprehensive documentation for the discord.py Context object, detailing its properties, methods, and how it aligns with the abc.Messageable interface. This section covers new shortcuts and functionalities introduced for enhanced command management.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.Context:
  Inherits from discord.abc.Messageable, providing methods like send().

  Properties (Shortcuts):
    ctx.author: Shortcut for ctx.message.author.
    ctx.guild: Shortcut for ctx.message.guild.
    ctx.channel: Shortcut for ctx.message.channel.
    ctx.me: Shortcut for ctx.message.guild.me or ctx.bot.user.
    ctx.voice_client: Shortcut for ctx.message.guild.voice_client.

  Methods:
    ctx.reinvoke(): Invokes a command again, useful for bypassing cooldowns.
      - Parameters: None
      - Returns: None
      - Example:
        await ctx.reinvoke()

    ctx.valid(): Checks if a context can be invoked with Bot.invoke().
      - Parameters: None
      - Returns: bool
      - Example:
        if ctx.valid():
            await ctx.invoke(ctx.command)

    ctx.send_help(command: Optional[str] = None):
      Shows the help command for an entity using the HelpCommand system.
      - Parameters:
        - command (Optional[str]): The name of the command to show help for. Defaults to None (shows general help).
      - Returns: None
      - Example:
        await ctx.send_help('my_command')

Related Concepts:
  - discord.abc.Messageable: The interface Context now implements, providing message sending capabilities.
  - discord.TextChannel, discord.DMChannel: Channels that Context behaves similarly to.
  - discord.ext.commands.HelpCommand: The system used by send_help().
  - discord.ext.commands.Bot.invoke: The method used to invoke commands programmatically.
```

----------------------------------------

TITLE: discord.ext.commands API Reference
DESCRIPTION: This reference details the discord.ext.commands API, including the Bot class, command decorators, argument converters, and error handling mechanisms for building command-based bots.

SOURCE: https://discordpy.readthedocs.io/en/stable/index

LANGUAGE: APIDOC
CODE:
```
commands.Bot:
  __init__(command_prefix, *args, **kwargs)
    Initializes the Bot with a command prefix.

  command(name=None, cls=Command, **attrs):
    Decorator to register a function as a command.
    Example:
      @bot.command()
      async def hello(ctx):
          await ctx.send('Hello!')

  event(coro):
    Decorator to register an event listener (same as discord.Client.event).

commands.Context:
  message: Message
    The message that triggered the command.
  bot: Bot
    The bot instance.
  author: User
    The author of the message.
  channel: TextChannel
    The channel the command was invoked in.
  guild: Guild | None
    The guild the command was invoked in.
  send(content=None, *, tts=False, embed=None, file=None, files=None, delete_after=None, nonce=None,૮:
    Sends a message to the channel the command was invoked in.

commands.Command:
  name: str
    The name of the command.
  help: str | None
    The help text for the command.
  aliases: list[str]
    A list of aliases for the command.
```

----------------------------------------

TITLE: Accessing Custom Context in Commands
DESCRIPTION: An example of a command that utilizes the custom attribute (`secret`) added to the subclassed context (`MyContext`). This illustrates how custom context properties are accessible within command functions.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: python
CODE:
```
@bot.command()
async def secret(ctx):
    await ctx.send(ctx.secret)
```

----------------------------------------

TITLE: Discord Help Command Indentation and Locale
DESCRIPTION: Configuration for the default help command in discord.py, specifically indentation, and locale settings for Indonesian.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: python
CODE:
```
commands.DefaultHelpCommand.indent
discord.Locale.indonesian
```

----------------------------------------

TITLE: Before Invoke Hook Decorator
DESCRIPTION: Registers a coroutine to be executed before a command is invoked. This is useful for logging, permission checks, or any setup required before the main command logic runs. It can be applied to multiple commands across different cogs.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
@commands.before_invoke(record_usage)
async def who(ctx):
    # Output: <User> used who at <Time>
    await ctx.send('i am a bot')
```

LANGUAGE: python
CODE:
```
class What(commands.Cog):

    @commands.before_invoke(record_usage)
    @commands.command()
    async def when(self, ctx):
        # Output: <User> used when at <Time>
        await ctx.send(f'and i have existed since {ctx.bot.user.created_at}')
```

----------------------------------------

TITLE: discord.app_commands.Command API Documentation
DESCRIPTION: Provides detailed information about the Command class, its constructor, attributes, and methods for creating and managing Discord application commands.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
class discord.app_commands.Command(
    *, 
    name: Union[str, locale_str],
    description: Union[str, locale_str],
    callback: coroutine,
    nsfw: bool = False,
    parent: Optional[Union[Group, CommandTree]] = None,
    guild_ids: Optional[List[int]] = None,
    allowed_contexts: Optional[List[AppCommandContext]] = None,
    allowed_installs: Optional[List[AppCommandInstall]] = None,
    auto_locale_strings: bool = True,
    extras: Optional[Dict[str, Any]] = None
)

Represents an application command. These are usually not created manually, instead they are created using one of the following decorators: command(), Group.command, CommandTree.command.

Attributes:
  allowed_contexts: The contexts in which the command can be used.
  allowed_installs: The installs in which the command can be used.
  callback: The coroutine that is executed when the command is called.
  checks: A list of checks that must pass for the command to be executed.
  default_permissions: The default permissions for the command.
  description: The description of the application command. This shows up in the UI to describe the application command.
  extras: A dictionary of extra information about the command.
  guild_only: Whether the command is guild-only.
  name: The name of the application command.
  nsfw: Whether the command is NSFW.
  parameters: A list of parameters for the command.
  parent: The parent of the command, if any.
  qualified_name: The qualified name of the command.
  root_parent: The root parent of the command, if any.

Methods:
  add_check(check: Callable[..., bool]) -> None: Adds a check to the command.
  autocomplete(parameter: str) -> Callable[..., coroutine]: Decorator to register an autocomplete callback for a parameter.
  error(handler: Callable[..., coroutine]) -> Callable[..., coroutine]: Decorator to register an error handler for the command.
  get_parameter(name: str) -> Parameter: Gets a parameter by its name.
  remove_check(check: Callable[..., bool]) -> None: Removes a check from the command.

Parameters:
  name (Union[str, locale_str]): The name of the application command.
  description (Union[str, locale_str]): The description of the application command. This shows up in the UI to describe the application command.
  callback (coroutine): The coroutine that is executed when the command is called.
  auto_locale_strings (bool): If this is set to True, then all translatable strings will implicitly be wrapped into locale_str rather than str. This could avoid some repetition and be more ergonomic for certain defaults such as default command names, command descriptions, and parameter names. Defaults to True.
```

----------------------------------------

TITLE: Local Command Error Handling Example
DESCRIPTION: Demonstrates how to create a local error handler for a specific command using the `@command.error` decorator. This handler catches `commands.BadArgument` exceptions, which typically occur when a command argument cannot be parsed correctly (e.g., an invalid member mention).

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

# Assuming 'bot' is an instance of commands.Bot
# bot = commands.Bot(command_prefix='!')

@bot.command()
async def info(ctx, *, member: discord.Member):
    """Tells you some info about the member."""
    msg = f'{member} joined on {member.joined_at} and has {len(member.roles)} roles.'
    await ctx.send(msg)

@info.error
async definfo_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        await ctx.send('I could not find that member...')

```

----------------------------------------

TITLE: Get Pinned Messages
DESCRIPTION: Retrieves all messages that are currently pinned in the channel. Note that pinned message objects may not contain complete reaction data due to API limitations.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
pins()
  Retrieves all messages that are currently pinned in the channel.
  Note: Message objects returned may not contain complete Message.reactions data.
  Raises:
    Forbidden: You do not have the permission to retrieve pinned messages.
    HTTPException: Retrieving the pinned messages failed.
  Returns:
    List[Message]: The messages that are currently pinned.
```

----------------------------------------

TITLE: HelpCommand API Documentation
DESCRIPTION: Documentation for the HelpCommand class and its methods in discord.py, detailing how to customize the bot's help command functionality.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: APIDOC
CODE:
```
HelpCommand:
  Description: Replaces the old HelpFormatter class. Manages all command handling and processing for the help command.
  Attribute: Bot.help_command - Stores the help command instance. Can be set to None to disable.

  Methods:
    send_bot_help():
      Description: Called when the user requests help for the entire bot.
      Parameters: None
      Returns: None

    send_cog_help(cog):
      Description: Called when the user requests help for a specific cog.
      Parameters:
        cog: The cog for which help is requested.
      Returns: None

    send_group_help(group):
      Description: Called when the user requests help for a Group.
      Parameters:
        group: The Group for which help is requested.
      Returns: None

    send_command_help(command):
      Description: Called when the user requests help for a Command.
      Parameters:
        command: The Command for which help is requested.
      Returns: None

    get_destination():
      Description: Called to determine where to send help messages (e.g., DM or channel).
      Parameters: None
      Returns: The destination for the help message.

    command_not_found():
      Description: Returns a presentable string when a command is not found.
      Parameters: command_name (str): The name of the command that was not found.
      Returns: str: A message indicating the command was not found.

    subcommand_not_found(parent, cmd):
      Description: Returns a string when a subcommand is not found.
      Parameters:
        parent: The parent command or group.
        cmd: The subcommand name that was not found.
      Returns: str: A message indicating the subcommand was not found.

    send_error_message(error):
      Description: A coroutine that sends an error message, typically generated by command_not_found or subcommand_not_found.
      Parameters:
        error: The error message to send.
      Returns: None

    on_help_command_error(ctx, error):
      Description: The error handler for the help command.
      Parameters:
        ctx: The command context.
        error: The error that occurred.
      Returns: None

    prepare_help_command():
      Description: A coroutine called right before help command processing is done.
      Parameters: None
      Returns: None

Example Usage:
  To disable the help command:
  bot = commands.Bot(command_prefix='!', help_command=None)

  To customize help message sending:
  class MyHelpCommand(commands.HelpCommand):
      async def send_command_help(self, command):
          # Custom logic to send help for a command
          pass

  bot.help_command = MyHelpCommand()

```

----------------------------------------

TITLE: Running the Client (Manual Event Loop)
DESCRIPTION: For more control over the event loop, you can manually manage the login, connect, and logout processes using asyncio.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_async

LANGUAGE: python
CODE:
```
import discord
import asyncio

client = discord.Client()

@asyncio.coroutine
def main_task():
    yield from client.login('token')
    yield from client.connect()

loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(main_task())
except:
    loop.run_until_complete(client.logout())
finally:
    loop.close()
```

----------------------------------------

TITLE: Get Discord Objects
DESCRIPTION: Provides methods to retrieve specific objects from Discord entities like guilds, members, channels, and clients. These methods are crucial for accessing and manipulating Discord data within your bot.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.Cooldown.get_retry_after()
  - Returns the time in seconds until the cooldown is ready.

discord.Guild.get_role(role_id: int)
  - Returns a role from the guild, if it exists.
  - Parameters:
    - role_id: The ID of the role to retrieve.
  - Returns: The Role object or None.

discord.Member.get_role(role_id: int)
  - Returns a role from the member, if they have it.
  - Parameters:
    - role_id: The ID of the role to retrieve.
  - Returns: The Role object or None.

discord.Guild.get_scheduled_event(event_id: int)
  - Returns a scheduled event from the guild, if it exists.
  - Parameters:
    - event_id: The ID of the scheduled event to retrieve.
  - Returns: The ScheduledEvent object or None.

discord.AutoShardedClient.get_shard(shard_id: int)
  - Returns a specific shard from the client.
  - Parameters:
    - shard_id: The ID of the shard to retrieve.
  - Returns: The Shard object.

discord.Client.get_soundboard_sound(sound_id: int)
  - Returns a soundboard sound from the client, if it exists.
  - Parameters:
    - sound_id: The ID of the soundboard sound to retrieve.
  - Returns: The SoundboardSound object or None.

commands.Bot.get_soundboard_sound(sound_id: int)
  - Returns a soundboard sound from the bot, if it exists.
  - Parameters:
    - sound_id: The ID of the soundboard sound to retrieve.
  - Returns: The SoundboardSound object or None.

discord.Guild.get_soundboard_sound(sound_id: int)
  - Returns a soundboard sound from the guild, if it exists.
  - Parameters:
    - sound_id: The ID of the soundboard sound to retrieve.
  - Returns: The SoundboardSound object or None.

discord.Client.get_stage_instance(stage_instance_id: int)
  - Returns a stage instance from the client, if it exists.
  - Parameters:
    - stage_instance_id: The ID of the stage instance to retrieve.
  - Returns: The StageInstance object or None.

commands.Bot.get_stage_instance(stage_instance_id: int)
  - Returns a stage instance from the bot, if it exists.
  - Parameters:
    - stage_instance_id: The ID of the stage instance to retrieve.
  - Returns: The StageInstance object or None.

discord.Guild.get_stage_instance(stage_instance_id: int)
  - Returns a stage instance from the guild, if it exists.
  - Parameters:
    - stage_instance_id: The ID of the stage instance to retrieve.
  - Returns: The StageInstance object or None.

discord.Client.get_sticker(sticker_id: int)
  - Returns a sticker from the client, if it exists.
  - Parameters:
    - sticker_id: The ID of the sticker to retrieve.
  - Returns: The Sticker object or None.

commands.Bot.get_sticker(sticker_id: int)
  - Returns a sticker from the bot, if it exists.
  - Parameters:
    - sticker_id: The ID of the sticker to retrieve.
  - Returns: The Sticker object or None.

discord.ForumChannel.get_tag(tag_id: int)
  - Returns a tag from the forum channel, if it exists.
  - Parameters:
    - tag_id: The ID of the tag to retrieve.
  - Returns: The ForumTag object or None.

tasks.Loop.get_task(name: str)
  - Returns a task by its name.
  - Parameters:
    - name: The name of the task.
  - Returns: The Task object or None.

discord.ForumChannel.get_thread(thread_id: int)
  - Returns a thread from the forum channel, if it exists.
  - Parameters:
    - thread_id: The ID of the thread to retrieve.
  - Returns: The Thread object or None.

discord.Guild.get_thread(thread_id: int)
  - Returns a thread from the guild, if it exists.
  - Parameters:
    - thread_id: The ID of the thread to retrieve.
  - Returns: The Thread object or None.

discord.TextChannel.get_thread(thread_id: int)
  - Returns a thread from the text channel, if it exists.
  - Parameters:
    - thread_id: The ID of the thread to retrieve.
  - Returns: The Thread object or None.

discord.app_commands.Cooldown.get_tokens()
  - Returns the number of tokens currently available.

discord.Client.get_user(user_id: int)
  - Returns a user from the client, if they exist.
  - Parameters:
    - user_id: The ID of the user to retrieve.
  - Returns: The User object or None.

commands.Bot.get_user(user_id: int)
  - Returns a user from the bot, if they exist.
  - Parameters:
    - user_id: The ID of the user to retrieve.
  - Returns: The User object or None.
```

----------------------------------------

TITLE: Interactions API Reference Overview
DESCRIPTION: Provides an overview of the discord.py Interactions API, linking to key concepts like Commands, Parameters, Context Menus, Groups, Decorators, Checks, Cooldowns, Namespaces, Transformers, Translations, and Exceptions.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
Interactions API Reference:
  - Command: https://discordpy.readthedocs.io/en/stable/interactions/api.html#command
  - Parameter: https://discordpy.readthedocs.io/en/stable/interactions/api.html#parameter
  - ContextMenu: https://discordpy.readthedocs.io/en/stable/interactions/api.html#contextmenu
  - Group: https://discordpy.readthedocs.io/en/stable/interactions/api.html#group
  - Decorators: https://discordpy.readthedocs.io/en/stable/interactions/api.html#decorators
  - Checks: https://discordpy.readthedocs.io/en/stable/interactions/api.html#checks
  - Cooldown: https://discordpy.readthedocs.io/en/stable/interactions/api.html#cooldown
  - Namespace: https://discordpy.readthedocs.io/en/stable/interactions/api.html#namespace
  - Transformers:
    - Transformer: https://discordpy.readthedocs.io/en/stable/interactions/api.html#transformer
    - Transform: https://discordpy.readthedocs.io/en/stable/interactions/api.html#transform
    - Range: https://discordpy.readthedocs.io/en/stable/interactions/api.html#range
  - Translations:
    - Translator: https://discordpy.readthedocs.io/en/stable/interactions/api.html#translator
    - locale_str: https://discordpy.readthedocs.io/en/stable/interactions/api.html#locale-str
    - TranslationContext: https://discordpy.readthedocs.io/en/stable/interactions/api.html#translationcontext
    - TranslationContextLocation: https://discordpy.readthedocs.io/en/stable/interactions/api.html#translationcontextlocation
  - Exceptions:
    - Exception Hierarchy: https://discordpy.readthedocs.io/en/stable/interactions/api.html#exception-hierarchy
```

----------------------------------------

TITLE: Discord.py Connection Methods
DESCRIPTION: This documentation details the various methods used to establish a connection to Discord in discord.py, covering different client types and channel contexts.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.abc.Connectable.connect():
  Connects to Discord.

discord.AutoShardedClient.connect():
  Connects the auto-sharded client to Discord.

discord.Client.connect():
  Connects the client to Discord.

commands.Bot.connect():
  Connects the bot to Discord.

discord.ShardInfo.connect():
  Connects a specific shard to Discord.

discord.StageChannel.connect():
  Connects to a Stage Channel.
```

----------------------------------------

TITLE: discord.py Commands API - Commands
DESCRIPTION: Explains the core command-related components in discord.py, including decorators for command creation, the base Command and Group classes, GroupMixin for hierarchical commands, and HybridCommand/HybridGroup for mixed command types.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Decorators:
  @bot.command()
    Decorator to register a function as a command.
  @bot.group()
    Decorator to register a function as a command group.

Command:
  __init__(name, **options)
    name: The name of the command.
    **options: Additional options for the command.

Group:
  __init__(name, **options)
    name: The name of the command group.
    **options: Additional options for the group.

GroupMixin:
  add_command(command)
    Adds a command to the group.
  remove_command(name)
    Removes a command from the group.

HybridCommand:
  __init__(name, **options)
    name: The name of the hybrid command.
    **options: Additional options for the hybrid command.

HybridGroup:
  __init__(name, **options)
    name: The name of the hybrid group.
    **options: Additional options for the hybrid group.
```

----------------------------------------

TITLE: Python Bot Event Listener Example
DESCRIPTION: Demonstrates how to use the `@bot.listen()` decorator to register an event listener for messages. This function will be called whenever a message is received by the bot. It prints 'two' to the console. If the listened-to function is not a coroutine, a TypeError will be raised.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
@bot.listen('on_message')
async def my_message(message):
    print('two')
```

----------------------------------------

TITLE: CommandTree API Documentation
DESCRIPTION: Provides a comprehensive overview of the discord.app_commands.CommandTree class, including its constructor, attributes, and methods for managing application commands.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
CommandTree:
  __init__(client, *, fallback_to_global=True, allowed_contexts=..., allowed_installs=...)
    client: The client instance to get application command information from.
    fallback_to_global: If a guild-specific command is not found, try falling back to a global command. Defaults to True.
    allowed_contexts: The default allowed contexts for all commands in this tree. Can be overridden per command.
    allowed_installs: The default allowed install locations for all commands in this tree. Can be overridden per command.

  Attributes:
    translator: An attribute related to command translation.

  Methods:
    add_command(command)
      Adds an application command to the tree.
    clear_commands(guild=None)
      Clears all commands from the tree, optionally for a specific guild.
    command(*, name=..., description=..., nsfw=False, guild=None, guilds=None, auto_locale_strings=True, extras=...)
      A decorator to create an application command from a function.
      Parameters:
        name: The name of the command.
        description: The description of the command.
        nsfw: Whether the command is NSFW. Defaults to False.
        guild: The guild to register the command in.
        guilds: A list of guilds to register the command in.
        auto_locale_strings: Whether to automatically handle locale strings. Defaults to True.
        extras: Extra data to associate with the command.
    context_menu(*, name=..., type=..., guild=None, guilds=None, auto_locale_strings=True, extras=...)
      A decorator to create a context menu command.
      Parameters:
        name: The name of the context menu command.
        type: The type of context menu (e.g., USER, MESSAGE).
        guild: The guild to register the command in.
        guilds: A list of guilds to register the command in.
        auto_locale_strings: Whether to automatically handle locale strings. Defaults to True.
        extras: Extra data to associate with the command.
    copy_global_to(guild)
      Copies all global commands to a specific guild.
    error(coro)
      A decorator to register an error handler for commands.
    fetch_command(name, *, guild=None)
      Fetches a specific command by name, optionally for a guild.
    fetch_commands(*, guild=None)
      Fetches all commands, optionally for a guild.
    get_command(name, *, guild=None)
      Gets a command by name, optionally for a guild.
    get_commands(*, guild=None)
      Gets all commands, optionally for a guild.
    interaction_check(coro)
      A decorator to register an interaction check.
    on_error(interaction, error)
      An event handler for command errors.
    remove_command(name, *, guild=None)
      Removes a command by name, optionally for a guild.
    set_translator(translator)
      Sets the translator for the command tree.
    sync(*, guild=None)
      Synchronizes the commands with Discord, optionally for a specific guild.
    walk_commands(*, prefix=None, inclusive=False)
      Walks through all the commands in the tree.
```

----------------------------------------

TITLE: Getting Specific Discord Objects
DESCRIPTION: Demonstrates how to retrieve specific Discord objects like channels, guilds, users, members, emojis, and roles using their IDs or by searching. It covers both direct retrieval methods and the use of utility functions like `discord.utils.get` for more flexible searching.

SOURCE: https://discordpy.readthedocs.io/en/stable/faq

LANGUAGE: python
CODE:
```
import discord

# Example using discord.utils.get to find a guild by name
guild = discord.utils.get(client.guilds, name='My Server')

# Example using discord.utils.get to find a channel by name within a guild
if guild:
    channel = discord.utils.get(guild.text_channels, name='cool-channel')

```

----------------------------------------

TITLE: Using typing.Annotated for Custom Type Conversion
DESCRIPTION: Illustrates the use of typing.Annotated to provide a type hint for type checkers while specifying a custom conversion logic for the library. In this example, the 'arg' parameter is type-hinted as a string, but the library converts the input to uppercase using a lambda function.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
from typing import Annotated

@bot.command()
async def fun(ctx, arg: Annotated[str, lambda s: s.upper()]):
    await ctx.send(arg)
```

----------------------------------------

TITLE: Discord.py Bot: Get Command
DESCRIPTION: Retrieves a command from the bot by its name. The name can be fully qualified to access subcommands. Returns None if the command is not found. The 'name' parameter is positional-only since version 2.0.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_command(name: str)
  Retrieves a command by its name.
  Parameters:
    name: The name of the command to retrieve. Can be fully qualified (e.g., 'foo bar').
  Returns:
    The requested Command object, or None if not found.
  Changed in version 2.0: 'name' parameter is now positional-only.
```

----------------------------------------

TITLE: ContextMenu Class Documentation
DESCRIPTION: Provides detailed information about the ContextMenu class, its attributes, methods, and parameters for creating Discord context menu commands.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
ContextMenu:
  __init__(name, callback, type=..., nsfw=False, guild_ids=None, allowed_contexts=None, allowed_installs=None, auto_locale_strings=True, extras=...)
    A class that implements a context menu application command.
    These are usually not created manually, instead they are created using one of the following decorators:
      * context_menu()
      * CommandTree.context_menu
    New in version 2.0.
    Parameters:
      name (Union[str, locale_str]): The name of the context menu.
      callback (coroutine): The coroutine that is executed when the command is called.
      type (AppCommandType): The type of context menu application command. By default, this is inferred by the parameter of the callback.
      auto_locale_strings (bool): If True, translatable strings are implicitly wrapped into locale_str. Defaults to True.
      nsfw (bool): Whether the command is NSFW. Defaults to False.
      extras (dict): A dictionary for extraneous data.

Attributes:
  allowed_contexts: The allowed contexts for the command.
  allowed_installs: The allowed installs for the command.
  callback: The coroutine executed when the command is called.
  checks: A list of checks to be performed before executing the command.
  default_permissions: The default permissions for the command.
  extras: A dictionary of extraneous data.
  guild_only: Whether the command is guild-only.
  name: The name of the context menu.
  nsfw: Whether the command is NSFW.
  qualified_name: The qualified name of the context menu.
  type: The type of the context menu.

Methods:
  add_check(check):
    Adds a check to the context menu.
  error(coro):
    A decorator to register an error handler for the context menu.
  remove_check(check):
    Removes a check from the context menu.

name:
  The name of the context menu.
  Type: str
```

----------------------------------------

TITLE: discord.ext.commands
DESCRIPTION: The discord.ext.commands extension provides a framework for creating command-based bots. It simplifies command handling, argument parsing, and error management.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

bot = commands.Bot(command_prefix='!')

@bot.command()
async def ping(ctx):
    await ctx.send('Pong!')

bot.run('YOUR_BOT_TOKEN')
```

----------------------------------------

TITLE: Context Menu Command Parameters
DESCRIPTION: Defines parameters for creating context menu commands in discord.py. Includes options for command name, NSFW status, guild targeting, and locale string management.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
name (Union[str, locale_str]): The name of the context menu command. Defaults to a title-cased version of the callback name. Can include spaces and uppercase characters.
nsfw (bool): Whether the command is NSFW. Defaults to False. Does not work on subcommands.
guild (Optional[Snowflake]): The guild to add the command to. If None, it becomes a global command. Cannot be used with allowed_contexts or allowed_installs.
guilds (List[Snowflake]): A list of guilds to add the command to. Cannot be mixed with the 'guild' parameter. If empty, it becomes a global command. Cannot be used with allowed_contexts or allowed_installs.
auto_locale_strings (bool): If True, translatable strings are implicitly wrapped into locale_str. Defaults to True.
extras (dict): A dictionary for storing extraneous data.
```

----------------------------------------

TITLE: Bot Login and Connection
DESCRIPTION: Provides a shorthand for logging in and connecting the bot to Discord. Handles token authentication and optional reconnection logic.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: python
CODE:
```
async def login(token: str, reconnect: bool = True):
    # Logs in and connects the bot to Discord.
    # Parameters:
    #   token: The authentication token for the bot.
    #   reconnect: Whether to attempt reconnection on disconnect.
    # Raises:
    #   TypeError: If an unexpected keyword argument is received.
```

----------------------------------------

TITLE: Extension Loading Exceptions
DESCRIPTION: Lists the exceptions that can be raised during extension loading in discord.ext.commands. These include `ExtensionNotFound`, `ExtensionAlreadyLoaded`, `NoEntryPointError`, and `ExtensionFailed`, providing details on when each error occurs.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Raises:
  ExtensionNotFound: The extension could not be imported or its name could not be resolved.
  ExtensionAlreadyLoaded: The extension is already loaded.
  NoEntryPointError: The extension does not have a setup function.
  ExtensionFailed: The extension or its setup function had an execution error.
```

----------------------------------------

TITLE: discord.py Converters API Documentation
DESCRIPTION: Documentation for discord.py converters, detailing their conversion logic, parameters, and exceptions.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
class discord.ext.commands.InviteConverter(*args, **kwargs)
  Methods:
    async convert(ctx, argument)
      Converts to a discord.Invite.
      This is done via an HTTP request using Bot.fetch_invite().
      Changed in version 1.5: Raise BadInviteArgument instead of generic BadArgument
      Parameters:
        ctx (discord.ext.commands.Context): The invocation context that the argument is being used in.
        argument (str): The argument that is being converted.
      Raises:
        CommandError: A generic exception occurred when converting the argument.
        BadArgument: The converter failed to convert the argument.
        BadInviteArgument: An invalid invite argument was provided.

class discord.ext.commands.GuildConverter(*args, **kwargs)
  Methods:
    async convert(ctx, argument)
      Converts to a discord.Guild.
      The lookup strategy is as follows (in order):
        1. Lookup by ID.
        2. Lookup by name. (There is no disambiguation for Guilds with multiple matching names).
      New in version 1.7.
      Parameters:
        ctx (discord.ext.commands.Context): The invocation context that the argument is being used in.
        argument (str): The argument that is being converted.
      Raises:
        CommandError: A generic exception occurred when converting the argument.
        BadArgument: The converter failed to convert the argument.
```

----------------------------------------

TITLE: Extension Loading Package Parameter
DESCRIPTION: Explains the `package` parameter used for resolving relative imports when loading extensions. This is crucial for extensions with relative paths, like `.foo.test`. It defaults to `None` and is required for proper resolution.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
package
  The package name to resolve relative imports with.
  Required when loading an extension using a relative path (e.g., `.foo.test`).
  Defaults to None.
  New in version 1.7.
```

----------------------------------------

TITLE: Discord.py Bot: Get Emoji
DESCRIPTION: Retrieves a custom emoji from the bot using its ID. Returns None if the emoji is not found. The 'id' parameter is positional-only since version 2.0.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_emoji(id: int)
  Returns an emoji with the given ID.
  Parameters:
    id: The ID of the emoji to search for.
  Returns:
    The custom emoji object, or None if not found.
  Changed in version 2.0: 'id' parameter is now positional-only.
```

----------------------------------------

TITLE: discord.on_ready() Dispatch for Large Sharded Bots
DESCRIPTION: Resolves an issue causing delays in dispatching discord.on_ready() for large sharded bots, improving startup performance.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
discord.on_ready()
```

----------------------------------------

TITLE: discord.py API Documentation - discord.Guild and discord.DMChannel
DESCRIPTION: API documentation for discord.Guild and discord.DMChannel, detailing stage instances, scheduled events, and permissions.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
discord.Guild:
  stage_instances: List[discord.StageInstance]
    A list of stage instances in the guild. Fixes clearing on `GUILD_UPDATE`.

  schedule_events: List[discord.ScheduledEvent]
    A list of scheduled events in the guild. Fixes clearing on `GUILD_UPDATE`.

discord.DMChannel:
  permissions_for(obj: discord.Object) -> discord.Permissions
    Returns the permissions for a given object in the channel. Fixes thread permissions being set to `True`.
```

----------------------------------------

TITLE: Discord.py Bot: Get Guild
DESCRIPTION: Retrieves a guild (server) from the bot using its ID. Returns None if the guild is not found. The 'id' parameter is positional-only since version 2.0.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_guild(id: int)
  Returns a guild with the given ID.
  Parameters:
    id: The ID of the guild to search for.
  Returns:
    The guild object, or None if not found.
  Changed in version 2.0: 'id' parameter is now positional-only.
```

----------------------------------------

TITLE: Discord.py Interaction and Component Types
DESCRIPTION: This section outlines different types of interactions and components used in discord.py, including event statuses and member flags related to onboarding and actions.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.InteractionType.component:
  Represents an interaction triggered by a component (e.g., button, select menu).

discord.Component:
  Represents a UI component in an interaction.

discord.Message.components:
  A list of components attached to a message.
  discord.MessageSnapshot.components: Similar attribute for message snapshots.

discord.ComponentType:
  An enum representing the type of a UI component.
```

----------------------------------------

TITLE: Using Constructed vs. Non-Constructed Converters
DESCRIPTION: Shows that using a custom converter class with or without parentheses in the command signature is equivalent. Using parentheses allows for initialization with arguments.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/commands

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

bot = commands.Bot(command_prefix='/')

class MyConverter(commands.Converter):
    async def convert(self, ctx, argument):
        return argument.upper() # Example conversion

# Equivalent ways to use the converter:
@bot.command()
async def process1(ctx, *, data: MyConverter):
    await ctx.send(data)

@bot.command()
async def process2(ctx, *, data: MyConverter()): # Using parentheses
    await ctx.send(data)

# Example usage:
# /process1 test
# Bot responds with: TEST
# /process2 another test
# Bot responds with: ANOTHER TEST
```

----------------------------------------

TITLE: discord.py Command Configuration and Help
DESCRIPTION: Details on command attributes used for configuration, such as command aliases and attributes for help command customization, including methods for handling command not found scenarios.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.CogMeta.command_attrs
commands.HelpCommand.command_attrs

Description: Attributes used to define or retrieve metadata associated with commands, often used for aliases or custom options within cogs or help commands.
```

LANGUAGE: APIDOC
CODE:
```
commands.HelpCommand.command_callback()
commands.HelpCommand.command_not_found()

Description: Methods related to the help command functionality. `command_callback` is the core logic for displaying help, and `command_not_found` handles cases where a requested command is not found.
```

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.TranslationContextLocation.command_description
discord.app_commands.TranslationContextLocation.command_name

Description: Enums or constants used to specify the context for command translations, allowing for localized command names and descriptions.
```

LANGUAGE: APIDOC
CODE:
```
commands.Bot.command_prefix

Description: Configuration attribute for the bot that defines the prefix(es) used to invoke commands. This can be a string, a list of strings, or a callable.
```

----------------------------------------

TITLE: Discord API Documentation - Miscellaneous Attributes and Methods
DESCRIPTION: This section covers various other attributes and methods, including locale settings, color utility, and exception details.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Locale.taiwan_chinese:
  Description: Represents the Traditional Chinese locale for Taiwan.

discord.Colour.teal():
  Description: Returns a Colour object representing teal.
  Returns: discord.Colour

discord.EntitlementType.test_mode_purchase:
  Description: Represents a test mode purchase entitlement.

discord.HTTPException.text:
  Description: The text content of the HTTP error response.
  Type: str

discord.PollAnswer.text:
  Description: The text content of the poll answer.
  Type: str

discord.PollMedia.text:
  Description: The text content of the poll media.
  Type: str

discord.Permissions.text():
  Description: Returns a string representation of the permissions.
  Returns: str

discord.Permissions.text:
  Description: A string representation of the permissions.
  Type: str
```

----------------------------------------

TITLE: discord.ext.commands.MinimalHelpCommand Formatting Methods
DESCRIPTION: Provides methods for customizing the formatting of help messages within the commands extension. These methods allow for fine-grained control over how bot commands, aliases, and other help information are displayed.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.MinimalHelpCommand.add_aliases_formatting()
commands.MinimalHelpCommand.add_bot_commands_formatting()

Description: These methods are used internally by MinimalHelpCommand to format the display of command aliases and bot commands in the help output. They allow for custom formatting rules to be applied.
```

----------------------------------------

TITLE: discord.py Hybrid Commands
DESCRIPTION: Documentation for creating and using hybrid commands in discord.py.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.Bot.hybrid_command(command: Union[discord.ext.commands.Command, discord.ext.commands.HybridCommand], *, invoke_without_command: bool = False, pass_context: bool = False) -> discord.ext.commands.HybridCommand:
  Decorator to register a hybrid command on the Bot.
  A hybrid command is a command that can be invoked by both message content and slash commands.
  Parameters:
    command: The command to register.
    invoke_without_command: Whether to invoke the command even if it's not a valid command.
    pass_context: Whether to pass the context to the command.
  Returns: The registered hybrid command.

commands.hybrid_command(command: Union[discord.ext.commands.Command, discord.ext.commands.HybridCommand], *, invoke_without_command: bool = False, pass_context: bool = False) -> discord.ext.commands.HybridCommand:
  Decorator to register a hybrid command.
  This is a shortcut for `bot.hybrid_command` when using a custom Bot class.
  Parameters:
    command: The command to register.
    invoke_without_command: Whether to invoke the command even if it's not a valid command.
    pass_context: Whether to pass the context to the command.
  Returns: The registered hybrid command.

commands.Bot.hybrid_group(command: Union[discord.ext.commands.Group, discord.ext.commands.HybridGroup], *, invoke_without_command: bool = False, pass_context: bool = False) -> discord.ext.commands.HybridGroup:
  Decorator to register a hybrid group command on the Bot.
  A hybrid group command is a group of commands that can be invoked by both message content and slash commands.
  Parameters:
    command: The group command to register.
    invoke_without_command: Whether to invoke the command even if it's not a valid command.
    pass_context: Whether to pass the context to the command.
  Returns: The registered hybrid group command.

commands.hybrid_group(command: Union[discord.ext.commands.Group, discord.ext.commands.HybridGroup], *, invoke_without_command: bool = False, pass_context: bool = False) -> discord.ext.commands.HybridGroup:
  Decorator to register a hybrid group command.
  This is a shortcut for `bot.hybrid_group` when using a custom Bot class.
  Parameters:
    command: The group command to register.
    invoke_without_command: Whether to invoke the command even if it's not a valid command.
    pass_context: Whether to pass the context to the command.
  Returns: The registered hybrid group command.

commands.HybridCommand:
  Represents a hybrid command.
  This class inherits from `discord.ext.commands.Command` and adds support for slash commands.

commands.HybridCommandError:
  An exception raised when a hybrid command fails.

commands.HybridGroup:
  Represents a hybrid group command.
  This class inherits from `discord.ext.commands.Group` and adds support for slash commands.
```

----------------------------------------

TITLE: discord.py Application and Permissions
DESCRIPTION: Documentation for application-related attributes like primary SKU ID and privacy policy URL, as well as permissions related to priority speaker.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.AppInfo.primary_sku_id
  - The ID of the primary SKU for the application.
discord.AppInfo.privacy_policy_url
  - The URL of the application's privacy policy.
discord.PartialAppInfo.privacy_policy_url
  - The URL of the partial application's privacy policy.
discord.Permissions.priority_speaker
  - Permission to speak in a voice channel with priority.
```

----------------------------------------

TITLE: Asset Helper Methods
DESCRIPTION: Introduces new helper methods available on Asset objects for customizing asset URLs by size and format.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: python
CODE:
```
asset.with_size(size)
asset.with_format(fmt)
asset.with_static_format(fmt)
```

----------------------------------------

TITLE: Premium App Integrations
DESCRIPTION: Introduces support for premium app integrations with new classes for SKUs and entitlements, such as `SKU`, `Entitlement`, and `SKUFlags`.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
import discord

# Example usage (conceptual)
# sku = discord.SKU(...)
# entitlement = discord.Entitlement(...)
# sku_flags = discord.SKUFlags.premium_user
```

----------------------------------------

TITLE: discord.Client.start() and Client.run() Keyword Argument Validation
DESCRIPTION: Validates keyword arguments passed to Client.start() and Client.run() to prevent unexpected behavior and ensure proper execution.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
discord.Client.start()
discord.Client.run()
```

----------------------------------------

TITLE: Discord.py Bot: Get Context
DESCRIPTION: Returns the invocation context from a message or interaction. This is a lower-level counterpart to process_commands(). The returned context must be validated using Context.valid. For interaction-based contexts, this method may need to be overridden. Since version 2.0, the 'message' parameter is positional-only and renamed to 'origin'.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
_get_context(_origin_, *_*, cls=Context)
  Returns the invocation context from the message or interaction.
  Parameters:
    _origin_: The message or interaction to get the context from.
    cls: The factory class for creating the context (defaults to Context).
  Returns:
    The invocation context.
  Note:
    Context.valid must be checked to ensure the context is valid.
  Changed in version 2.0: 'message' parameter is now positional-only and renamed to 'origin'.
```

----------------------------------------

TITLE: discord.ext.commands API Additions
DESCRIPTION: Details new checks, converters, and decorators available in the discord.ext.commands module.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.dm_only()
  New check to restrict commands to DMs.

discord.ext.commands.Greedy
  Supports callable converters.

discord.ext.commands.MessageConverter
  Allows using discord.Message as a type hint in functions.

discord.ext.commands.group()
  Allows passing cls argument to the decorator.
  Related Issue: GH-2061

discord.ext.commands.Command.parents
  Attribute to fetch the parents of a command.
  Related Issue: GH-2104
```

----------------------------------------

TITLE: discord.app_commands.guilds
DESCRIPTION: Associates the given guilds with the command.

When the command instance is added to a `CommandTree`, the guilds that are specified by this decorator become the default guilds that it’s added to rather than being a global command.

Due to an implementation quirk and Python limitation, if this is used in conjunction with the `CommandTree.command()` or `CommandTree.context_menu()` decorator then this must go below that decorator.

Due to a Discord limitation, this decorator cannot be used in conjunction with contexts (e.g. `app_commands.allowed_contexts()`) or installation types (e.g. `app_commands.allowed_installs()`).

Parameters:
    `*guild_ids` (Union[`int`, `Snowflake`]) – The guilds to associate this command with. The command tree will use this as the default when added rather than adding it as a global command.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.guilds(_*guild_ids)

Associates the given guilds with the command.

Parameters:
    *guild_ids: The guilds to associate this command with.
```

----------------------------------------

TITLE: discord.py RoleConverter API Documentation
DESCRIPTION: Provides detailed information about the RoleConverter class, its convert method, parameters, and exceptions. It explains how roles are looked up by ID, mention, or name within a guild context and details the exceptions that can be raised during conversion.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
class discord.ext.commands.RoleConverter(*args, **kwargs)
    Converts to a [`Role`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Role "discord.Role").
    All lookups are via the local guild. If in a DM context, the converter raises [`NoPrivateMessage`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.NoPrivateMessage "discord.ext.commands.NoPrivateMessage") exception.
    The lookup strategy is as follows (in order):
      1. Lookup by ID.
      2. Lookup by mention.
      3. Lookup by name
    Changed in version 1.5: Raise [`RoleNotFound`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.RoleNotFound "discord.ext.commands.RoleNotFound") instead of generic [`BadArgument`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.BadArgument "discord.ext.commands.BadArgument") 

    async convert(ctx, argument)
        This function is a [_coroutine_](https://docs.python.org/3/library/asyncio-task.html#coroutine "coroutine").
        The method to override to do conversion logic.
        If an error is found while converting, it is recommended to raise a [`CommandError`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.CommandError "discord.ext.commands.CommandError") derived exception as it will properly propagate to the error handlers.
        Note that if this method is called manually, [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "(in Python v3.13)") should be caught to handle the cases where a subclass does not explicitly inherit from [`CommandError`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.CommandError "discord.ext.commands.CommandError"). 

        Parameters
            ctx ([`Context`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Context "discord.ext.commands.Context")) – The invocation context that the argument is being used in.
            argument ([`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.13)")) – The argument that is being converted.

        Raises
            [**CommandError**](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.CommandError "discord.ext.commands.CommandError") – A generic exception occurred when converting the argument.
            [**BadArgument**](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.BadArgument "discord.ext.commands.BadArgument") – The converter failed to convert the argument.
            [**RoleNotFound**](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.RoleNotFound "discord.ext.commands.RoleNotFound") – The specified role could not be found.
```

----------------------------------------

TITLE: Using discord.utils.get()
DESCRIPTION: Shows how to use the `discord.utils.get()` function to efficiently retrieve specific objects from collections based on their attributes. This simplifies common data retrieval tasks.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
import discord

client = discord.Client()

@client.event
async def on_message(message):
    # Find a member named 'SomeUser' in the message's guild
    member = discord.utils.get(message.guild.members, name='SomeUser')
    if member:
        print(f'Found member: {member.name}')

client.run('YOUR_BOT_TOKEN')
```

----------------------------------------

TITLE: discord.ext.commands Fixes and Improvements
DESCRIPTION: This snippet details fixes and improvements related to the discord.ext.commands extension. It includes changes to lambda converters, cooldown reference time, default error handling, NSFW checks for DM channels, help command race conditions, and cog descriptions in MinimalHelpCommand.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
import discord
from discord.ext import commands

# Fix lambda converters in a non-module context (e.g. eval).
# Use message creation time for reference time when computing cooldowns.
# This prevents cooldowns from triggering during e.g. a RESUME session.
# Fix the default on_command_error() to work with new-style cogs.
# DM channels are now recognised as NSFW in is_nsfw() check.
# Fix race condition with help commands.
# Fix cog descriptions not showing in MinimalHelpCommand.
```

----------------------------------------

TITLE: discord.ext.commands Exception Details
DESCRIPTION: Details on various exception classes in discord.ext.commands, including their arguments and inheritance.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
PartialEmojiConversionFailure:
  argument: The emoji supplied by the caller that did not match the regex
  Type: str

GuildStickerNotFound(_argument_):
  Inherits from: BadArgument
  New in version: 2.0
  argument: The sticker supplied by the caller that was not found
  Type: str

ScheduledEventNotFound(_argument_):
  Inherits from: BadArgument
  New in version: 2.0
  argument: The event supplied by the caller that was not found
  Type: str

SoundboardSoundNotFound(_argument_):
  Inherits from: BadArgument
  New in version: 2.5
  argument: The sound supplied by the caller that was not found
  Type: str

BadBoolArgument(_argument_):
  Inherits from: BadArgument
  New in version: 1.5
  argument: The boolean argument supplied by the caller that is not in the predefined list
  Type: str

RangeError(_value_, _minimum_, _maximum_):
  Inherits from: BadArgument
  New in version: 2.0
  minimum:
    The minimum value expected or None if there wasn’t one
    Type: Optional[Union[int, float]]
  maximum:
    The maximum value expected or None if there wasn’t one
    Type: Optional[Union[int, float]]
  value:
    The value that was out of range.
    Type: 
```

----------------------------------------

TITLE: discord.ui.select API Documentation
DESCRIPTION: Provides detailed API documentation for the discord.ui.select decorator, including its parameters, their types, descriptions, and default values. It also outlines the different types of select menus available and the resolved values they return.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
@discord.ui.select(cls=discord.ui.select.Select[typing.Any], options =..., channel_types =..., placeholder =None, custom_id =..., min_values =1, max_values =1, disabled =False, default_values =..., row =None)

A decorator that attaches a select menu to a component.
The function being decorated should have three parameters, `self` representing the [`discord.ui.View`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.View "discord.ui.View"), the [`discord.Interaction`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.Interaction "discord.Interaction") you receive and the chosen select class.
To obtain the selected values inside the callback, you can use the `values` attribute of the chosen class in the callback. The list of values will depend on the type of select menu used. View the table below for more information.
Select Type | Resolved Values  
---|---
[`discord.ui.Select`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.Select "discord.ui.Select") | List[[`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.13)")]  
[`discord.ui.UserSelect`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.UserSelect "discord.ui.UserSelect") | List[Union[[`discord.Member`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Member "discord.Member"), [`discord.User`](https://discordpy.readthedocs.io/en/stable/api.html#discord.User "discord.User")]]  
[`discord.ui.RoleSelect`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.RoleSelect "discord.ui.RoleSelect") | List[[`discord.Role`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Role "discord.Role")]  
[`discord.ui.MentionableSelect`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.MentionableSelect "discord.ui.MentionableSelect") | List[Union[[`discord.Role`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Role "discord.Role"), [`discord.Member`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Member "discord.Member"), [`discord.User`](https://discordpy.readthedocs.io/en/stable/api.html#discord.User "discord.User")]]  
[`discord.ui.ChannelSelect`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.ChannelSelect "discord.ui.ChannelSelect") | List[Union[[`AppCommandChannel`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.app_commands.AppCommandChannel "discord.app_commands.AppCommandChannel"), [`AppCommandThread`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.app_commands.AppCommandThread "discord.app_commands.AppCommandThread")]]  
Changed in version 2.1: Added the following keyword-arguments: `cls`, `channel_types`

Parameters
    
  * **cls** (Union[Type[[`discord.ui.Select`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.Select "discord.ui.Select")], Type[[`discord.ui.UserSelect`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.UserSelect "discord.ui.UserSelect")], Type[[`discord.ui.RoleSelect`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.RoleSelect "discord.ui.RoleSelect")], Type[[`discord.ui.MentionableSelect`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.MentionableSelect "discord.ui.MentionableSelect")], Type[[`discord.ui.ChannelSelect`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.ChannelSelect "discord.ui.ChannelSelect")]]) – The class to use for the select menu. Defaults to [`discord.ui.Select`](https://discordpy.readthedocs.io/en/stable/interactions/api.html#discord.ui.Select "discord.ui.Select"). You can use other select types to display different select menus to the user. See the table above for the different values you can get from each select type. Subclasses work as well, however the callback in the subclass will get overridden.
  * **placeholder** (Optional[[`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.13)")]) – The placeholder text that is shown if nothing is selected, if any. Can only be up to 150 characters.
```

----------------------------------------

TITLE: DefaultHelpCommand Configuration Options
DESCRIPTION: Configuration options for the DefaultHelpCommand class in discord.py, allowing customization of help message formatting and behavior. These include settings for DM thresholds, indentation, headings, argument descriptions, and pagination.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
dm_help_threshold:
  Description: The number of characters the paginator must accumulate before getting DM’d to the user if dm_help is set to None. Defaults to 1000.
  Type: Optional[int]

indent:
  Description: How much to indent the commands from a heading. Defaults to 2.
  Type: int

arguments_heading:
  Description: The arguments list’s heading string used when the help command is invoked with a command name. Useful for i18n. Defaults to "Arguments:". Shown when show_parameter_descriptions is True. New in version 2.0.
  Type: str

show_parameter_descriptions:
  Description: Whether to show the parameter descriptions. Defaults to True. Setting this to False will revert to showing the signature instead. New in version 2.0.
  Type: bool

commands_heading:
  Description: The command list’s heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to "Commands:".
  Type: str

default_argument_description:
  Description: The default argument description string used when the argument’s description is None. Useful for i18n. Defaults to "No description given.". New in version 2.0.
  Type: str

no_category:
  Description: The string used when there is a command which does not belong to any category(cog). Useful for i18n. Defaults to "No Category".
  Type: str

paginator:
  Description: The paginator used to paginate the help command output.
  Type: Paginator
```

----------------------------------------

TITLE: discord.py TextInput Class Documentation
DESCRIPTION: Provides comprehensive documentation for the TextInput class in discord.py, detailing its constructor, attributes, and methods for creating interactive text input components in Discord.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
discord.ui.TextInput
  __init__(label: str, style: discord.TextStyle = discord.TextStyle.short, custom_id: str = ..., placeholder: Optional[str] = None, default: Optional[str] = None, required: bool = True, min_length: Optional[int] = None, max_length: Optional[int] = None, row: Optional[int] = None)
    Represents a UI text input.
    Parameters:
      label (str): The label to display above the text input. Max 45 characters.
      custom_id (str): The ID of the text input for interactions. Max 100 characters. If not provided, one is generated.
      style (discord.TextStyle): The style of the text input.
      placeholder (Optional[str]): Placeholder text when the input is empty. Max 100 characters.
      default (Optional[str]): Default value of the text input. Max 4000 characters.
      required (bool): Whether the text input is required. Defaults to True.
      min_length (Optional[int]): Minimum length of the text input. Must be between 0 and 4000.
      max_length (Optional[int]): Maximum length of the text input. Must be between 1 and 4000.
      row (Optional[int]): The relative row for the text input (0-4). Defaults to None for automatic ordering.

  Attributes:
    custom_id (str): The ID of the text input received during an interaction.
    value (str): The value of the text input.
    label (str): The label of the text input.

  Methods:
    async callback():
      Handles the interaction callback for the text input.
    async interaction_check():
      Checks if the interaction is valid for this component.
```

----------------------------------------

TITLE: Bot Integration and Command Bot
DESCRIPTION: References for bot integrations and the base Bot class for command extensions.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.BotIntegration:
  Description: Represents a bot integration.

commands.Bot:
  Inherits: discord.Client
  Description: Represents a bot that processes commands. This class is an extension of discord.Client that adds command processing capabilities.
```

----------------------------------------

TITLE: discord.py Command Decorators and Classes
DESCRIPTION: Details on how to define and manage commands within the discord.py library, including decorators for registering commands and classes for command handling and conversion.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.Command
commands.Command
commands.ColourConverter

Description: Represents a command or a converter for command arguments. `Command` objects are used in both the application commands and the traditional commands extension. `ColourConverter` is used to convert input into a discord.Colour object.
```

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.CommandTree.command()
discord.app_commands.Group.command()
commands.Bot.command()
commands.Group.command()
commands.GroupMixin.command()
commands.HybridGroup.command()
discord.app_commands.command()
commands.command()

Description: Decorators used to register commands with the respective command trees or bots. These decorators allow for the definition of command behavior and options. They can be applied to asynchronous functions.
```

----------------------------------------

TITLE: Discord.py Bot: Get Partial Messageable
DESCRIPTION: Returns a partial messageable object using a channel ID. This is useful for sending messages to a channel without needing to fetch the full channel object first. This feature was introduced in version 2.0.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
get_partial_messageable(id: int, *, guild_id: Optional[int] = None, type: Optional[Type[Messageable]] = None)
  Returns a partial messageable with the given channel ID.
  Parameters:
    id: The channel ID to create a partial messageable for.
    guild_id: The ID of the guild the channel belongs to (optional).
    type: The type of messageable to create (optional).
  New in version 2.0.
```

----------------------------------------

TITLE: Discord Application Command and Interaction API References
DESCRIPTION: This section details various components and functionalities related to Discord's application commands and interactions. It covers aspects like permissions, context management, error handling, and application-specific information.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Interaction.app_permissions:
  Description: Represents the application permissions associated with an interaction.
  Type: discord.Permissions

discord.app_commands.AppCommand:
  Description: Represents an application command.
  Attributes:
    application_id: The ID of the application this command belongs to.

discord.app_commands.AppCommandChannel:
  Description: Represents a channel associated with an application command.

discord.app_commands.AppCommandContext:
  Description: Represents the context in which an application command is invoked.

discord.app_commands.AppCommandError:
  Description: Base class for application command errors.

discord.app_commands.AppCommandGroup:
  Description: Represents a group of application commands.

discord.AppCommandOptionType:
  Description: Enum representing the types of options for application commands.

discord.app_commands.AppCommandPermissions:
  Description: Represents permissions for an application command.
  Attributes:
    application_id: The ID of the application this permission set belongs to.

discord.AppCommandPermissionType:
  Description: Enum representing the types of permissions for application commands.

discord.app_commands.AppCommandThread:
  Description: Represents a thread associated with an application command.

discord.AppCommandType:
  Description: Enum representing the types of application commands.

discord.ui.Select.append_option():
  Description: Appends an option to the select menu.
  Parameters:
    option: The discord.SelectOption to append.
  Returns: None

discord.AppInfo:
  Description: Represents information about the Discord application.
  Attributes:
    application_id: The ID of the application.
    application_flags: Flags associated with the application.

discord.app_commands.AppInstallationType:
  Description: Enum representing the type of application installation.

discord.AppInstallParams:
  Description: Represents parameters for installing an application.

discord.BotIntegration.application:
  Description: The application associated with the bot integration.
  Type: discord.AppInfo

discord.Client.application:
  Description: The application associated with the client.
  Type: discord.AppInfo

commands.Bot.application:
  Description: The application associated with the bot.
  Type: discord.AppInfo

discord.Message.application:
  Description: The application associated with the message.
  Type: discord.AppInfo

discord.WebhookType.application:
  Description: Represents the type of webhook related to an application.

discord.InteractionType.application_command:
  Description: Represents the interaction type for application commands.

discord.Client.application_flags:
  Description: Flags associated with the client's application.

commands.Bot.application_flags:
  Description: Flags associated with the bot's application.

discord.Activity.application_id:
  Description: The ID of the application associated with the activity.
  Type: int

discord.app_commands.AppCommand.application_id:
  Description: The ID of the application this command belongs to.
  Type: int

discord.app_commands.GuildAppCommandPermissions.application_id:
  Description: The ID of the application this permission set belongs to.
  Type: int

discord.Client.application_id:
  Description: The ID of the client's application.
  Type: int

discord.Entitlement.application_id:
  Description: The ID of the application this entitlement belongs to.
  Type: int

commands.Bot.application_id:
  Description: The ID of the bot's application.
  Type: int

discord.Interaction.application_id:
  Description: The ID of the application associated with the interaction.
  Type: int

discord.Message.application_id:
  Description: The ID of the application associated with the message.
  Type: int

discord.PartialIntegration.application_id:
  Description: The ID of the application associated with the partial integration.
  Type: int

discord.RawAppCommandPermissionsUpdateEvent.application_id:
  Description: The ID of the application for which permissions were updated.
  Type: int

discord.RawIntegrationDeleteEvent.application_id:
  Description: The ID of the application associated with the deleted integration.
  Type: int

discord.SKU.application_id:
  Description: The ID of the application this SKU belongs to.
  Type: int

discord.Client.application_info():
  Description: Fetches information about the client's application.
  Returns:
    discord.AppInfo: Information about the application.
```

----------------------------------------

TITLE: Changing Task Interval Dynamically
DESCRIPTION: The change_interval method allows modification of a scheduled task's execution interval after it has been started. It accepts the same time-related parameters as the loop decorator (seconds, minutes, hours, time) and raises ValueError or TypeError for invalid inputs.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/tasks/index

LANGUAGE: python
CODE:
```
await my_task.change_interval(seconds=..., minutes=..., hours=..., time=...)
```

----------------------------------------

TITLE: discord.ui.RoleSelect API Documentation
DESCRIPTION: Provides detailed information about the RoleSelect class, including its constructor parameters, attributes, and methods. This documentation is crucial for understanding how to implement role selection components in Discord bots using discord.py.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
class discord.ui.RoleSelect(
    *, 
    custom_id: str = ..., 
    placeholder: Optional[str] = None, 
    min_values: int = 1, 
    max_values: int = 1, 
    disabled: bool = False, 
    row: Optional[int] = None, 
    default_values: Sequence[discord.SelectDefaultValue] = ...
)

Attributes:
  custom_id: The ID of the select menu that gets received during an interaction. If not given then one is generated for you. Can only be up to 100 characters.
  default_values: A list of default values for the select menu. New in version 2.4.
  disabled: Whether the select is disabled or not.
  max_values: The maximum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25.
  min_values: The minimum number of items that must be chosen for this select menu. Defaults to 1 and must be between 0 and 25.
  placeholder: The placeholder text that is shown if nothing is selected, if any. Can only be up to 150 characters.
  type: The type of this component.
  values: A list of roles that have been selected by the user.
  view: The view this component belongs to.

Methods:
  async callback(self): Called when the interaction is received.
  async interaction_check(self, interaction: discord.Interaction) -> bool: Called when the interaction is received.

Parameters:
  custom_id (str): The ID of the select menu that gets received during an interaction. If not given then one is generated for you. Can only be up to 100 characters.
  placeholder (Optional[str]): The placeholder text that is shown if nothing is selected, if any. Can only be up to 150 characters.
  min_values (int): The minimum number of items that must be chosen for this select menu. Defaults to 1 and must be between 0 and 25.
  max_values (int): The maximum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25.
  disabled (bool): Whether the select is disabled or not.
  default_values (Sequence[discord.SelectDefaultValue]): A list of objects representing the roles that should be selected by default. Number of items must be in range of `min_values` and `max_values`. New in version 2.4.
  row (Optional[int]): The relative row this select menu belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you’d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to `None`, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed).

Properties:
  type: discord.ComponentType
  values: List[discord.Role]
  default_values: List[discord.SelectDefaultValue]

Notes:
  Represents a UI select menu with a list of predefined options with the current roles of the guild. Please note that if you use this in a private message with a user, no roles will be displayed to the user. New in version 2.1.
```

----------------------------------------

TITLE: discord.ui.Modal API Documentation
DESCRIPTION: Provides details on the discord.ui.Modal class, including its constructor parameters, attributes, and key methods like on_submit and on_error. This documentation is crucial for understanding and implementing modal interactions.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
class discord.ui.Modal(title, timeout=None, custom_id)
  Represents a UI modal.

  Parameters:
    title (str): The title of the modal. Can only be up to 45 characters.
    timeout (Optional[float]): Timeout in seconds from last interaction with the UI before no longer accepting input. If None then there is no timeout.
    custom_id (str): The ID of the modal that gets received during an interaction. If not given then one is generated for you. Can only be up to 100 characters.

  Attributes:
    children: List of UI components within the modal.
    custom_id (str): The ID of the modal.
    timeout (Optional[float]): Timeout for the modal.
    title (str): The title of the modal.

  Methods:
    cls Modal.from_message(message): Creates a Modal from a message.
    add_item(item): Adds a UI component to the modal.
    clear_items(): Removes all UI components from the modal.
    interaction_check(interaction): Checks if the interaction is valid for the modal.
    is_dispatching(): Checks if the modal is currently dispatching events.
    is_finished(): Checks if the modal has been submitted or timed out.
    is_persistent(): Checks if the modal is persistent.
    on_error(interaction, error): Coroutine called when an error occurs.
    on_submit(interaction): Coroutine called when the modal is submitted.
    on_timeout(): Coroutine called when the modal times out.
    remove_item(item): Removes a UI component from the modal.
    stop(): Stops the modal from accepting further input.
    wait(): Waits for the modal to be finished.

  Example:
    content_copy```python
import discord
from discord import ui

class Questionnaire(ui.Modal, title='Questionnaire Response'):
    name = ui.TextInput(label='Name')
    answer = ui.TextInput(label='Answer', style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message(f'Thanks for your response, {self.name}!', ephemeral=True)
```

  async def on_submit(interaction, /):
    This function is a coroutine.
    Called when the modal is submitted.

    Parameters:
      interaction (Interaction): The interaction that submitted this modal.

  async def on_error(interaction, error, /):
    This function is a coroutine.
    
```

----------------------------------------

TITLE: Accessing 'name' Attribute in discord.py Objects
DESCRIPTION: This section details how to access the 'name' attribute for various objects within the discord.py library. The 'name' attribute typically represents the display name of the object. Examples include names of integrations, members, messages, roles, stickers, and more.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.IntegrationApplication.name
  - Returns the name of the integration application.

discord.Member.name
  - Returns the name of the member.

discord.MessageApplication.name
  - Returns the name of the message application.

discord.MessageInteraction.name
  - Returns the name of the message interaction.

discord.PartialAppInfo.name
  - Returns the name of the partial application information.

discord.PartialEmoji.name
  - Returns the name of the partial emoji.

discord.PartialIntegration.name
  - Returns the name of the partial integration.

discord.PartialInviteChannel.name
  - Returns the name of the partial invite channel.

discord.PartialInviteGuild.name
  - Returns the name of the partial invite guild.

discord.PartialWebhookChannel.name
  - Returns the name of the partial webhook channel.

discord.PartialWebhookGuild.name
  - Returns the name of the partial webhook guild.

discord.Role.name
  - Returns the name of the role.

discord.ScheduledEvent.name
  - Returns the name of the scheduled event.

discord.SKU.name
  - Returns the name of the SKU.

discord.SoundboardDefaultSound.name
  - Returns the name of the default soundboard sound.

discord.SoundboardSound.name
  - Returns the name of the soundboard sound.

discord.Spotify.name
  - Returns the name of the Spotify integration.

discord.StageChannel.name
  - Returns the name of the stage channel.

discord.StandardSticker.name
  - Returns the name of the standard sticker.

discord.Sticker.name
  - Returns the name of the sticker.

discord.StickerItem.name
  - Returns the name of the sticker item.

discord.StickerPack.name
  - Returns the name of the sticker pack.

discord.Streaming.name
  - Returns the name of the streaming activity.

discord.StreamIntegration.name
  - Returns the name of the stream integration.

discord.SyncWebhook.name
  - Returns the name of the sync webhook.

discord.Team.name
  - Returns the name of the team.

discord.TeamMember.name
  - Returns the name of the team member.

discord.Template.name
  - Returns the name of the template.

discord.TextChannel.name
  - Returns the name of the text channel.

discord.Thread.name
  - Returns the name of the thread.

discord.User.name
  - Returns the name of the user.

discord.VoiceChannel.name
  - Returns the name of the voice channel.

discord.Webhook.name
  - Returns the name of the webhook.

discord.Widget.name
  - Returns the name of the widget.

discord.WidgetChannel.name
  - Returns the name of the widget channel.

discord.WidgetMember.name
  - Returns the name of the widget member.
```

----------------------------------------

TITLE: MinimalHelpCommand Attributes
DESCRIPTION: Details attributes of MinimalHelpCommand for customizing help message behavior, including DM thresholds, category naming, and paginator usage.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
dm_help_threshold:
  Description: The number of characters the paginator must accumulate before getting DM’d to the user if dm_help is set to None. Defaults to 1000.
  Type: Optional[int]

no_category:
  Description: The string used when there is a command which does not belong to any category(cog). Useful for i18n. Defaults to "No Category".
  Type: str

paginator:
  Description: The paginator used to paginate the help command output.
  Type: Paginator
```

----------------------------------------

TITLE: discord.py API Documentation - discord.app_commands
DESCRIPTION: API documentation for discord.app_commands, covering Group, CommandSyncFailure, and CommandTree error handling.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
discord.app_commands:
  Group:
    __init__(*, name: str = None, description: str = None, guild: discord.Guild = None, guild_ids: Optional[List[int]] = None, parent: Optional[Group] = None)
      Constructs a Group. Fixes `KeyError` when no module is provided.

    on_error(interaction: discord.Interaction, error: Exception)
      An error handler for application commands within this group. Fixes detection of overridden methods.

  CommandSyncFailure(discord.app_commands.AppCommandError):
    Raised when an application command fails to sync. Fixes handling of other 400 status codes and formatting issues.

  CommandTree:
    on_error(interaction: discord.Interaction, error: Exception)
      An error handler for application commands. Fixes being called when a bound error handler is set.
```

----------------------------------------

TITLE: Discord Tasks Extension API Reference
DESCRIPTION: Documentation for the new discord.py extension that simplifies background task management.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
discord.ext.tasks
  A new extension dedicated to making background tasks easier.
  See API Reference: https://discordpy.readthedocs.io/en/stable/ext/tasks/index.html#ext-tasks-api
```

----------------------------------------

TITLE: Invite and User Information
DESCRIPTION: These methods are used to fetch invite details and user information. They map to fetch_invite and fetch_user methods respectively.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: APIDOC
CODE:
```
Client.fetch_invite(invite_code, **options)
  - Fetches an invite from Discord.
  - Parameters:
    - invite_code: The code of the invite to fetch.
    - **options: Additional options for fetching the invite.

Client.fetch_user(id)
  - Fetches a user from Discord.
  - Parameters:
    - id: The ID of the user to fetch.
```

----------------------------------------

TITLE: StoreChannelConverter for ext.commands
DESCRIPTION: Adds a new converter, `StoreChannelConverter`, to `discord.ext.commands` for easier conversion of arguments to `discord.StoreChannel` objects.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
from discord.ext import commands
from discord import StoreChannel

@commands.command()
async def send_to_store(ctx, channel: StoreChannel):
    await ctx.send(f'Sending message to store channel: {channel.name}')
```

----------------------------------------

TITLE: Discord Status and SKUType
DESCRIPTION: References for user presence statuses and SKU types.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Status.dnd
  - Represents the 'Do Not Disturb' status.

discord.Status.do_not_disturb
  - Alias for discord.Status.dnd.

discord.SKUType.durable
  - Represents a durable SKU type.
```

----------------------------------------

TITLE: Discord Help Command Methods
DESCRIPTION: This section covers methods for customizing and sending help messages within a bot's command framework. It includes sending general bot help, help for specific cogs, commands, and handling errors.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.HelpCommand.send_bot_help(mapping: Mapping[Optional[commands.Cog], List[commands.Command]]):
  - Sends the bot's help message.
  - Parameters:
    - mapping: A dictionary mapping cogs to their commands.

commands.HelpCommand.send_cog_help(cog: commands.Cog):
  - Sends help for a specific cog.
  - Parameters:
    - cog: The cog to get help for.

commands.HelpCommand.send_command_help(command: commands.Command):
  - Sends help for a specific command.
  - Parameters:
    - command: The command to get help for.

commands.HelpCommand.send_error_message(error: str):
  - Sends an error message.
  - Parameters:
    - error: The error message to send.

commands.HelpCommand.send_group_help(group: commands.Group):
  - Sends help for a command group.
  - Parameters:
    - group: The command group to get help for.

commands.Context.send_help(command: Optional[str] = None):
  - Sends help for a command or group.
  - Parameters:
    - command: The name of the command or group to get help for.

commands.DefaultHelpCommand.send_pages():
  - Sends the help pages for the default help command.

commands.MinimalHelpCommand.send_pages():
  - Sends the help pages for the minimal help command.
```

----------------------------------------

TITLE: discord.py HelpCommand API
DESCRIPTION: Provides API documentation for discord.py's HelpCommand class, detailing methods for sending help messages for the bot, specific cogs, and command groups. It outlines parameters, return values, and customization options.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.CommandError:
  The error that was raised.

HelpCommand.send_bot_help(mapping):
  Coroutine function to handle the bot command page in the help command.
  Called when the help command is invoked with no arguments.
  Does not return; message sending should be done within the method.
  Use get_destination() for message destination.
  Can be overridden for customization.
  Access invocation context via HelpCommand.context.
  Commands in mapping are not filtered; use filter_commands() for filtering.
  Parameters:
    mapping (Mapping[Optional[Cog], List[Command]]): A mapping of cogs to commands requested for help. Keys are Cogs or None, values are lists of Commands.

HelpCommand.send_cog_help(cog):
  Coroutine function to handle the cog page in the help command.
  Called when the help command is invoked with a cog argument.
  Does not return; message sending should be done within the method.
  Use get_destination() for message destination.
  Can be overridden for customization.
  Access invocation context via HelpCommand.context.
  Get cog commands via Cog.get_commands(). Commands are not filtered; use filter_commands() for filtering.
  Parameters:
    cog (Cog): The cog requested for help.

HelpCommand.send_group_help(group):
  Coroutine function to handle the group page in the help command.
  Called when the help command is invoked with a group argument.
```

----------------------------------------

TITLE: discord.ui.UserSelect API Documentation
DESCRIPTION: Provides detailed information about the UserSelect class in discord.py, including its constructor parameters, attributes, and methods. This documentation covers how to create and configure user selection menus for Discord interactions.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
UserSelect:
  __init__(custom_id: str = ..., placeholder: Optional[str] = None, min_values: int = 1, max_values: int = 1, disabled: bool = False, row: Optional[int] = None, default_values: Sequence[Snowflake] = ...)
    Represents a UI select menu with a list of predefined options with the current members of the guild.
    If this is sent a private message, it will only allow the user to select the client or themselves. Every selected option in a private message will resolve to a discord.User.
    New in version 2.1.

    Parameters:
      custom_id (str): The ID of the select menu that gets received during an interaction. If not given then one is generated for you. Can only be up to 100 characters.
      placeholder (Optional[str]): The placeholder text that is shown if nothing is selected, if any. Can only be up to 150 characters.
      min_values (int): The minimum number of items that must be chosen for this select menu. Defaults to 1 and must be between 0 and 25.
      max_values (int): The maximum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25.
      disabled (bool): Whether the select is disabled or not.
      default_values (Sequence[Snowflake]): A list of objects representing the users that should be selected by default. Number of items must be in range of min_values and max_values.
        New in version 2.4.
      row (Optional[int]): The relative row this select menu belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you’d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed).

  Attributes:
    type: The type of this component.
      Type: discord.ComponentType
    values: A list of members and users that have been selected by the user.
      If this is sent a private message, it will only allow the user to select the client or themselves. Every selected option in a private message will resolve to a discord.User.
      If invoked in a guild, the values will always resolve to discord.Member.

  Methods:
    callback: An asynchronous callback function that is called when the select menu is interacted with.
    interaction_check: An asynchronous function that checks if the interaction is valid for this component.
```

----------------------------------------

TITLE: discord.py v1.0 Context and Command Changes
DESCRIPTION: API documentation outlining changes in discord.py v1.0 related to Context and Commands. This includes removed helpers, changes in command parameters, and new attributes for command instances.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_v1

LANGUAGE: APIDOC
CODE:
```
APIDOC:
  Context:
    - Subclassing: `discord.ext.commands.Context` can now be subclassed.
    - `get_context(message, cls)`: Used with a custom context class.

  Removed Helpers:
    - `Bot.say` replaced by `Context.send()`
    - `Bot.upload` replaced by `Context.send()`
    - `Bot.whisper` replaced by `ctx.author.send`
    - `Bot.type` replaced by `Context.typing()` or `Context.trigger_typing()`
    - `Bot.reply` has no direct replacement.

  Command Changes:
    - `pass_context=True` removed.
    - `no_pm=True` replaced by `guild_only()` check.
    - `Bot.commands` and `Group.commands` changed from dict to set (no aliases).
    - Use `all_commands` to get the old dict behavior.

  Command Instance Attributes:
    - `signature`: Gets the command's signature.
    - `usage`: Overrides the default signature.
    - `root_parent`: Gets the root parent group of a subcommand.
```

----------------------------------------

TITLE: commands.Command.usage
DESCRIPTION: Details the usage string for a command, often including parameter placeholders. This helps users understand how to invoke the command correctly.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.Command.usage
  - Type: str | None
  - Description: The usage string for the command. Defaults to None.
```

----------------------------------------

TITLE: Discord API - Permissions
DESCRIPTION: Details various permission flags related to creating events, expressions, instant invites, and polls within Discord.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Permissions.create_events
  Whether the user can create events.

discord.Permissions.create_expressions
  Whether the user can create expressions.

discord.Permissions.create_instant_invite
  Whether the user can create instant invites.

discord.Permissions.create_polls
  Whether the user can create polls.
```

----------------------------------------

TITLE: Activity Platform and Assets
DESCRIPTION: Enhances the `Activity` and `Game` classes to include platform information and assets. This allows for richer display of user activities.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
Activity.platform
  The platform on which the activity is taking place (e.g., 'desktop', 'ios', 'android').
  Returns: str | None

Game.platform
  The platform on which the game is being played.
  Returns: str | None

Game.assets
  A dictionary of assets associated with the game activity (e.g., large and small images).
  Returns: dict | None
```

----------------------------------------

TITLE: Discord Paginator and Integration Summary
DESCRIPTION: Details on the Paginator suffix and summary for integration applications.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.Paginator.suffix:
  The suffix to append to each page of the paginator.

discord.IntegrationApplication.summary:
  A summary of the integration application.
```

----------------------------------------

TITLE: HelpCommand API Reference
DESCRIPTION: Provides a comprehensive overview of the HelpCommand class methods in discord.py, including their parameters, return types, and usage notes. This section covers methods for managing command checks, retrieving command signatures, and accessing internal command mappings.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.HelpCommand:
  verify_checks: bool | None
    Specifies if commands should have their Command.checks called and verified.
    If True, always calls Command.checks.
    If None, only calls Command.checks in a guild setting.
    If False, never calls Command.checks.
    Defaults to True.
    Changed in version 1.7.

  command_attrs: dict
    A dictionary of options to pass in for the construction of the help command.
    This allows you to change the command behaviour without actually changing the implementation of the command.
    The attributes will be the same as the ones passed in the Command constructor.

  add_check(_func_, /)
    Adds a check to the help command.
    New in version 1.4.
    Changed in version 2.0: `func` parameter is now positional-only.
    See also: The check() decorator
    Parameters:
      func: The function that will be used as a check.

  remove_check(_func_, /)
    Removes a check from the help command.
    This function is idempotent and will not raise an exception if the function is not in the command’s checks.
    New in version 1.4.
    Changed in version 2.0: `func` parameter is now positional-only.
    Parameters:
      func: The function to remove from the checks.

  get_bot_mapping() -> dict
    Retrieves the bot mapping passed to send_bot_help().

  invoked_with: Optional[str]
    Similar to Context.invoked_with except properly handles the case where Context.send_help() is used.
    If the help command was used regularly then this returns the Context.invoked_with attribute.
    Otherwise, if it the help command was called using Context.send_help() then it returns the internal command name of the help command.
    Returns: The command name that triggered this invocation.
    Return type: Optional[str]

  get_command_signature(_command_, /) -> str
    Retrieves the signature portion of the help page.
    Changed in version 2.0: `command` parameter is now positional-only.
    Parameters:
      command: The command to get the signature for.
```

----------------------------------------

TITLE: ColourConverter API Documentation
DESCRIPTION: Details the ColourConverter class, its convert method, accepted colour formats, and exceptions raised during conversion. Includes changes across versions.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
class discord.ext.commands.ColourConverter(*args, **kwargs):
    """Converts to a [`Colour`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Colour "discord.Colour").

    Changed in version 1.5: Add an alias named ColorConverter
    The following formats are accepted:
      * `0x<hex>`
      * `#<hex>`
      * `0x#<hex>`
      * `rgb(<number>, <number>, <number>)`
      * Any of the `classmethod` in [`Colour`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Colour "discord.Colour")

    Like CSS, `<number>` can be either 0-255 or 0-100% and `<hex>` can be either a 6 digit hex number or a 3 digit hex shortcut (e.g. #fff).
    Changed in version 1.5: Raise [`BadColourArgument`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.BadColourArgument "discord.ext.commands.BadColourArgument") instead of generic [`BadArgument`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.BadArgument "discord.ext.commands.BadArgument")
    Changed in version 1.7: Added support for `rgb` function and 3-digit hex shortcuts

    async convert(ctx, argument):
        """This function is a [_coroutine_](https://docs.python.org/3/library/asyncio-task.html#coroutine).
        The method to override to do conversion logic.
        If an error is found while converting, it is recommended to raise a [`CommandError`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.CommandError "discord.ext.commands.CommandError") derived exception as it will properly propagate to the error handlers.
        Note that if this method is called manually, [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "(in Python v3.13)") should be caught to handle the cases where a subclass does not explicitly inherit from [`CommandError`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.CommandError "discord.ext.commands.CommandError").

        Parameters:
          * ctx ([`Context`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Context "discord.ext.commands.Context")) – The invocation context that the argument is being used in.
          * argument ([`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.13)")) – The argument that is being converted.

        Raises:
          * [**CommandError**](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.CommandError "discord.ext.commands.CommandError") – A generic exception occurred when converting the argument.
          * [**BadColourArgument**](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.BadColourArgument "discord.ext.commands.BadColourArgument") – The converter failed to convert the argument.
        """
```

----------------------------------------

TITLE: Discord API - Create Integration
DESCRIPTION: Allows creating integrations for a guild.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Guild.create_integration(type: str, ...)
  Creates an integration for the guild.
  Parameters:
    type: The type of integration to create.
```

----------------------------------------

TITLE: discord.py Commands Extension Methods
DESCRIPTION: This section covers methods related to the commands extension, including converters, cog management, and help command functionalities.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.GameConverter
  - A converter for game-related inputs.

commands.Bot.get_all_channels()
  - Returns an iterator of all channels the bot can access.
  - Returns: An iterator of discord.abc.GuildChannel or discord.DMChannel objects.

commands.Bot.get_all_members()
  - Returns an iterator of all members in guilds the bot is in.
  - Returns: An iterator of discord.Member objects.

commands.Bot.get_channel(channel_id)
  - Gets a channel from the bot's cache.
  - Parameters:
    - channel_id: The ID of the channel to retrieve.
  - Returns: The found channel or None if not found.

commands.Cog.get_app_commands()
  - Returns a list of application commands associated with the cog.
  - Returns: A list of discord.app_commands.Command objects.

commands.HelpCommand.get_bot_mapping()
  - Gets a mapping of cogs to their commands.
  - Returns: A dictionary mapping cogs to lists of commands.

commands.Bot.get_cog(name)
  - Gets a cog by its name.
  - Parameters:
    - name: The name of the cog to retrieve.
  - Returns: The cog object or None if not found.

commands.Bot.get_command(name)
  - Gets a command by its name.
  - Parameters:
    - name: The name of the command to retrieve.
  - Returns: The command object or None if not found.

commands.Group.get_command(name)
  - Gets a subcommand by its name from a group.
  - Parameters:
    - name: The name of the subcommand to retrieve.
  - Returns: The command object or None if not found.

commands.GroupMixin.get_command(name)
  - Gets a command by its name from a group mixin.
  - Parameters:
    - name: The name of the command to retrieve.
  - Returns: The command object or None if not found.

commands.HybridGroup.get_command(name)
  - Gets a command by its name from a hybrid group.
  - Parameters:
    - name: The name of the command to retrieve.
  - Returns: The command object or None if not found.

commands.DefaultHelpCommand.get_command_signature()
  - Gets the signature of a command.
  - Returns: A string representing the command signature.

commands.HelpCommand.get_command_signature()
  - Gets the signature of a command.
  - Returns: A string representing the command signature.

commands.MinimalHelpCommand.get_command_signature()
  - Gets the signature of a command.
  - Returns: A string representing the command signature.
```

----------------------------------------

TITLE: discord.ui.Button Class Documentation
DESCRIPTION: Provides comprehensive documentation for the discord.ui.Button class, detailing its constructor, attributes, and methods. This includes information on button styling, labeling, custom IDs, URLs, and interaction handling.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
discord.ui.Button:
  __init__(style=<ButtonStyle.secondary: 2>, label=None, disabled=False, custom_id=None, url=None, emoji=None, row=None, sku_id=None)
    Represents a UI button for Discord interactions.
    New in version 2.0.

    Parameters:
      style (discord.ButtonStyle): The style of the button.
      custom_id (Optional[str]): The ID of the button for interactions. Max 100 characters. Not applicable for URL buttons.
      url (Optional[str]): The URL the button links to. Cannot be combined with label, emoji, or custom_id if sku_id is used.
      disabled (bool): Whether the button is disabled.
      label (Optional[str]): The button's label. Max 80 characters.
      emoji (Optional[Union[PartialEmoji, Emoji, str]]): The button's emoji.
      row (Optional[int]): The relative row (0-4) for the button's position. Defaults to automatic arrangement.
      sku_id (Optional[int]): The SKU ID for the button. Cannot be combined with url, label, emoji, or custom_id.
        New in version 2.4.

    Attributes:
      custom_id (Optional[str]): The ID of the button.
      disabled (bool): Whether the button is disabled.
      emoji (Optional[Union[PartialEmoji, Emoji, str]]): The button's emoji.
      label (Optional[str]): The button's label.
      sku_id (Optional[int]): The SKU ID of the button.
      style (discord.ButtonStyle): The style of the button.
      url (Optional[str]): The URL the button links to.
      view (View): The view this button belongs to.

    Methods:
      async callback(): Handles the button's interaction callback.
      async interaction_check(interaction): Checks if the interaction is valid for this button.
```

----------------------------------------

TITLE: discord.py App Command Types
DESCRIPTION: Enumerates the different types of application commands available in Discord.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.AppCommand.type
  - The type of the application command.

discord.app_commands.AppCommandChannel.type
  - The type of channel associated with an app command.

discord.app_commands.AppCommandGroup.type
  - The type of group for application commands.

discord.app_commands.AppCommandPermissions.type
  - The type of entity for app command permissions.

discord.app_commands.AppCommandThread.type
  - The type of thread associated with an app command.

discord.app_commands.Argument.type
  - The type of an argument in an application command.

discord.app_commands.ContextMenu.type
  - The type of a context menu command.

discord.app_commands.Parameter.type
  - The type of a parameter in an application command.

discord.app_commands.Transformer.type
  - The type identifier for a transformer.
```

----------------------------------------

TITLE: discord.py API Documentation
DESCRIPTION: API documentation for discord.py, including exceptions, locales, and user flags.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.HTTPException:
  A base exception for all errors raised by the HTTP API.
  This exception is raised when the Discord API returns an error status code.
  Attributes:
    status (int): The HTTP status code returned by the API.
    code (int): The Discord error code.
    text (str): The error message text returned by the API.
    response (aiohttp.ClientResponse): The aiohttp client response object.

discord.Locale.hungarian:
  Represents the Hungarian locale.
  This is a constant within the discord.Locale enum.

discord.PublicUserFlags.hypesquad:
  Represents the HypeSquad flag for public user profiles.

discord.UserFlags.hypesquad:
  Represents the HypeSquad flag for user profiles.

discord.PublicUserFlags.hypesquad_balance:
  Represents the HypeSquad Balance flag for public user profiles.

discord.UserFlags.hypesquad_balance:
  Represents the HypeSquad Balance flag for user profiles.

discord.PublicUserFlags.hypesquad_bravery:
  Represents the HypeSquad Bravery flag for public user profiles.

discord.UserFlags.hypesquad_bravery:
  Represents the HypeSquad Bravery flag for user profiles.

discord.PublicUserFlags.hypesquad_brilliance:
  Represents the HypeSquad Brilliance flag for public user profiles.

discord.UserFlags.hypesquad_brilliance:
  Represents the HypeSquad Brilliance flag for user profiles.
```

----------------------------------------

TITLE: Discord API - Create Stage Instance
DESCRIPTION: Enables the creation of a stage instance for a stage channel.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.StageChannel.create_instance(topic: str, ...)
  Creates a stage instance for the stage channel.
  Parameters:
    topic: The topic of the stage instance.
```

----------------------------------------

TITLE: AppCommand Attributes and Methods
DESCRIPTION: This section details the attributes and methods available for the AppCommand class in discord.py. It covers properties like ID, name, description, and methods for command management.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
AppCommand:
  Represents an application command (Slash Command or Context Menu Command).

  Attributes:
    id (int): The application command's ID.
    application_id (int): The application command's application's ID.
    type (AppCommandType): The application command's type.
    name (str): The application command's name.
    description (str): The application command's description.
    name_localizations (dict): The localised names of the application command.
    description_localizations (dict): The localised descriptions of the application command.
    default_member_permissions (Permissions | None): The default permissions for members to use the command.
    nsfw (bool): Whether the command is NSFW.
    allowed_contexts (list[AppCommandContext] | None): The contexts in which the command is allowed.
    allowed_installs (list[AppCommandInstall] | None): The installs in which the command is allowed.
    dm_permission (bool | None): Whether the command can be used in DMs.
    guild_id (int | None): The ID of the guild the command belongs to, if any.
    guild (Guild | None): The guild the command belongs to, if any.

  Methods:
    async delete(): Deletes the application command.
    async edit(**kwargs): Edits the application command.
    async fetch_permissions(): Fetches the application command's permissions.

  Special Methods:
    __eq__(other): Checks if two application commands are equal.
    __ne__(other): Checks if two application commands are not equal.
    __hash__(): Returns the application command's hash.
    __str__(): Returns the application command's name.
```

----------------------------------------

TITLE: Discord Command Context and Help
DESCRIPTION: Methods related to command handling, including subcommand not found errors and subcommand passing in context.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.HelpCommand.subcommand_not_found(command, error):
  Called when a subcommand is not found.
  Parameters:
    command: The command that was not found.
    error: The error encountered.

commands.Context.subcommand_passed(command):
  Called when a subcommand is successfully passed.
  Parameters:
    command: The subcommand that was passed.
```

----------------------------------------

TITLE: discord.ext.commands Context and Event Handlers
DESCRIPTION: Utilities and event handlers for the commands extension in discord.py. This includes context-related decorators and event hooks for command lifecycle.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.discord.ext.commands.Author
  - Description: Represents the author of a command invocation.

discord.discord.ext.commands.CurrentChannel
  - Description: Represents the channel where the command was invoked.

discord.discord.ext.commands.CurrentGuild
  - Description: Represents the guild where the command was invoked.

discord.discord.ext.commands.on_command()
  - Description: An event that is called when a command is invoked.

discord.discord.ext.commands.on_command_completion()
  - Description: An event that is called when a command finishes execution successfully.

discord.discord.ext.commands.on_command_error()
  - Description: An event that is called when an error occurs during command execution.
```

----------------------------------------

TITLE: AppInfo Icon and Cover Image URLs
DESCRIPTION: Adds support for retrieving icon and cover image URLs for an application. These methods provide formatted URLs for application assets.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
app_info.icon_url_as()
app_info.cover_image_url_as()
```

----------------------------------------

TITLE: Fetch Discord Template
DESCRIPTION: Fetches a server template. This functionality is available for discord.Client and commands.Bot.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Client.fetch_template(code: str)
  Fetches a server template using its code.
  Parameters:
    code: The template code.
  Returns: A Template object.

commands.Bot.fetch_template(code: str)
  Fetches a server template using its code for the bot.
  Parameters:
    code: The template code.
  Returns: A Template object.
```

----------------------------------------

TITLE: Discord.py Command API Reference
DESCRIPTION: Provides an overview of key methods and decorators within the discord.py commands extension, including pre-invoke hooks, error handling, and check management.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.Command

  Methods:
    before_invoke(coro, /)
      Registers a coroutine as a pre-invoke hook.
      Parameters:
        coro (coroutine): The coroutine to register.
      Raises:
        TypeError: If coro is not a coroutine.

    error(coro, /)
      Registers a coroutine as a local error handler.
      Parameters:
        coro (coroutine): The coroutine to register.
      Raises:
        TypeError: If coro is not a coroutine.

    add_check(func, /)
      Adds a check to the command.
      Parameters:
        func (callable): The function to use as a check.

    remove_check(func, /)
      Removes a check from the command.
      Parameters:
        func (callable): The function to remove from the checks.

    update(**kwargs)
      Updates Command instance with updated attributes.
      Parameters:
        **kwargs: Attributes to update (e.g., name, help).
```

----------------------------------------

TITLE: GroupMixin API Documentation
DESCRIPTION: Provides a comprehensive overview of the GroupMixin class in discord.py, detailing its attributes and methods for command management. This includes how to add, retrieve, and remove commands, as well as the use of decorators for command and group creation.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
class discord.ext.commands.GroupMixin:
    """A mixin that implements common functionality for classes that behave similar to Group and are allowed to register commands."""

    attributes:
        all_commands (dict): A mapping of command name to Command objects.
        case_insensitive (bool): Whether the commands should be case insensitive. Defaults to False.
        commands (Set[Command]): A unique set of commands without aliases that are registered.

    methods:
        add_command(command, /):
            Adds a Command into the internal list of commands.

        get_command(name):
            Retrieves a command from the internal list.

        remove_command(name):
            Removes a command from the internal list.

        walk_commands():
            An iterator that walks through all the commands, yielding them.

    decorators:
        @command(*args, **kwargs):
            A shortcut decorator that invokes command() and adds it to the internal command list via add_command().
            Returns a decorator that converts the provided method into a Command, adds it to the bot, then returns it.

        @group(*args, **kwargs):
            A shortcut decorator that invokes group() and adds it to the internal command list via add_command().
            Returns a decorator that converts the provided method into a Group, adds it to the bot, then returns it.
```

----------------------------------------

TITLE: discord.py Command Class API
DESCRIPTION: Detailed API documentation for the discord.ext.commands.Command class. This includes its attributes for command configuration and metadata, as well as its methods for managing checks, cooldowns, and execution flow.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Command Class:
  Attributes:
    aliases: List[str]
      A list of alternative names for the command.
    brief: Optional[str]
      A short description of the command, often used in help messages.
    callback: Callable
      The actual function that will be executed when the command is invoked.
    checks: List[Callable]
      A list of functions that must return true for the command to be executed.
    clean_params: Dict[str, inspect.Parameter]
      A dictionary of the command's parameters after cleaning.
    cog: Optional[Cog]
      The cog instance this command belongs to, if any.
    cog_name: Optional[str]
      The name of the cog this command belongs to, if any.
    cooldown: Optional[Cooldown]
      The cooldown strategy applied to the command.
    cooldown_after_parsing: bool
      Whether cooldowns should be applied after argument parsing.
    description: Optional[str]
      A detailed description of the command.
    enabled: bool
      Whether the command is currently enabled.
    extras: Dict[Any, Any]
      A dictionary for storing arbitrary data related to the command.
    full_parent_name: str
      The fully qualified name of the command, including parent group names.
    help: Optional[str]
      The help text for the command, displayed in help messages.
    hidden: bool
      Whether the command should be hidden from help commands.
    ignore_extra: bool
      Whether to ignore extra arguments passed to the command.
    invoked_subcommand: Optional[Command]
      The subcommand that was invoked, if this is a group command.
    name: str
      The base name of the command.
    parent: Optional[Group]
      The parent group of this command, if any.
    parents: List[Group]
      A list of parent groups for this command.
    qualified_name: str
      The qualified name of the command, similar to full_parent_name.
    require_var_positional: bool
      Whether the command requires a variable positional argument.
    rest_is_raw: bool
      Whether the rest of the arguments should be treated as raw strings.
    root_parent: Optional[Group]
      The ultimate parent group of this command, if nested.
    short_doc: str
      A short, automatically generated documentation string.
    signature: str
      A string representation of the command's signature.
    usage: Optional[str]
      A string indicating how to use the command, often with placeholders.

  Methods:
    async __call__(*args, **kwargs) -> Any
      Calls the command's callback with the provided arguments.

    add_check(predicate: Callable) -> Command
      Adds a check to the command. Returns the command instance for chaining.

    @after_invoke(hook: Callable)
      Decorator to register a function to be called after the command is invoked.

    @before_invoke(hook: Callable)
      Decorator to register a function to be called before the command is invoked.

    async can_run(ctx: Context, *, call_once: bool = False) -> bool
      Checks if the command can be run by the given context.

    copy() -> Command
      Creates a copy of the command.

    @error(handler: Callable)
      Decorator to register an error handler for the command.

    get_cooldown_retry_after(ctx: Context) -> Optional[float]
      Gets the remaining cooldown time for the command in the given context.

    has_error_handler() -> bool
      Checks if the command has an error handler registered.

    is_on_cooldown(ctx: Context) -> bool
      Checks if the command is currently on cooldown for the given context.
```

----------------------------------------

TITLE: discord.py Commands API Reference
DESCRIPTION: Provides details on discord.py's commands extension decorators and their parameters.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.cooldown(rate: int, per: float, type: BucketType = BucketType.default)
    Applies a cooldown to a command.
    Parameters:
      rate: The number of times the command can be used within the specified period.
      per: The time period in seconds for the cooldown.
      type: The BucketType to base the cooldown on (e.g., guild, user, channel).

discord.ext.commands.max_concurrency(number: int, per: BucketType = BucketType.default, *, wait: bool = False)
    Limits the number of concurrent invocations of a command.
    Parameters:
      number: The maximum number of concurrent invocations allowed.
      per: The BucketType to base the concurrency limit on.
      wait: If True, waits for the concurrency limit to free up. If False, raises MaxConcurrencyReached.
    
    Raises:
      MaxConcurrencyReached: If wait is False and the concurrency limit is reached.

discord.ext.commands.before_invoke(coro)
    Registers a coroutine to be executed before a command is invoked.
    Parameters:
      coro: The coroutine function to execute before the command.
    
    Example:
    async def check_permissions(ctx):
        if not ctx.author.guild_permissions.manage_messages:
            raise commands.MissingPermissions(['manage_messages'])

    @bot.command()
    @commands.before_invoke(check_permissions)
    async def clear(ctx, amount: int):
        await ctx.channel.purge(limit=amount + 1)
        await ctx.send(f'Cleared {amount} messages.')
```

----------------------------------------

TITLE: Discord.py Command Registration and Management
DESCRIPTION: Details on how to register commands using decorators or programmatically, and how to manage them within a command group. Includes information on error handling for registration conflicts and type mismatches.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
add_command(command)
  Adds a command to the internal list.
  This is usually not called directly; use the `command()` or `group()` decorators.
  Parameters:
    command (Command): The command to add.
  Raises:
    CommandRegistrationError: If the command or its alias is already registered.
    TypeError: If the provided argument is not a subclass of Command.
  Changed in version 1.4: Raises CommandRegistrationError instead of ClientException.
  Changed in version 2.0: `command` parameter is now positional-only.

remove_command(name)
  Removes a Command from the internal list of commands.
  Can also be used to remove aliases.
  Parameters:
    name (str): The name of the command to remove.
  Returns:
    Optional[Command]: The removed command, or None if the name is invalid.
  Changed in version 2.0: `name` parameter is now positional-only.

walk_commands()
  An iterator that recursively walks through all commands and subcommands.
  Yields:
    Union[Command, Group]: A command or group from the internal list.
  Changed in version 1.4: Duplicates due to aliases are no longer returned.

get_command(name)
  Retrieves a Command from the internal list of commands.
  Can also be used to retrieve aliases.
  Parameters:
    name (str): The name of the command to get. Can be fully qualified (e.g., 'foo bar').
  Returns:
    Optional[Command]: The requested command, or None if not found.
  Changed in version 2.0: `name` parameter is now positional-only.
```

----------------------------------------

TITLE: discord.py API Documentation: Converter Protocol
DESCRIPTION: Details on the `discord.ext.commands.Converter` class, which has been updated to be a generic runtime protocol. This change impacts custom converter implementations and type hinting.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.Converter:
  A runtime-checkable typing.Protocol.
  Is now a typing.Generic, allowing for more accurate type hints.
  User-created classes inheriting from Converter may need to adjust their metaclass definition.
```

----------------------------------------

TITLE: discord.ui.Modal API Reference
DESCRIPTION: Provides a comprehensive overview of the discord.ui.Modal class methods and properties, including their parameters, return types, and potential exceptions.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
discord.ui.Modal:
  __init__(title: str = discord.utils.MISSING, timeout: Optional[float] = None, custom_id: str = discord.utils.MISSING)
    Initializes a Modal.
    Parameters:
      title (str): The title of the modal. Defaults to discord.utils.MISSING.
      timeout (Optional[float]): The timeout for the modal in seconds. Defaults to None.
      custom_id (str): The custom ID for the modal. Defaults to discord.utils.MISSING.

  on_error(interaction: discord.Interaction, error: Exception):
    Callback for when a modal submission fails.
    Parameters:
      interaction (discord.Interaction): The interaction that led to the failure.
      error (Exception): The exception that was raised.

  add_item(item: discord.ui.Item):
    Adds an item to the modal.
    Parameters:
      item (discord.ui.Item): The item to add.
    Returns: self (for fluent chaining).
    Raises:
      TypeError: If an Item was not passed.
      ValueError: If the maximum number of children is exceeded or the row is full.

  children: List[discord.ui.Item]
    The list of items attached to the modal.

  clear_items():
    Removes all items from the modal.
    Returns: self (for fluent chaining).

  from_message(message: discord.Message, /, *, timeout: Optional[float] = 180.0) -> discord.ui.View:
    Converts a message's components into a View.
    Parameters:
      message (discord.Message): The message with components to convert.
      timeout (Optional[float]): The timeout for the converted view.
    Returns:
      discord.ui.View: The converted view.

  interaction_check(interaction: discord.Interaction, /) -> bool:
    Callback to check if the view should process item callbacks for the interaction.
    Parameters:
      interaction (discord.Interaction): The interaction that occurred.
    Returns:
      bool: Whether the view children’s callbacks should be called.

  is_dispatching() -> bool:
    Checks if the modal is currently dispatching events.
    Returns:
      bool: True if dispatching, False otherwise.
```

----------------------------------------

TITLE: discordpy Application Commands Structure
DESCRIPTION: Details the structure for defining and managing application commands, including command trees, command groups, and permissions.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
CommandTree:
  guild: Optional[Guild]
  auto_sync: bool

Commands:
  name: str
  description: str
  options: Optional[list[Argument]]
  guild_only: Optional[bool]
  nsfw: Optional[bool]
  auto_complete: Optional[bool]

AppCommandGroup:
  id: int
  application_id: int
  guild_id: Optional[int]
  name: str
  description: str
  options: Optional[list[AppCommand]]
  default_permission: Optional[bool]
  default_member_permissions: Optional[int]
  type: int
  dm_permission: Optional[bool]
```

----------------------------------------

TITLE: Discord Mention Permissions and Settings
DESCRIPTION: Details attributes related to mentioning everyone, mention limits, and mention raid protection within Discord's moderation and permission systems. Also covers mentionable roles and select components.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Message.mention_everyone
  - Boolean indicating if the message mentions everyone.

discord.Permissions.mention_everyone
  - Boolean indicating if the user has permission to mention everyone.

discord.AutoModTrigger.mention_limit
  - The maximum number of mentions allowed in a message.

discord.AutoModTrigger.mention_raid_protection
  - Boolean indicating if mention raid protection is enabled.

discord.AutoModRuleTriggerType.mention_spam
  - Represents the trigger type for mention spam.

discord.AppCommandOptionType.mentionable
  - Represents the option type for mentionable users or roles.

discord.AuditLogDiff.mentionable
  - Shows changes to the mentionable status of a role.

discord.Role.mentionable
  - Boolean indicating if the role is mentionable.

discord.ComponentType.mentionable_select
  - Represents a select menu component for mentionable entities.

discord.ui.MentionableSelect
  - A UI component for selecting mentionable users or roles.
```

----------------------------------------

TITLE: discord.py API Documentation: Bot Extension Methods
DESCRIPTION: Documentation for asynchronous extension and cog management methods in discord.py's `commands.Bot`. These methods now require awaiting to reflect the asynchronous nature of extension handling.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating

LANGUAGE: APIDOC
CODE:
```
discord.ext.commands.Bot:
  load_extension(name: str) -> None
    Loads an extension given its name.
    Must be awaited.

  unload_extension(name: str) -> None
    Unloads an extension given its name.
    Must be awaited.

  reload_extension(name: str) -> None
    Reloads an extension given its name.
    Must be awaited.

  add_cog(cog: Cog) -> None
    Adds a cog to the bot.
    Must be awaited.

  remove_cog(name: str) -> None
    Removes a cog from the bot.
    Must be awaited.
```

----------------------------------------

TITLE: discord.py API Documentation
DESCRIPTION: This section consolidates various API endpoints and methods from the discord.py library. It covers functionalities related to guild management, member actions, channel interactions, and message properties. The documentation includes details on methods like `kick()`, `join()`, and attributes such as `jump_url`, `key`, and `kwargs`.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.ShardInfo.is_ws_ratelimited()
  Checks if the WebSocket connection is rate-limited.

discord.Locale.italian
  Represents the Italian locale.

discord.ui.Item
  Represents an item in a UI component.

discord.ui.DynamicItem.item
  Represents a dynamic item in a UI component.

discord.Locale.japanese
  Represents the Japanese locale.

discord.Thread.join()
  Joins a thread.

discord.SystemChannelFlags.join_notification_replies
  Flag for join notification replies.

discord.SystemChannelFlags.join_notifications
  Flag for join notifications.

discord.MemberCacheFlags.joined
  Flag for joined members cache.

discord.Member.joined_at
  The timestamp when the member joined the guild.

discord.ThreadMember.joined_at
  The timestamp when the member joined the thread.

discord.Widget.json_url
  The URL for the guild widget in JSON format.

discord.abc.GuildChannel.jump_url
  The URL to jump to the channel.

discord.CategoryChannel.jump_url
  The URL to jump to the category channel.

discord.DMChannel.jump_url
  The URL to jump to the DM channel.

discord.ForumChannel.jump_url
  The URL to jump to the forum channel.

discord.GroupChannel.jump_url
  The URL to jump to the group channel.

discord.InteractionMessage.jump_url
  The URL to jump to the interaction message.

discord.Message.jump_url
  The URL to jump to the message.

discord.MessageReference.jump_url
  The URL to jump to the referenced message.

discord.PartialMessage.jump_url
  The URL to jump to the partial message.

discord.PartialMessageable.jump_url
  The URL to jump to a messageable entity.

discord.StageChannel.jump_url
  The URL to jump to the stage channel.

discord.TextChannel.jump_url
  The URL to jump to the text channel.

discord.Thread.jump_url
  The URL to jump to the thread.

discord.VoiceChannel.jump_url
  The URL to jump to the voice channel.

discord.WebhookMessage.jump_url
  The URL to jump to the webhook message.

discord.Asset.key
  The key for the asset.

discord.AutoModRuleTriggerType.keyword
  Trigger type for keyword matching.

discord.AutoModTrigger.keyword_filter
  The keyword filter for AutoMod.

discord.AutoModRuleTriggerType.keyword_preset
  Trigger type for keyword presets.

discord.AuditLogAction.kick
  Represents the kick action in the audit log.

discord.ExpireBehaviour.kick
  Behavior to kick members.

discord.Guild.kick(member, reason=None)
  Kicks a member from the guild.
  - Parameters:
    - member: The member to kick.
    - reason: The reason for the kick (optional).

discord.Member.kick(reason=None)
  Kicks the member from the guild.
  - Parameters:
    - reason: The reason for the kick (optional).

discord.Permissions.kick_members
  Permission to kick members.

commands.Parameter.kind
  The kind of parameter.

discord.Locale.korean
  Represents the Korean locale.

commands.Context.kwargs
  A dictionary of keyword arguments passed to the command.
```

----------------------------------------

TITLE: API Documentation for discord.py
DESCRIPTION: This section details various methods and attributes available in the discord.py library for interacting with the Discord API. It covers functionalities like managing invites, server settings, member status, and handling asynchronous operations.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
Client.delete_invite(code: str)
  - Deletes an invite.
  - Parameters:
    - code: The invite code to delete.

Client.wait_for_message(**options)
  - Waits for a message to be sent.
  - Options:
    - predicate: A callable that returns True if the message is the one we want.
    - timeout: The maximum time to wait.

Client.wait_until_ready()
  - Waits until the client is ready.

Client.wait_until_login()
  - Waits until the client has logged in.

Client.get_bans(guild: Guild)
  - Returns a list of bans for the given guild.
  - Parameters:
    - guild: The guild to get bans from.

Client.invites_from(guild: Guild)
  - Returns a list of invites for the given guild.
  - Parameters:
    - guild: The guild to get invites from.

Server.me
  - Returns the Member representation of the client user.

Message.clean_content()
  - Returns a text version of the message content with mentions replaced by names.

Client.ban(member: Member, delete_message_days: int = 0)
  - Bans a member from the guild.
  - Parameters:
    - member: The member to ban.
    - delete_message_days: The number of days to delete messages for (0-7).

Client.change_status(game: discord.Game = None)
  - Changes the client's status.
  - Parameters:
    - game: The game to set as status.

Member.permissions_in(channel: TextChannel)
  - Returns the permissions of the member in the given channel.
  - Parameters:
    - channel: The channel to check permissions in.

Client.move_member(member: Member, channel: VoiceChannel)
  - Moves a member to a different voice channel.
  - Parameters:
    - member: The member to move.
    - channel: The voice channel to move the member to.

Client.create_server(**options)
  - Creates a new server.

Client.edit_server(server: Server, **options)
  - Edits an existing server.
  - Parameters:
    - server: The server to edit.

Client.server_voice_state(member: Member, mute: bool = False, deafen: bool = False)
  - Mutes or deafens a member in a server.
  - Parameters:
    - member: The member to modify.
    - mute: Whether to mute the member.
    - deafen: Whether to deafen the member.

discord.Forbidden
  - Exception raised when the client does not have permission to perform an action.

discord.NotFound
  - Exception raised when a resource is not found.

discord.version_info
  - A named tuple containing the version information of the library.

discord.utils.get(**attrs)
  - Returns the first item in an iterable that matches the given attributes.

discord.Game(name: str)
  - Represents a game with custom text.

Message.nonce
  - The nonce of the message.

on_member_ban(guild: Guild, user: User)
  - Event triggered when a member is banned.

on_member_unban(guild: Guild, user: User)
  - Event triggered when a member is unbanned.
```

----------------------------------------

TITLE: Invite Create and Delete Events
DESCRIPTION: Adds support for the `on_invite_create()` and `on_invite_delete()` events.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
on_invite_create()
on_invite_delete()
```

----------------------------------------

TITLE: discord.app_commands.ContextMenu Callback
DESCRIPTION: Documentation for the callback property of the ContextMenu class, which represents the actual function executed when the context menu command is invoked.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
_property_ callback:
  The callback function for the context menu command.
```

----------------------------------------

TITLE: Discord API - Create Entitlement
DESCRIPTION: Allows creating entitlements for applications. This is available for both discord.Client and commands.Bot.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Client.create_entitlement(sku_id: int, ...)
  Creates an entitlement for a user.
  Parameters:
    sku_id: The SKU ID of the entitlement.

commands.Bot.create_entitlement(sku_id: int, ...)
  Creates an entitlement for a user.
  Parameters:
    sku_id: The SKU ID of the entitlement.
```

----------------------------------------

TITLE: discord.py API Documentation
DESCRIPTION: API documentation for discord.py, including methods for sending messages, managing reactions, and handling permissions.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
discord.on_ready()
  - Called when the client becomes ready.
  - Related to: discord.on_resumed()

discord.on_resumed()
  - Called when the client has resumed a connection.
  - Related to: discord.on_ready()

discord.Member
  - Represents a member of a Discord server.

discord.Embed
  - Represents an embeddable object for messages.

Client.send_message(channel, content=None, *, embed=None)
  - Sends a message to a channel.
  - Parameters:
    - channel: The channel to send the message to.
    - content: The text content of the message.
    - embed: An Embed object to include in the message.
  - Example:
    ```python
    await client.send_message(channel, embed=my_embed)
    ```

Client.edit_message(message, content=None, *, embed=None)
  - Edits an existing message.
  - Parameters:
    - message: The message to edit.
    - content: The new text content of the message.
    - embed: An Embed object to update the message with.

Client.clear_reactions(message)
  - Removes all reactions from a message.
  - Parameters:
    - message: The message to clear reactions from.

discord.on_reaction_clear(message)
  - Called when all reactions are removed from a message.
  - Related to: Client.clear_reactions()

discord.Permissions.update(**perms)
  - Updates multiple permission fields at once.
  - Parameters:
    - **perms: Keyword arguments for permissions to update (e.g., read_messages=True).
  - Example:
    ```python
    p.update(read_messages=True, send_messages=False)
    ```

discord.PermissionOverwrite.update(**perms)
  - Updates multiple permission overwrite fields at once.
  - Parameters:
    - **perms: Keyword arguments for permission overwrites to update.
  - Example:
    ```python
    po.update(view_channel=False)
    ```

discord.PermissionOverwrite.is_empty()
  - Checks if the PermissionOverwrite object has no explicit overwrites.
  - Returns: True if empty, False otherwise.

Client.wait_for_reaction(message, emoji=None, user=None, timeout=None)
  - Waits for a reaction to be added or removed from a message.
  - Parameters:
    - message: The message to wait for reactions on.
    - emoji: The specific emoji to wait for (optional).
    - user: The specific user to wait for reactions from (optional).
    - timeout: The maximum time in seconds to wait (optional).
  - Returns: A namedtuple with 'reaction' and 'user' attributes, or None if timed out.
  - Example:
    ```python
    result = await client.wait_for_reaction(message)
    if result:
        print(f"User {result.user} reacted with {result.reaction}")
    ```

Reaction
  - Represents a reaction to a message.
```

----------------------------------------

TITLE: Discord API: Create Channels
DESCRIPTION: Methods for creating various types of channels.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.CategoryChannel.create_stage_channel(name, *, position=0, topic=None, bitrate=64000, user_limit=0, reason=None, **fields)
  - Creates a Stage Channel within a CategoryChannel.
  - Parameters:
    - name (str): The name of the Stage Channel.
    - position (int, optional): The position of the channel.
    - topic (str, optional): The topic of the Stage Channel.
    - bitrate (int, optional): The bitrate of the Stage Channel.
    - user_limit (int, optional): The user limit for the Stage Channel.
    - reason (str, optional): The reason for creating the channel.
    - **fields: Additional fields for the channel.

discord.Guild.create_stage_channel(name, *, position=0, topic=None, bitrate=64000, user_limit=0, reason=None, **fields)
  - Creates a Stage Channel in the guild.
  - Parameters:
    - name (str): The name of the Stage Channel.
    - position (int, optional): The position of the channel.
    - topic (str, optional): The topic of the Stage Channel.
    - bitrate (int, optional): The bitrate of the Stage Channel.
    - user_limit (int, optional): The user limit for the Stage Channel.
    - reason (str, optional): The reason for creating the channel.
    - **fields: Additional fields for the channel.

discord.ForumChannel.create_tag(*, name, moderated=False, emoji_id=None, emoji_name=None)
  - Creates a tag for a ForumChannel.
  - Parameters:
    - name (str): The name of the tag.
    - moderated (bool, optional): Whether the tag is moderated.
    - emoji_id (int, optional): The ID of the emoji for the tag.
    - emoji_name (str, optional): The name of the emoji for the tag.

discord.CategoryChannel.create_text_channel(name, *, position=0, topic=None, nsfw=False, slowmode_delay=0, default_auto_archive_duration=60, reason=None, **fields)
  - Creates a TextChannel within a CategoryChannel.
  - Parameters:
    - name (str): The name of the TextChannel.
    - position (int, optional): The position of the channel.
    - topic (str, optional): The topic of the TextChannel.
    - nsfw (bool, optional): Whether the TextChannel is NSFW.
    - slowmode_delay (int, optional): The slowmode delay in seconds.
    - default_auto_archive_duration (int, optional): The default auto-archive duration.
    - reason (str, optional): The reason for creating the channel.
    - **fields: Additional fields for the channel.

discord.Guild.create_text_channel(name, *, position=0, topic=None, nsfw=False, slowmode_delay=0, default_auto_archive_duration=60, reason=None, **fields)
  - Creates a TextChannel in the guild.
  - Parameters:
    - name (str): The name of the TextChannel.
    - position (int, optional): The position of the channel.
    - topic (str, optional): The topic of the TextChannel.
    - nsfw (bool, optional): Whether the TextChannel is NSFW.
    - slowmode_delay (int, optional): The slowmode delay in seconds.
    - default_auto_archive_duration (int, optional): The default auto-archive duration.
    - reason (str, optional): The reason for creating the channel.
    - **fields: Additional fields for the channel.

discord.CategoryChannel.create_voice_channel(name, *, position=0, bitrate=64000, user_limit=0, reason=None, **fields)
  - Creates a VoiceChannel within a CategoryChannel.
  - Parameters:
    - name (str): The name of the VoiceChannel.
    - position (int, optional): The position of the channel.
    - bitrate (int, optional): The bitrate of the VoiceChannel.
    - user_limit (int, optional): The user limit for the VoiceChannel.
    - reason (str, optional): The reason for creating the channel.
    - **fields: Additional fields for the channel.

discord.Guild.create_voice_channel(name, *, position=0, bitrate=64000, user_limit=0, reason=None, **fields)
  - Creates a VoiceChannel in the guild.
  - Parameters:
    - name (str): The name of the VoiceChannel.
    - position (int, optional): The position of the channel.
    - bitrate (int, optional): The bitrate of the VoiceChannel.
    - user_limit (int, optional): The user limit for the VoiceChannel.
    - reason (str, optional): The reason for creating the channel.
    - **fields: Additional fields for the channel.

discord.StageChannel.create_webhook(*, name, avatar=None, reason=None)
  - Creates a webhook for a StageChannel.
  - Parameters:
    - name (str): The name of the webhook.
    - avatar (bytes, optional): The avatar for the webhook.
    - reason (str, optional): The reason for creating the webhook.

discord.TextChannel.create_webhook(*, name, avatar=None, reason=None)
  - Creates a webhook for a TextChannel.
  - Parameters:
    - name (str): The name of the webhook.
    - avatar (bytes, optional): The avatar for the webhook.
    - reason (str, optional): The reason for creating the webhook.

discord.VoiceChannel.create_webhook(*, name, avatar=None, reason=None)
  - Creates a webhook for a VoiceChannel.
  - Parameters:
    - name (str): The name of the webhook.
    - avatar (bytes, optional): The avatar for the webhook.
    - reason (str, optional): The reason for creating the webhook.
```

----------------------------------------

TITLE: discord.Client.fetch_guild_preview()
DESCRIPTION: Adds the fetch_guild_preview() method to Client, enabling fetching of guild previews.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
import discord

async def fetch_preview(client: discord.Client, guild_id: int):
    guild_preview = await client.fetch_guild_preview(guild_id)
    print(f"Fetched preview for guild: {guild_preview.name}")
```

----------------------------------------

TITLE: Fetch Discord Stage Instance
DESCRIPTION: Fetches a stage instance. This method is available for both discord.Client and commands.Bot.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Client.fetch_stage_instance(channel: discord.StageChannel)
  Fetches a stage instance associated with a stage channel.
  Parameters:
    channel: The stage channel to fetch the instance from.
  Returns: A StageInstance object or None if no instance exists.

commands.Bot.fetch_stage_instance(channel: discord.StageChannel)
  Fetches a stage instance associated with a stage channel for the bot.
  Parameters:
    channel: The stage channel to fetch the instance from.
  Returns: A StageInstance object or None if no instance exists.
```

----------------------------------------

TITLE: Discord Client Exceptions
DESCRIPTION: Covers exceptions related to the core Discord client operations and command registration.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
ClientException:
  Base class for client related errors.

CommandRegistrationError:
  Inherits from ClientException.
  Raised when there is an error during command registration.
```

----------------------------------------

TITLE: Using Coroutines with await and yield from
DESCRIPTION: Demonstrates how to correctly call asynchronous functions (coroutines) using either `await` (Python 3.5+) or `yield from`.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_async

LANGUAGE: python
CODE:
```
client.send_message(message.channel, 'Hello')
```

LANGUAGE: python
CODE:
```
yield from client.send_message(message.channel, 'Hello')
```

LANGUAGE: python
CODE:
```
await client.send_message(message.channel, 'Hello')
```

----------------------------------------

TITLE: discord.ext.commands.SoundboardSoundConverter API
DESCRIPTION: Converts to a SoundboardSound. Lookups are done for the local guild if available, otherwise by global cache in DM contexts. The lookup strategy prioritizes ID, then name. New in version 2.5.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
class discord.ext.commands.SoundboardSoundConverter(*args, **kwargs):
    async convert(ctx, argument):
        Converts to a [`SoundboardSound`](https://discordpy.readthedocs.io/en/stable/api/discord.SoundboardSound "discord.SoundboardSound").
        Lookup strategy:
          1. Lookup by ID.
          2. Lookup by name.
        Parameters:
          ctx ([`Context`](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Context "discord.ext.commands.Context")) – The invocation context.
          argument ([`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.13)")) – The argument to convert.
        Raises:
          [**CommandError**](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.CommandError "discord.ext.commands.CommandError") – A generic exception occurred.
          [**BadArgument**](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.BadArgument "discord.ext.commands.BadArgument") – The converter failed to convert the argument.
```

----------------------------------------

TITLE: Discord App Command and Select Menu Options
DESCRIPTION: References for accessing options within Discord application commands and select menus. These properties allow retrieval of configuration or choices associated with these interactive elements.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.AppCommand.options:
  Description: Returns a tuple of options associated with the command.
  Usage: app_command.options

discord.app_commands.AppCommandGroup.options:
  Description: Returns a tuple of options associated with the command group.
  Usage: app_command_group.options

discord.SelectMenu.options:
  Description: A list of discord.SelectOption objects that represent the choices in the select menu.
  Usage: select_menu.options

discord.ui.Select.options:
  Description: A list of discord.SelectOption objects that represent the choices in the select menu.
  Usage: select.options
```

----------------------------------------

TITLE: discord.ext.commands.Bot API Reference
DESCRIPTION: Provides a comprehensive reference for the discord.ext.commands.Bot class, including its attributes and methods for managing Discord bot commands and interactions.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Bot:
  Description: Represents a Discord bot, subclassing discord.Client and GroupMixin for command management.
  Attributes:
    command_prefix:
      Description: The prefix for invoking commands. Can be a string, callable (sync or async), or an iterable of strings.
      Details: An empty string matches any message (use with caution). Order matters for iterables (e.g., ('!', '!?')). Accessed via Context.prefix.
    case_insensitive:
      Type: bool
      Description: Whether commands should be case-insensitive. Defaults to False. Does not apply to groups; must be set per group.
    description:
      Type: str
      Description: Content prefixed into the default help message.
    help_command:
      Type: Optional[HelpCommand]
      Description: The help command implementation. Can be set dynamically. Set to None to remove.
    owner_id:
      Type: Optional[int]
      Description: The user ID of the bot owner. Fetched automatically via application_info() if not set and queried via is_owner().
  Methods:
    wait_until_ready():
      Description: Asynchronously waits until the bot is ready and cleans up resources. New in version 2.0.
    walk_commands():
      Description: Walks through all the commands, including those in groups.
```

----------------------------------------

TITLE: Context Help and Message Fetching
DESCRIPTION: Methods for displaying help messages for commands or cogs, and for retrieving specific messages by their ID.

SOURCE: https://discordpy.readthedocs.io/en/stable/ext/commands/api

LANGUAGE: APIDOC
CODE:
```
Context.send_help(_entity=None)
    Coroutine. Shows the help command for the specified entity (command, cog, or string name).
    If no entity is provided, shows help for the entire bot.
    Returns None on bad input or if no help command is found.
    Parameters:
        entity (Optional[Union[Command, Cog, str]]): The entity to show help for.
    Returns:
        Any: The result of the help command, if any.

Context.fetch_message(id)
    Coroutine. Retrieves a single Message from the destination by its ID.
    Parameters:
        id (int): The message ID to look for.
    Raises:
        discord.NotFound: The specified message was not found.
```

----------------------------------------

TITLE: AppInfo and ForumChannel Layout
DESCRIPTION: Details on the role_connections_verification_url in AppInfo and the default_layout for ForumChannel.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
app_info_role_connections: discord.AppInfo.role_connections_verification_url
forum_channel_layout: discord.ForumChannel.default_layout
```

----------------------------------------

TITLE: Client and Related Attributes
DESCRIPTION: Documentation related to the discord.Client object, its associated client status, exceptions, and user information. Also includes client status for members and presence updates.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: python
CODE:
```
discord.Client
discord.Interaction.client
discord.Member.client_status
discord.RawPresenceUpdateEvent.client_status
discord.ClientException
discord.ClientStatus
discord.ClientUser
```

----------------------------------------

TITLE: Discord Help Command Defaults
DESCRIPTION: Configuration for the default help command, specifically the 'no_category' setting.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.DefaultHelpCommand.no_category
commands.MinimalHelpCommand.no_category
```

----------------------------------------

TITLE: Event Registration in discord.py
DESCRIPTION: Demonstrates how to register events in discord.py, showing the evolution from older methods using `@asyncio.coroutine` to the modern `async def` syntax and the utility decorator `@client.async_event`.

SOURCE: https://discordpy.readthedocs.io/en/stable/migrating_to_async

LANGUAGE: python
CODE:
```
@client.event
defon_message(message):
    pass
```

LANGUAGE: python
CODE:
```
@client.event
@asyncio.coroutine
defon_message(message):
    pass
```

LANGUAGE: python
CODE:
```
@client.event
async defon_message(message):
    pass
```

LANGUAGE: python
CODE:
```
@client.async_event
defon_message(message):
    pass
```

----------------------------------------

TITLE: Check Client Readiness
DESCRIPTION: Verifies if the Discord client is ready and has finished its initial connection and synchronization process. This is crucial before attempting to interact with Discord's API.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.Client.is_ready()
  - Returns: bool
  - Description: Whether the client is ready.

commands.Bot.is_ready()
  - Returns: bool
  - Description: Whether the bot is ready.
```

----------------------------------------

TITLE: discord.ui.Select Class Documentation
DESCRIPTION: Provides detailed documentation for the discord.ui.Select class, including its constructor parameters, attributes, and methods. This class is used to create dropdown menus for Discord interactions.

SOURCE: https://discordpy.readthedocs.io/en/stable/interactions/api

LANGUAGE: APIDOC
CODE:
```
discord.ui.Select
  __init__(custom_id: str = ..., placeholder: Optional[str] = None, min_values: int = 1, max_values: int = 1, options: List[discord.SelectOption] = ..., disabled: bool = False, row: Optional[int] = None)
    Represents a UI select menu with a list of custom options. This is represented to the user as a dropdown menu. New in version 2.0.
    Parameters:
      custom_id: The ID of the select menu that gets received during an interaction. If not given then one is generated for you. Can only be up to 100 characters.
      placeholder: The placeholder text that is shown if nothing is selected, if any. Can only be up to 150 characters.
      min_values: The minimum number of items that must be chosen for this select menu. Defaults to 1 and must be between 0 and 25.
      max_values: The maximum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25.
      options: A list of options that can be selected in this menu. Can only contain up to 25 items.
      disabled: Whether the select is disabled or not.
      row: The relative row this select menu belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you’d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed).

  Attributes:
    custom_id: The ID of the select menu.
    disabled: Whether the select is disabled.
    max_values: The maximum number of items that can be chosen.
    min_values: The minimum number of items that must be chosen.
    options: A list of available options for the select menu.
    placeholder: The placeholder text displayed when no option is selected.
    type: The type of the component.
    values: A list of values selected by the user.
    view: The view this component belongs to.

  Methods:
    add_option(option: discord.SelectOption):
      Adds an option to the select menu.
    append_option(option: discord.SelectOption):
      Appends an option to the select menu.
    callback(interaction: discord.Interaction):
      The callback function that is called when the user selects an option.
    interaction_check(interaction: discord.Interaction):
      A check that is run before the callback is executed.
```

----------------------------------------

TITLE: Command Flag and Context Prefix
DESCRIPTION: Covers aspects of command handling in discord.py extensions, including defining positional flags and accessing the command prefix.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.Flag.positional
commands.Context.prefix

- Description: Defines a command flag as positional and provides access to the command's prefix.
- Example: `@commands.command()
async def my_command(ctx, flag: commands.Flag):
    if flag.positional:
        await ctx.send("This is a positional flag.")

print(ctx.prefix)
```

----------------------------------------

TITLE: Context and Interaction Handling
DESCRIPTION: Deals with context and interaction handling in Discord commands and application commands, including context menus.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
commands.Context
  - Represents the context in which a command is executed.

discord.Interaction.context
  - The context of the interaction.

discord.app_commands.TranslationError.context
  - The context related to a translation error.

commands.HelpCommand.context
  - The context for help commands.

discord.app_commands.CommandTree.context_menu()
  - Registers a context menu command.
  - Parameters:
    - name: The name of the context menu command.
    - guild: The guild to register the command in (optional).
    - cls: The context menu class (optional).

discord.app_commands.context_menu()
  - Decorator to register a context menu command.

discord.MessageType.context_menu_command
  - Represents a message type for context menu commands.

discord.app_commands.ContextMenu
  - Represents a context menu command.
```

----------------------------------------

TITLE: discord.app_commands.describe()
DESCRIPTION: Decorator to describe application commands. It allows for localized descriptions to be provided for commands, making them more accessible to a global audience. This is crucial for internationalization of Discord bots.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.app_commands.describe(*, description: str = '', descriptions: Optional[Dict[str, str]] = None)

Decorator to describe application commands.

Parameters:
  description: The default description for the command.
  descriptions: A dictionary mapping locale codes (e.g., 'en-US', 'fr') to their respective descriptions.
```

----------------------------------------

TITLE: Discord UI Styles and Options
DESCRIPTION: References to styles for UI components like TextInputs and Buttons, and option types for application commands.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.TextInput.style:
  Represents the style of a text input.

discord.ui.Button.style:
  Represents the style of a button.

discord.ui.TextInput.style:
  Represents the style of a text input within UI.

discord.AppCommandOptionType.subcommand:
  Enum member for subcommand option type.

discord.AppCommandOptionType.subcommand_group:
  Enum member for subcommand group option type.
```

----------------------------------------

TITLE: Discord Stage Instance Events
DESCRIPTION: API documentation for events related to Discord stage instances, including creation, deletion, and updates.

SOURCE: https://discordpy.readthedocs.io/en/stable/genindex

LANGUAGE: APIDOC
CODE:
```
discord.on_stage_instance_create()
  - Called when a stage instance is created.

discord.on_stage_instance_delete()
  - Called when a stage instance is deleted.

discord.on_stage_instance_update()
  - Called when a stage instance is updated.
```

----------------------------------------

TITLE: Client Guild Ready Timeout
DESCRIPTION: Introduces `guild_ready_timeout` parameter for `Client` and subclasses to manage timeouts during the `GUILD_CREATE` stream.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: python
CODE:
```
client = discord.Client(guild_ready_timeout=60.0)
```

----------------------------------------

TITLE: Discord Entitlements API Support
DESCRIPTION: Adds support for Discord's Entitlements API, allowing developers to manage and fetch SKU and entitlement information. Includes new enums, client methods for fetching and creating entitlements, and interaction attributes.

SOURCE: https://discordpy.readthedocs.io/en/stable/whats_new

LANGUAGE: APIDOC
CODE:
```
discord.SKUType
discord.EntitlementType
discord.EntitlementOwnerType

Client.fetch_skus()
  Fetches a list of SKUs available for the application.
  Returns: List[SKUType]

Client.fetch_entitlement(entitlement_ids: list[int])
  Fetches entitlement objects based on provided IDs.
  Parameters:
    entitlement_ids: A list of entitlement IDs to fetch.
  Returns: List[EntitlementType]

Client.create_entitlement(sku_id: int, owner_id: int, owner_type: EntitlementOwnerType)
  Creates a new entitlement for a user or guild.
  Parameters:
    sku_id: The ID of the SKU to grant.
    owner_id: The ID of the user or guild receiving the entitlement.
    owner_type: The type of owner (User or Guild).
  Returns: EntitlementType

Client.entitlements
  A property that returns a list of entitlements associated with the client.
  Returns: List[EntitlementType]

Interaction.entitlement_sku_ids
  A list of SKU IDs associated with the interaction's entitlements.
  Returns: list[int]

Interaction.entitlements
  A list of entitlement objects associated with the interaction.
  Returns: list[EntitlementType]

ButtonStyle.premium
  Represents a premium button style, typically used for purchasing SKUs.

ui.Button.sku_id
  The SKU ID associated with a UI button, used for purchase flows.
```